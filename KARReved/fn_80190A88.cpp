//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_80190A88(PPC::Runtime::GCContext* context)
{
/*80190A88 0018D888*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80190A8C 0018D88C*/ PPC::Runtime::ASM::mflr(context->r0);
/*80190A90 0018D890*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80190A94 0018D894*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80190A98 0018D898*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*80190A9C 0018D89C*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7f8, context->r3));
/*80190AA0 0018D8A0*/ PPC::Runtime::ASM::cmplwi(context->r12, 0x0);
/*80190AA4 0018D8A4*/ PPC::Runtime::ASM::beq(.L_80190AB0);
/*80190AA8 0018D8A8*/ PPC::Runtime::ASM::mtctr(context->r12);
/*80190AAC 0018D8AC*/ PPC::Runtime::ASM::bctrl();
RUNTIME_PPC_JUMP_LABEL(.L_80190AB0, 0x80190AB0) //this is a jump label
/*80190AB0 0018D8B0*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7fc, context->r31));
/*80190AB4 0018D8B4*/ PPC::Runtime::ASM::cmplwi(context->r12, 0x0);
/*80190AB8 0018D8B8*/ PPC::Runtime::ASM::beq(.L_80190AC8);
/*80190ABC 0018D8BC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80190AC0 0018D8C0*/ PPC::Runtime::ASM::mtctr(context->r12);
/*80190AC4 0018D8C4*/ PPC::Runtime::ASM::bctrl();
RUNTIME_PPC_JUMP_LABEL(.L_80190AC8, 0x80190AC8) //this is a jump label
/*80190AC8 0018D8C8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80190ACC 0018D8CC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80190AD0 0018D8D0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80190AD4 0018D8D4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80190AD8 0018D8D8*/ PPC::Runtime::ASM::blr();
}