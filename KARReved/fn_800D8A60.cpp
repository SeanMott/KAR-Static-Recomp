//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800D86FC.hpp"
#include "fn_800D86FC.hpp"
#include "fn_800D87EC.hpp"



void fn_800D8A60(PPC::Runtime::GCContext* context)
{
/*800D8A60 000D5860*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x40, context->r1));
/*800D8A64 000D5864*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D8A68 000D5868*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r1));
/*800D8A6C 000D586C*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x40);
/*800D8A70 000D5870*/ PPC::Runtime::ASM::bl(_savegpr_27);
/*800D8A74 000D5874*/ PPC::Runtime::ASM::mr(context->r27, context->r3);
/*800D8A78 000D5878*/ PPC::Runtime::ASM::mr(context->r28, context->r4);
/*800D8A7C 000D587C*/ PPC::Runtime::ASM::mr(context->r29, context->r5);
/*800D8A80 000D5880*/ PPC::Runtime::ASM::mr(context->r30, context->r7);
/*800D8A84 000D5884*/ PPC::Runtime::ASM::mr(context->r31, context->r8);
/*800D8A88 000D5888*/ PPC::Runtime::ASM::slwi(context->r3, context->r6, 3);
/*800D8A8C 000D588C*/ PPC::Runtime::ASM::bl(fn__HSD_MemAlloc);
/*800D8A90 000D5890*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r27));
/*800D8A94 000D5894*/ PPC::Runtime::ASM::slwi(context->r3, context->r30, 2);
/*800D8A98 000D5898*/ PPC::Runtime::ASM::bl(fn__HSD_MemAlloc);
/*800D8A9C 000D589C*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r27));
/*800D8AA0 000D58A0*/ PPC::Runtime::ASM::slwi(context->r3, context->r31, 2);
/*800D8AA4 000D58A4*/ PPC::Runtime::ASM::bl(fn__HSD_MemAlloc);
/*800D8AA8 000D58A8*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r27));
/*800D8AAC 000D58AC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r27));
/*800D8AB0 000D58B0*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800D8AB4 000D58B4*/ PPC::Runtime::ASM::bne(.L_800D8AD0);
/*800D8AB8 000D58B8*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_924 @ Get_MemoryOffset_HighBit);
/*800D8ABC 000D58BC*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_925 @ Get_MemoryOffset_HighBit);
/*800D8AC0 000D58C0*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_924 @ Get_MemoryOffset_LowBit);
/*800D8AC4 000D58C4*/ PPC::Runtime::ASM::li(context->r4, 0x82);
/*800D8AC8 000D58C8*/ PPC::Runtime::ASM::addi(context->r5, context->r5, MemoryOffset_925 @ Get_MemoryOffset_LowBit);
/*800D8ACC 000D58CC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800D8AD0, 0x800D8AD0) //this is a jump label
/*800D8AD0 000D58D0*/ PPC::Runtime::ASM::li(context->r8, 0x0);
/*800D8AD4 000D58D4*/ PPC::Runtime::ASM::addi(context->r7, context->r1, 0x8);
/*800D8AD8 000D58D8*/ PPC::Runtime::ASM::addi(context->r6, context->r1, 0xc);
/*800D8ADC 000D58DC*/ PPC::Runtime::ASM::addi(context->r0, context->r1, 0x10);
/*800D8AE0 000D58E0*/ PPC::Runtime::ASM::lis(context->r3, fn_800D86FC @ Get_MemoryOffset_HighBit);
/*800D8AE4 000D58E4*/ PPC::Runtime::ASM::stw(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800D8AE8 000D58E8*/ PPC::Runtime::ASM::addi(context->r4, context->r3, fn_800D86FC @ Get_MemoryOffset_LowBit);
/*800D8AEC 000D58EC*/ PPC::Runtime::ASM::addi(context->r5, context->r1, 0x18);
/*800D8AF0 000D58F0*/ PPC::Runtime::ASM::stw(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D8AF4 000D58F4*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*800D8AF8 000D58F8*/ PPC::Runtime::ASM::stw(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D8AFC 000D58FC*/ PPC::Runtime::ASM::stw(context->r27, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800D8B00 000D5900*/ PPC::Runtime::ASM::stw(context->r7, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800D8B04 000D5904*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*800D8B08 000D5908*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800D8B0C 000D590C*/ PPC::Runtime::ASM::bl(fn_HSD_JObjWalkTree);
/*800D8B10 000D5910*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*800D8B14 000D5914*/ PPC::Runtime::ASM::mr(context->r3, context->r27);
/*800D8B18 000D5918*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D8B1C 000D591C*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*800D8B20 000D5920*/ PPC::Runtime::ASM::addi(context->r5, context->r1, 0x14);
/*800D8B24 000D5924*/ PPC::Runtime::ASM::bl(fn_800D87EC);
/*800D8B28 000D5928*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x40);
/*800D8B2C 000D592C*/ PPC::Runtime::ASM::bl(_restgpr_27);
/*800D8B30 000D5930*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r1));
/*800D8B34 000D5934*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D8B38 000D5938*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x40);
/*800D8B3C 000D593C*/ PPC::Runtime::ASM::blr();
}