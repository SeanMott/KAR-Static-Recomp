//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_FuncDoesShit_5.hpp"
#include "fn_80138C90.hpp"



void fn_8014CEA8(PPC::Runtime::GCContext* context)
{
/*8014CEA8 00149CA8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*8014CEAC 00149CAC*/ PPC::Runtime::ASM::mflr(context->r0);
/*8014CEB0 00149CB0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8014CEB4 00149CB4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8014CEB8 00149CB8*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8014CEBC 00149CBC*/ PPC::Runtime::ASM::bl(fn_FuncDoesShit_5);
/*8014CEC0 00149CC0*/ PPC::Runtime::ASM::extsb(context->r0, context->r31);
/*8014CEC4 00149CC4*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*8014CEC8 00149CC8*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*8014CECC 00149CCC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x418, context->r3));
/*8014CED0 00149CD0*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*8014CED4 00149CD4*/ PPC::Runtime::ASM::beq(.L_8014CF80);
/*8014CED8 00149CD8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r3));
/*8014CEDC 00149CDC*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*8014CEE0 00149CE0*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E05F0 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8014CEE4 00149CE4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*8014CEE8 00149CE8*/ PPC::Runtime::ASM::bl(fn_80138C90);
/*8014CEEC 00149CEC*/ PPC::Runtime::ASM::lfs(context->f0, STRUCT_FLOAT_COUNT_1805E05F8 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8014CEF0 00149CF0*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*8014CEF4 00149CF4*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*8014CEF8 00149CF8*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8014CEFC 00149CFC*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8014CF00 00149D00*/ PPC::Runtime::ASM::bne(.L_8014CF14);
/*8014CF04 00149D04*/ PPC::Runtime::ASM::li(context->r3, lbl_805D6708 @ Get_MemoryOffset_SDA21);
/*8014CF08 00149D08*/ PPC::Runtime::ASM::li(context->r4, 0x316);
/*8014CF0C 00149D0C*/ PPC::Runtime::ASM::li(context->r5, lbl_805D6710 @ Get_MemoryOffset_SDA21);
/*8014CF10 00149D10*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_8014CF14, 0x8014CF14) //this is a jump label
/*8014CF14 00149D14*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8014CF18 00149D18*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8014CF1C 00149D1C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r31));
/*8014CF20 00149D20*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*8014CF24 00149D24*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r31));
/*8014CF28 00149D28*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r31));
/*8014CF2C 00149D2C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*8014CF30 00149D30*/ PPC::Runtime::ASM::rlwinm.(context->r0, context->r0, 0, 6, 6);
/*8014CF34 00149D34*/ PPC::Runtime::ASM::bne(.L_8014CF80);
/*8014CF38 00149D38*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*8014CF3C 00149D3C*/ PPC::Runtime::ASM::beq(.L_8014CF80);
/*8014CF40 00149D40*/ PPC::Runtime::ASM::bne(.L_8014CF54);
/*8014CF44 00149D44*/ PPC::Runtime::ASM::li(context->r3, lbl_805D6708 @ Get_MemoryOffset_SDA21);
/*8014CF48 00149D48*/ PPC::Runtime::ASM::li(context->r4, 0x25d);
/*8014CF4C 00149D4C*/ PPC::Runtime::ASM::li(context->r5, lbl_805D6710 @ Get_MemoryOffset_SDA21);
/*8014CF50 00149D50*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_8014CF54, 0x8014CF54) //this is a jump label
/*8014CF54 00149D54*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*8014CF58 00149D58*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*8014CF5C 00149D5C*/ PPC::Runtime::ASM::rlwinm.(context->r0, context->r4, 0, 8, 8);
/*8014CF60 00149D60*/ PPC::Runtime::ASM::bne(.L_8014CF70);
/*8014CF64 00149D64*/ PPC::Runtime::ASM::rlwinm.(context->r0, context->r4, 0, 25, 25);
/*8014CF68 00149D68*/ PPC::Runtime::ASM::beq(.L_8014CF70);
/*8014CF6C 00149D6C*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_8014CF70, 0x8014CF70) //this is a jump label
/*8014CF70 00149D70*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*8014CF74 00149D74*/ PPC::Runtime::ASM::bne(.L_8014CF80);
/*8014CF78 00149D78*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*8014CF7C 00149D7C*/ PPC::Runtime::ASM::bl(fn_HSD_JOBJ_SetMtxDirtySub);
RUNTIME_PPC_JUMP_LABEL(.L_8014CF80, 0x8014CF80) //this is a jump label
/*8014CF80 00149D80*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8014CF84 00149D84*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8014CF88 00149D88*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8014CF8C 00149D8C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*8014CF90 00149D90*/ PPC::Runtime::ASM::blr();
}