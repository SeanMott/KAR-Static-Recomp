//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800E1F48.hpp"



void fn_800CF874(PPC::Runtime::GCContext* context)
{
/*800CF874 000CC674*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x30, context->r1));
/*800CF878 000CC678*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CF87C 000CC67C*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_898 @ Get_MemoryOffset_HighBit);
/*800CF880 000CC680*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800CF884 000CC684*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*800CF888 000CC688*/ PPC::Runtime::ASM::addi(context->r31, context->r5, MemoryOffset_898 @ Get_MemoryOffset_LowBit);
/*800CF88C 000CC68C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1));
/*800CF890 000CC690*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800CF894 000CC694*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CF898 000CC698*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*800CF89C 000CC69C*/ PPC::Runtime::ASM::mr(context->r28, context->r4);
/*800CF8A0 000CC6A0*/ PPC::Runtime::ASM::lwz(context->r29, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CF8A4 000CC6A4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r29));
/*800CF8A8 000CC6A8*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF8AC 000CC6AC*/ PPC::Runtime::ASM::bne(.L_800CF8C0);
/*800CF8B0 000CC6B0*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x9c);
/*800CF8B4 000CC6B4*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800CF8B8 000CC6B8*/ PPC::Runtime::ASM::li(context->r4, 0x29b);
/*800CF8BC 000CC6BC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF8C0, 0x800CF8C0) //this is a jump label
/*800CF8C0 000CC6C0*/ PPC::Runtime::ASM::cmpw(context->r30, context->r28);
/*800CF8C4 000CC6C4*/ PPC::Runtime::ASM::bne(.L_800CF8D0);
/*800CF8C8 000CC6C8*/ PPC::Runtime::ASM::li(context->r3, -0x1);
/*800CF8CC 000CC6CC*/ PPC::Runtime::ASM::b(.L_800CF9A4);
RUNTIME_PPC_JUMP_LABEL(.L_800CF8D0, 0x800CF8D0) //this is a jump label
/*800CF8D0 000CC6D0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r29));
/*800CF8D4 000CC6D4*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF8D8 000CC6D8*/ PPC::Runtime::ASM::bne(.L_800CF8EC);
/*800CF8DC 000CC6DC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF8E0 000CC6E0*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xe0);
/*800CF8E4 000CC6E4*/ PPC::Runtime::ASM::li(context->r4, 0xef);
/*800CF8E8 000CC6E8*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF8EC, 0x800CF8EC) //this is a jump label
/*800CF8EC 000CC6EC*/ PPC::Runtime::ASM::cmpwi(context->r30, 0x0);
/*800CF8F0 000CC6F0*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800CF8F4 000CC6F4*/ PPC::Runtime::ASM::blt(.L_800CF908);
/*800CF8F8 000CC6F8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x128, context->r29));
/*800CF8FC 000CC6FC*/ PPC::Runtime::ASM::cmpw(context->r30, context->r0);
/*800CF900 000CC700*/ PPC::Runtime::ASM::bge(.L_800CF908);
/*800CF904 000CC704*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800CF908, 0x800CF908) //this is a jump label
/*800CF908 000CC708*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800CF90C 000CC70C*/ PPC::Runtime::ASM::bne(.L_800CF920);
/*800CF910 000CC710*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF914 000CC714*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xec);
/*800CF918 000CC718*/ PPC::Runtime::ASM::li(context->r4, 0xf0);
/*800CF91C 000CC71C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF920, 0x800CF920) //this is a jump label
/*800CF920 000CC720*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r29));
/*800CF924 000CC724*/ PPC::Runtime::ASM::mulli(context->r3, context->r30, 0x2c);
/*800CF928 000CC728*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x124, context->r29));
/*800CF92C 000CC72C*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF930 000CC730*/ PPC::Runtime::ASM::add(context->r30, context->r4, context->r3);
/*800CF934 000CC734*/ PPC::Runtime::ASM::bne(.L_800CF948);
/*800CF938 000CC738*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF93C 000CC73C*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xe0);
/*800CF940 000CC740*/ PPC::Runtime::ASM::li(context->r4, 0xef);
/*800CF944 000CC744*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF948, 0x800CF948) //this is a jump label
/*800CF948 000CC748*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x0);
/*800CF94C 000CC74C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800CF950 000CC750*/ PPC::Runtime::ASM::blt(.L_800CF964);
/*800CF954 000CC754*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x128, context->r29));
/*800CF958 000CC758*/ PPC::Runtime::ASM::cmpw(context->r28, context->r0);
/*800CF95C 000CC75C*/ PPC::Runtime::ASM::bge(.L_800CF964);
/*800CF960 000CC760*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800CF964, 0x800CF964) //this is a jump label
/*800CF964 000CC764*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800CF968 000CC768*/ PPC::Runtime::ASM::bne(.L_800CF97C);
/*800CF96C 000CC76C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF970 000CC770*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xec);
/*800CF974 000CC774*/ PPC::Runtime::ASM::li(context->r4, 0xf0);
/*800CF978 000CC778*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF97C, 0x800CF97C) //this is a jump label
/*800CF97C 000CC77C*/ PPC::Runtime::ASM::mulli(context->r0, context->r28, 0x2c);
/*800CF980 000CC780*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x124, context->r29));
/*800CF984 000CC784*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*800CF988 000CC788*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800CF98C 000CC78C*/ PPC::Runtime::ASM::add(context->r5, context->r5, context->r0);
/*800CF990 000CC790*/ PPC::Runtime::ASM::addi(context->r6, context->r1, 0x10);
/*800CF994 000CC794*/ PPC::Runtime::ASM::addi(context->r7, context->r1, 0xc);
/*800CF998 000CC798*/ PPC::Runtime::ASM::addi(context->r8, context->r1, 0x8);
/*800CF99C 000CC79C*/ PPC::Runtime::ASM::bl(fn_800E1F48);
/*800CF9A0 000CC7A0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
RUNTIME_PPC_JUMP_LABEL(.L_800CF9A4, 0x800CF9A4) //this is a jump label
/*800CF9A4 000CC7A4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800CF9A8 000CC7A8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*800CF9AC 000CC7AC*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1));
/*800CF9B0 000CC7B0*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CF9B4 000CC7B4*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*800CF9B8 000CC7B8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CF9BC 000CC7BC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x30);
/*800CF9C0 000CC7C0*/ PPC::Runtime::ASM::blr();
}