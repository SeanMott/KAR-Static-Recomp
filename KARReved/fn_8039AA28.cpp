//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_8039AA28(PPC::Runtime::GCContext* context)
{
/*8039AA28 00397828*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8039AA2C 0039782C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8039AA30 00397830*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8039AA34 00397834*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8039AA38 00397838*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8039AA3C 0039783C*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*8039AA40 00397840*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r12));
/*8039AA44 00397844*/ PPC::Runtime::ASM::mtctr(context->r12);
/*8039AA48 00397848*/ PPC::Runtime::ASM::bctrl();
/*8039AA4C 0039784C*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*8039AA50 00397850*/ PPC::Runtime::ASM::beq(.L_8039AA5C);
/*8039AA54 00397854*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E5018 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8039AA58 00397858*/ PPC::Runtime::ASM::b(.L_8039AA80);
RUNTIME_PPC_JUMP_LABEL(.L_8039AA5C, 0x8039AA5C) //this is a jump label
/*8039AA5C 0039785C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*8039AA60 00397860*/ PPC::Runtime::ASM::lis(context->r3, Struct_PotenciallyAInputOneBasedOnWhatTheSpreadSheetSaysButItASkip @ Get_MemoryOffset_HighBit);
/*8039AA64 00397864*/ PPC::Runtime::ASM::addi(context->r3, context->r3, Struct_PotenciallyAInputOneBasedOnWhatTheSpreadSheetSaysButItASkip @ Get_MemoryOffset_LowBit);
/*8039AA68 00397868*/ PPC::Runtime::ASM::oris(context->r0, context->r0, 0x2);
/*8039AA6C 0039786C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*8039AA70 00397870*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*8039AA74 00397874*/ PPC::Runtime::ASM::oris(context->r0, context->r0, 0x4);
/*8039AA78 00397878*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*8039AA7C 0039787C*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r3));
RUNTIME_PPC_JUMP_LABEL(.L_8039AA80, 0x8039AA80) //this is a jump label
/*8039AA80 00397880*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8039AA84 00397884*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8039AA88 00397888*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8039AA8C 0039788C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8039AA90 00397890*/ PPC::Runtime::ASM::blr();
}