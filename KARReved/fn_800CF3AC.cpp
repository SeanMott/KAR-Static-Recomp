//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800CF3AC(PPC::Runtime::GCContext* context)
{
/*800CF3AC 000CC1AC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800CF3B0 000CC1B0*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CF3B4 000CC1B4*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_898 @ Get_MemoryOffset_HighBit);
/*800CF3B8 000CC1B8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CF3BC 000CC1BC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800CF3C0 000CC1C0*/ PPC::Runtime::ASM::addi(context->r31, context->r5, MemoryOffset_898 @ Get_MemoryOffset_LowBit);
/*800CF3C4 000CC1C4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800CF3C8 000CC1C8*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CF3CC 000CC1CC*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*800CF3D0 000CC1D0*/ PPC::Runtime::ASM::lwz(context->r4, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CF3D4 000CC1D4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r4));
/*800CF3D8 000CC1D8*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*800CF3DC 000CC1DC*/ PPC::Runtime::ASM::bne(.L_800CF3F0);
/*800CF3E0 000CC1E0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF3E4 000CC1E4*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x9c);
/*800CF3E8 000CC1E8*/ PPC::Runtime::ASM::li(context->r4, 0x1d);
/*800CF3EC 000CC1EC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF3F0, 0x800CF3F0) //this is a jump label
/*800CF3F0 000CC1F0*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x0);
/*800CF3F4 000CC1F4*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800CF3F8 000CC1F8*/ PPC::Runtime::ASM::blt(.L_800CF40C);
/*800CF3FC 000CC1FC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800CF400 000CC200*/ PPC::Runtime::ASM::cmpw(context->r29, context->r0);
/*800CF404 000CC204*/ PPC::Runtime::ASM::bge(.L_800CF40C);
/*800CF408 000CC208*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800CF40C, 0x800CF40C) //this is a jump label
/*800CF40C 000CC20C*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800CF410 000CC210*/ PPC::Runtime::ASM::bne(.L_800CF424);
/*800CF414 000CC214*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF418 000CC218*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xa8);
/*800CF41C 000CC21C*/ PPC::Runtime::ASM::li(context->r4, 0x1e);
/*800CF420 000CC220*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF424, 0x800CF424) //this is a jump label
/*800CF424 000CC224*/ PPC::Runtime::ASM::mulli(context->r0, context->r29, 0x18);
/*800CF428 000CC228*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800CF42C 000CC22C*/ PPC::Runtime::ASM::lwzx(context->r3, context->r3, context->r0);
/*800CF430 000CC230*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800CF434 000CC234*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800CF438 000CC238*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CF43C 000CC23C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CF440 000CC240*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CF444 000CC244*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800CF448 000CC248*/ PPC::Runtime::ASM::blr();
}