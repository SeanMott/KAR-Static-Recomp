//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "OSClearContext.hpp"
#include "OSSetCurrentContext.hpp"
#include "OSClearContext.hpp"
#include "OSSetCurrentContext.hpp"



void fn___ARHandler(PPC::Runtime::GCContext* context)
{
/*803E0220 003DD020*/ PPC::Runtime::ASM::mflr(context->r0);
/*803E0224 003DD024*/ PPC::Runtime::ASM::lis(context->r3, 0xcc00);
/*803E0228 003DD028*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803E022C 003DD02C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x5000);
/*803E0230 003DD030*/ PPC::Runtime::ASM::li(context->r0, -0x89);
/*803E0234 003DD034*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x2e0, context->r1));
/*803E0238 003DD038*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2dc, context->r1));
/*803E023C 003DD03C*/ PPC::Runtime::ASM::addi(context->r31, context->r4, 0x0);
/*803E0240 003DD040*/ PPC::Runtime::ASM::lhz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r3));
/*803E0244 003DD044*/ PPC::Runtime::ASM::and(context->r0, context->r5, context->r0);
/*803E0248 003DD048*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x20);
/*803E024C 003DD04C*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r3));
/*803E0250 003DD050*/ PPC::Runtime::ASM::addi(context->r3, context->r1, 0x10);
/*803E0254 003DD054*/ PPC::Runtime::ASM::bl(OSClearContext);
/*803E0258 003DD058*/ PPC::Runtime::ASM::addi(context->r3, context->r1, 0x10);
/*803E025C 003DD05C*/ PPC::Runtime::ASM::bl(OSSetCurrentContext);
/*803E0260 003DD060*/ PPC::Runtime::ASM::lwz(context->r12, STRUCT_BYTE4_COUNT_1805DE000 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803E0264 003DD064*/ PPC::Runtime::ASM::cmplwi(context->r12, 0x0);
/*803E0268 003DD068*/ PPC::Runtime::ASM::beq(.L_803E0274);
/*803E026C 003DD06C*/ PPC::Runtime::ASM::mtlr(context->r12);
/* 803E0270 003DD070  4E 80 00 21 */ blrl
RUNTIME_PPC_JUMP_LABEL(.L_803E0274, 0x803E0274) //this is a jump label
/*803E0274 003DD074*/ PPC::Runtime::ASM::addi(context->r3, context->r1, 0x10);
/*803E0278 003DD078*/ PPC::Runtime::ASM::bl(OSClearContext);
/*803E027C 003DD07C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*803E0280 003DD080*/ PPC::Runtime::ASM::bl(OSSetCurrentContext);
/*803E0284 003DD084*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2e4, context->r1));
/*803E0288 003DD088*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2dc, context->r1));
/*803E028C 003DD08C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x2e0);
/*803E0290 003DD090*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803E0294 003DD094*/ PPC::Runtime::ASM::blr();
}