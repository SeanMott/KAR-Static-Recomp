//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801DB154.hpp"



void fn_801DAFAC(PPC::Runtime::GCContext* context)
{
/*801DAFAC 001D7DAC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801DAFB0 001D7DB0*/ PPC::Runtime::ASM::mflr(context->r0);
/*801DAFB4 001D7DB4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801DAFB8 001D7DB8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6e0, context->r3));
/*801DAFBC 001D7DBC*/ PPC::Runtime::ASM::cmpw(context->r4, context->r0);
/*801DAFC0 001D7DC0*/ PPC::Runtime::ASM::ble(.L_801DAFC8);
/*801DAFC4 001D7DC4*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6e0, context->r3));
RUNTIME_PPC_JUMP_LABEL(.L_801DAFC8, 0x801DAFC8) //this is a jump label
/*801DAFC8 001D7DC8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6e0, context->r3));
/*801DAFCC 001D7DCC*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*801DAFD0 001D7DD0*/ PPC::Runtime::ASM::beq(.L_801DAFE4);
/*801DAFD4 001D7DD4*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc38, context->r3));
/* 801DAFD8 001D7DD8  54 00 CF FF */ extrwi. context->r0 , context->r0 , 1 , 24
/*801DAFDC 001D7DDC*/ PPC::Runtime::ASM::bne(.L_801DAFE4);
/*801DAFE0 001D7DE0*/ PPC::Runtime::ASM::bl(fn_801DB154);
RUNTIME_PPC_JUMP_LABEL(.L_801DAFE4, 0x801DAFE4) //this is a jump label
/*801DAFE4 001D7DE4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801DAFE8 001D7DE8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801DAFEC 001D7DEC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801DAFF0 001D7DF0*/ PPC::Runtime::ASM::blr();
}