//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800547E0.hpp"
#include "fn_800F7044.hpp"
#include "fn_800F6360.hpp"
#include "fn_killWhispy.hpp"



void fn_800FAEE8(PPC::Runtime::GCContext* context)
{
/*800FAEE8 000F7CE8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800FAEEC 000F7CEC*/ PPC::Runtime::ASM::mflr(context->r0);
/*800FAEF0 000F7CF0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FAEF4 000F7CF4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800FAEF8 000F7CF8*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800FAEFC 000F7CFC*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FAF00 000F7D00*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800FAF04 000F7D04*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*800FAF08 000F7D08*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800FAF0C 000F7D0C*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800FAF10 000F7D10*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x64, context->r3));
/*800FAF14 000F7D14*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*800FAF18 000F7D18*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*800FAF1C 000F7D1C*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 3);
/*800FAF20 000F7D20*/ PPC::Runtime::ASM::lwzx(context->r3, context->r3, context->r0);
/*800FAF24 000F7D24*/ PPC::Runtime::ASM::bl(fn_800547E0);
/*800FAF28 000F7D28*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800FAF2C 000F7D2C*/ PPC::Runtime::ASM::bne(.L_800FAFB0);
/*800FAF30 000F7D30*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*800FAF34 000F7D34*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*800FAF38 000F7D38*/ PPC::Runtime::ASM::b(.L_800FAF68);
RUNTIME_PPC_JUMP_LABEL(.L_800FAF3C, 0x800FAF3C) //this is a jump label
/*800FAF3C 000F7D3C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r31));
/*800FAF40 000F7D40*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*800FAF44 000F7D44*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*800FAF48 000F7D48*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*800FAF4C 000F7D4C*/ PPC::Runtime::ASM::add(context->r4, context->r0, context->r30);
/*800FAF50 000F7D50*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*800FAF54 000F7D54*/ PPC::Runtime::ASM::li(context->r8, 0x0);
/*800FAF58 000F7D58*/ PPC::Runtime::ASM::li(context->r9, 0x1);
/*800FAF5C 000F7D5C*/ PPC::Runtime::ASM::bl(fn_800F7044);
/*800FAF60 000F7D60*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x1c);
/*800FAF64 000F7D64*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800FAF68, 0x800FAF68) //this is a jump label
/*800FAF68 000F7D68*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r31));
/*800FAF6C 000F7D6C*/ PPC::Runtime::ASM::cmpw(context->r29, context->r0);
/*800FAF70 000F7D70*/ PPC::Runtime::ASM::blt(.L_800FAF3C);
/*800FAF74 000F7D74*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r28));
/*800FAF78 000F7D78*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*800FAF7C 000F7D7C*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800FAF80 000F7D80*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800FAF84 000F7D84*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r5));
/*800FAF88 000F7D88*/ PPC::Runtime::ASM::bl(fn_800F6360);
/*800FAF8C 000F7D8C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF8D4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FAF90 000F7D90*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800FAF94 000F7D94*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r31));
/*800FAF98 000F7D98*/ PPC::Runtime::ASM::li(context->r4, 0x3);
/*800FAF9C 000F7D9C*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*800FAFA0 000F7DA0*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805DF8D8 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FAFA4 000F7DA4*/ PPC::Runtime::ASM::li(context->r6, -0x1);
/*800FAFA8 000F7DA8*/ PPC::Runtime::ASM::li(context->r7, 0x4);
/*800FAFAC 000F7DAC*/ PPC::Runtime::ASM::bl(fn_killWhispy);
RUNTIME_PPC_JUMP_LABEL(.L_800FAFB0, 0x800FAFB0) //this is a jump label
/*800FAFB0 000F7DB0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FAFB4 000F7DB4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800FAFB8 000F7DB8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800FAFBC 000F7DBC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FAFC0 000F7DC0*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800FAFC4 000F7DC4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800FAFC8 000F7DC8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800FAFCC 000F7DCC*/ PPC::Runtime::ASM::blr();
}