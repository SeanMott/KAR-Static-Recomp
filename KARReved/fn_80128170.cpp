//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80112044.hpp"
#include "fn_8011582C.hpp"



void fn_80128170(PPC::Runtime::GCContext* context)
{
/*80128170 00124F70*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80128174 00124F74*/ PPC::Runtime::ASM::mflr(context->r0);
/*80128178 00124F78*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8012817C 00124F7C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80128180 00124F80*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80128184 00124F84*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80128188 00124F88*/ PPC::Runtime::ASM::bl(fn_80112044);
/*8012818C 00124F8C*/ PPC::Runtime::ASM::addi(context->r30, context->r3, 0xbec);
/*80128190 00124F90*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*80128194 00124F94*/ PPC::Runtime::ASM::li(context->r31, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_80128198, 0x80128198) //this is a jump label
/*80128198 00124F98*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*8012819C 00124F9C*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*801281A0 00124FA0*/ PPC::Runtime::ASM::beq(.L_801281AC);
/*801281A4 00124FA4*/ PPC::Runtime::ASM::bl(fn_8011582C);
/*801281A8 00124FA8*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_801281AC, 0x801281AC) //this is a jump label
/*801281AC 00124FAC*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
/*801281B0 00124FB0*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x4);
/*801281B4 00124FB4*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x4);
/*801281B8 00124FB8*/ PPC::Runtime::ASM::blt(.L_80128198);
/*801281BC 00124FBC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801281C0 00124FC0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801281C4 00124FC4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801281C8 00124FC8*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801281CC 00124FCC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801281D0 00124FD0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*801281D4 00124FD4*/ PPC::Runtime::ASM::blr();
}