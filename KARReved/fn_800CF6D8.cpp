//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800CF6D8(PPC::Runtime::GCContext* context)
{
/*800CF6D8 000CC4D8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800CF6DC 000CC4DC*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CF6E0 000CC4E0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CF6E4 000CC4E4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800CF6E8 000CC4E8*/ PPC::Runtime::ASM::lwz(context->r31, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CF6EC 000CC4EC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r31));
/*800CF6F0 000CC4F0*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF6F4 000CC4F4*/ PPC::Runtime::ASM::bne(.L_800CF70C);
/*800CF6F8 000CC4F8*/ PPC::Runtime::ASM::lis(context->r4, MemoryOffset_900 @ Get_MemoryOffset_HighBit);
/*800CF6FC 000CC4FC*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800CF700 000CC500*/ PPC::Runtime::ASM::addi(context->r5, context->r4, MemoryOffset_900 @ Get_MemoryOffset_LowBit);
/*800CF704 000CC504*/ PPC::Runtime::ASM::li(context->r4, 0x268);
/*800CF708 000CC508*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF70C, 0x800CF70C) //this is a jump label
/*800CF70C 000CC50C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CF710 000CC510*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x128, context->r31));
/*800CF714 000CC514*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800CF718 000CC518*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CF71C 000CC51C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800CF720 000CC520*/ PPC::Runtime::ASM::blr();
}