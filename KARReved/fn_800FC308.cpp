//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800D7954.hpp"
#include "fn_800E2BD0.hpp"
#include "fn_800F7870.hpp"
#include "fn_800FC3D8.hpp"



void fn_800FC308(PPC::Runtime::GCContext* context)
{
/*800FC308 000F9108*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800FC30C 000F910C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800FC310 000F9110*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FC314 000F9114*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800FC318 000F9118*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800FC31C 000F911C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FC320 000F9120*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800FC324 000F9124*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*800FC328 000F9128*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800FC32C 000F912C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r4));
/*800FC330 000F9130*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800FC334 000F9134*/ PPC::Runtime::ASM::lwz(context->r3, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FC338 000F9138*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r5));
/*800FC33C 000F913C*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x104, context->r31));
/*800FC340 000F9140*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x54);
/*800FC344 000F9144*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800FC348 000F9148*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 3);
/*800FC34C 000F914C*/ PPC::Runtime::ASM::lwzx(context->r4, context->r4, context->r0);
/*800FC350 000F9150*/ PPC::Runtime::ASM::bl(fn_800D7954);
/*800FC354 000F9154*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x130, context->r30));
/*800FC358 000F9158*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*800FC35C 000F915C*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800FC360 000F9160*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x130, context->r30));
/*800FC364 000F9164*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x90, context->r3));
/*800FC368 000F9168*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r29));
/*800FC36C 000F916C*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r30));
/*800FC370 000F9170*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r30));
/*800FC374 000F9174*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x13c, context->r30));
/*800FC378 000F9178*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r29));
/*800FC37C 000F917C*/ PPC::Runtime::ASM::cmpwi(context->r4, -0x1);
/*800FC380 000F9180*/ PPC::Runtime::ASM::beq(.L_800FC390);
/*800FC384 000F9184*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800FC388 000F9188*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*800FC38C 000F918C*/ PPC::Runtime::ASM::bl(fn_800E2BD0);
RUNTIME_PPC_JUMP_LABEL(.L_800FC390, 0x800FC390) //this is a jump label
/*800FC390 000F9190*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800FC394 000F9194*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r3));
/*800FC398 000F9198*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800FC39C 000F919C*/ PPC::Runtime::ASM::beq(.L_800FC3B0);
/*800FC3A0 000F91A0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800FC3A4 000F91A4*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*800FC3A8 000F91A8*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*800FC3AC 000F91AC*/ PPC::Runtime::ASM::bl(fn_800F7870);
RUNTIME_PPC_JUMP_LABEL(.L_800FC3B0, 0x800FC3B0) //this is a jump label
/*800FC3B0 000F91B0*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*800FC3B4 000F91B4*/ PPC::Runtime::ASM::bl(fn_800FC3D8);
/*800FC3B8 000F91B8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FC3BC 000F91BC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800FC3C0 000F91C0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800FC3C4 000F91C4*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FC3C8 000F91C8*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800FC3CC 000F91CC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800FC3D0 000F91D0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800FC3D4 000F91D4*/ PPC::Runtime::ASM::blr();
}