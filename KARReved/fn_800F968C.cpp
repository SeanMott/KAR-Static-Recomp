//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800F75B4.hpp"
#include "fn_800F7930.hpp"



void fn_800F968C(PPC::Runtime::GCContext* context)
{
/*800F968C 000F648C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800F9690 000F6490*/ PPC::Runtime::ASM::mflr(context->r0);
/*800F9694 000F6494*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800F9698 000F6498*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800F969C 000F649C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800F96A0 000F64A0*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800F96A4 000F64A4*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*800F96A8 000F64A8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800F96AC 000F64AC*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x12c, context->r31));
/*800F96B0 000F64B0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/* 800F96B4 000F64B4  54 00 CF FF */ extrwi. context->r0 , context->r0 , 1 , 24
/*800F96B8 000F64B8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800F96BC 000F64BC*/ PPC::Runtime::ASM::beq(.L_800F96D4);
/*800F96C0 000F64C0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800F96C4 000F64C4*/ PPC::Runtime::ASM::cmpwi(context->r4, -0x1);
/*800F96C8 000F64C8*/ PPC::Runtime::ASM::beq(.L_800F96D4);
/*800F96CC 000F64CC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800F96D0 000F64D0*/ PPC::Runtime::ASM::bl(fn_800F75B4);
RUNTIME_PPC_JUMP_LABEL(.L_800F96D4, 0x800F96D4) //this is a jump label
/*800F96D4 000F64D4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*800F96D8 000F64D8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r3));
/*800F96DC 000F64DC*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800F96E0 000F64E0*/ PPC::Runtime::ASM::beq(.L_800F96F0);
/*800F96E4 000F64E4*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800F96E8 000F64E8*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*800F96EC 000F64EC*/ PPC::Runtime::ASM::bl(fn_800F7930);
RUNTIME_PPC_JUMP_LABEL(.L_800F96F0, 0x800F96F0) //this is a jump label
/*800F96F0 000F64F0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800F96F4 000F64F4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800F96F8 000F64F8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800F96FC 000F64FC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800F9700 000F6500*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800F9704 000F6504*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800F9708 000F6508*/ PPC::Runtime::ASM::blr();
}