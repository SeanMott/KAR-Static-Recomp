//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E8FD0(PPC::Runtime::GCContext* context)
{
/*800E8FD0 000E5DD0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E8FD4 000E5DD4*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E8FD8 000E5DD8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E8FDC 000E5DDC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E8FE0 000E5DE0*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E8FE4 000E5DE4*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E8FE8 000E5DE8*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E8FEC 000E5DEC*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*800E8FF0 000E5DF0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x454, context->r3));
/*800E8FF4 000E5DF4*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*800E8FF8 000E5DF8*/ PPC::Runtime::ASM::beq(.L_800E9044);
/*800E8FFC 000E5DFC*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*800E9000 000E5E00*/ PPC::Runtime::ASM::li(context->r31, 0x0);
/*800E9004 000E5E04*/ PPC::Runtime::ASM::b(.L_800E9028);
RUNTIME_PPC_JUMP_LABEL(.L_800E9008, 0x800E9008) //this is a jump label
/*800E9008 000E5E08*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x458, context->r28));
/*800E900C 000E5E0C*/ PPC::Runtime::ASM::addi(context->r0, context->r31, 0x4);
/*800E9010 000E5E10*/ PPC::Runtime::ASM::lwzx(context->r3, context->r3, context->r0);
/*800E9014 000E5E14*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800E9018 000E5E18*/ PPC::Runtime::ASM::beq(.L_800E9020);
/*800E901C 000E5E1C*/ PPC::Runtime::ASM::bl(fn_HSD_Free);
RUNTIME_PPC_JUMP_LABEL(.L_800E9020, 0x800E9020) //this is a jump label
/*800E9020 000E5E20*/ PPC::Runtime::ASM::addi(context->r31, context->r31, 0x8);
/*800E9024 000E5E24*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E9028, 0x800E9028) //this is a jump label
/*800E9028 000E5E28*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E902C 000E5E2C*/ PPC::Runtime::ASM::cmpw(context->r29, context->r0);
/*800E9030 000E5E30*/ PPC::Runtime::ASM::blt(.L_800E9008);
/*800E9034 000E5E34*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x458, context->r28));
/*800E9038 000E5E38*/ PPC::Runtime::ASM::bl(fn_HSD_Free);
/*800E903C 000E5E3C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x45c, context->r28));
/*800E9040 000E5E40*/ PPC::Runtime::ASM::bl(fn_HSD_Free);
RUNTIME_PPC_JUMP_LABEL(.L_800E9044, 0x800E9044) //this is a jump label
/*800E9044 000E5E44*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E9048 000E5E48*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E904C 000E5E4C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E9050 000E5E50*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E9054 000E5E54*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E9058 000E5E58*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E905C 000E5E5C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E9060 000E5E60*/ PPC::Runtime::ASM::blr();
}