//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801D1DEC.hpp"



void fn_801D1CF0(PPC::Runtime::GCContext* context)
{
/*801D1CF0 001CEAF0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*801D1CF4 001CEAF4*/ PPC::Runtime::ASM::mflr(context->r0);
/*801D1CF8 001CEAF8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801D1CFC 001CEAFC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801D1D00 001CEB00*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801D1D04 001CEB04*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*801D1D08 001CEB08*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801D1D0C 001CEB0C*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*801D1D10 001CEB10*/ PPC::Runtime::ASM::mr(context->r31, context->r29);
/*801D1D14 001CEB14*/ PPC::Runtime::ASM::b(.L_801D1D44);
RUNTIME_PPC_JUMP_LABEL(.L_801D1D18, 0x801D1D18) //this is a jump label
/*801D1D18 001CEB18*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x685, context->r31));
/*801D1D1C 001CEB1C*/ PPC::Runtime::ASM::lbz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x684, context->r31));
/*801D1D20 001CEB20*/ PPC::Runtime::ASM::extsb(context->r0, context->r0);
/*801D1D24 001CEB24*/ PPC::Runtime::ASM::extsb(context->r5, context->r3);
/*801D1D28 001CEB28*/ PPC::Runtime::ASM::cmpw(context->r0, context->r5);
/*801D1D2C 001CEB2C*/ PPC::Runtime::ASM::beq(.L_801D1D3C);
/*801D1D30 001CEB30*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*801D1D34 001CEB34*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*801D1D38 001CEB38*/ PPC::Runtime::ASM::bl(fn_801D1DEC);
RUNTIME_PPC_JUMP_LABEL(.L_801D1D3C, 0x801D1D3C) //this is a jump label
/*801D1D3C 001CEB3C*/ PPC::Runtime::ASM::addi(context->r31, context->r31, 0x2);
/*801D1D40 001CEB40*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_801D1D44, 0x801D1D44) //this is a jump label
/*801D1D44 001CEB44*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x678, context->r29));
/*801D1D48 001CEB48*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*801D1D4C 001CEB4C*/ PPC::Runtime::ASM::cmpw(context->r30, context->r0);
/*801D1D50 001CEB50*/ PPC::Runtime::ASM::blt(.L_801D1D18);
/*801D1D54 001CEB54*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r29));
/*801D1D58 001CEB58*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*801D1D5C 001CEB5C*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r3, 2, 29, 29);
/*801D1D60 001CEB60*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r29));
/*801D1D64 001CEB64*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801D1D68 001CEB68*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801D1D6C 001CEB6C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801D1D70 001CEB70*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801D1D74 001CEB74*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801D1D78 001CEB78*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*801D1D7C 001CEB7C*/ PPC::Runtime::ASM::blr();
}