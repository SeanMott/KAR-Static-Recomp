//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "OSDisableInterrupts.hpp"
#include "fn_OSSleepThread.hpp"
#include "OSRestoreInterrupts.hpp"



void fn___CARDSync(PPC::Runtime::GCContext* context)
{
/*803E3024 003DFE24*/ PPC::Runtime::ASM::mflr(context->r0);
/*803E3028 003DFE28*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803E302C 003DFE2C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*803E3030 003DFE30*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*803E3034 003DFE34*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*803E3038 003DFE38*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803E303C 003DFE3C*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*803E3040 003DFE40*/ PPC::Runtime::ASM::addi(context->r28, context->r3, 0x0);
/*803E3044 003DFE44*/ PPC::Runtime::ASM::mulli(context->r4, context->r28, 0x110);
/*803E3048 003DFE48*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_BYTE4_COUNT_18056E4E8 @ Get_MemoryOffset_HighBit);
/*803E304C 003DFE4C*/ PPC::Runtime::ASM::addi(context->r0, context->r3, STRUCT_BYTE4_COUNT_18056E4E8 @ Get_MemoryOffset_LowBit);
/*803E3050 003DFE50*/ PPC::Runtime::ASM::add(context->r31, context->r0, context->r4);
/*803E3054 003DFE54*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*803E3058 003DFE58*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*803E305C 003DFE5C*/ PPC::Runtime::ASM::b(.L_803E3068);
RUNTIME_PPC_JUMP_LABEL(.L_803E3060, 0x803E3060) //this is a jump label
/*803E3060 003DFE60*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x8c);
/*803E3064 003DFE64*/ PPC::Runtime::ASM::bl(fn_OSSleepThread);
RUNTIME_PPC_JUMP_LABEL(.L_803E3068, 0x803E3068) //this is a jump label
/*803E3068 003DFE68*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x0);
/*803E306C 003DFE6C*/ PPC::Runtime::ASM::blt(.L_803E3078);
/*803E3070 003DFE70*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x2);
/*803E3074 003DFE74*/ PPC::Runtime::ASM::blt(.L_803E3080);
RUNTIME_PPC_JUMP_LABEL(.L_803E3078, 0x803E3078) //this is a jump label
/*803E3078 003DFE78*/ PPC::Runtime::ASM::li(context->r0, -0x80);
/*803E307C 003DFE7C*/ PPC::Runtime::ASM::b(.L_803E3084);
RUNTIME_PPC_JUMP_LABEL(.L_803E3080, 0x803E3080) //this is a jump label
/*803E3080 003DFE80*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_803E3084, 0x803E3084) //this is a jump label
/*803E3084 003DFE84*/ PPC::Runtime::ASM::mr(context->r30, context->r0);
/*803E3088 003DFE88*/ PPC::Runtime::ASM::cmpwi(context->r30, -0x1);
/*803E308C 003DFE8C*/ PPC::Runtime::ASM::beq(.L_803E3060);
/*803E3090 003DFE90*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*803E3094 003DFE94*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*803E3098 003DFE98*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*803E309C 003DFE9C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*803E30A0 003DFEA0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*803E30A4 003DFEA4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*803E30A8 003DFEA8*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803E30AC 003DFEAC*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*803E30B0 003DFEB0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*803E30B4 003DFEB4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803E30B8 003DFEB8*/ PPC::Runtime::ASM::blr();
}