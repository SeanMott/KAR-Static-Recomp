//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80112044.hpp"
#include "fn_8011582C.hpp"



void fn_8011CA98(PPC::Runtime::GCContext* context)
{
/*8011CA98 00119898*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8011CA9C 0011989C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8011CAA0 001198A0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8011CAA4 001198A4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8011CAA8 001198A8*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8011CAAC 001198AC*/ PPC::Runtime::ASM::bl(fn_80112044);
/*8011CAB0 001198B0*/ PPC::Runtime::ASM::extsb(context->r0, context->r31);
/*8011CAB4 001198B4*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*8011CAB8 001198B8*/ PPC::Runtime::ASM::add(context->r31, context->r3, context->r0);
/*8011CABC 001198BC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2e8, context->r31));
/*8011CAC0 001198C0*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*8011CAC4 001198C4*/ PPC::Runtime::ASM::beq(.L_8011CAD4);
/*8011CAC8 001198C8*/ PPC::Runtime::ASM::bl(fn_8011582C);
/*8011CACC 001198CC*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*8011CAD0 001198D0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2e8, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_8011CAD4, 0x8011CAD4) //this is a jump label
/*8011CAD4 001198D4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8011CAD8 001198D8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8011CADC 001198DC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8011CAE0 001198E0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8011CAE4 001198E4*/ PPC::Runtime::ASM::blr();
}