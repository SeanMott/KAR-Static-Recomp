//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8020B784.hpp"



void fn_8020BCD8(PPC::Runtime::GCContext* context)
{
/*8020BCD8 00208AD8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8020BCDC 00208ADC*/ PPC::Runtime::ASM::mflr(context->r0);
/*8020BCE0 00208AE0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020BCE4 00208AE4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r4));
/*8020BCE8 00208AE8*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x7);
/*8020BCEC 00208AEC*/ PPC::Runtime::ASM::bgt(.L_8020BD48);
/*8020BCF0 00208AF0*/ PPC::Runtime::ASM::lis(context->r5, jumptable_804B2B50 @ Get_MemoryOffset_HighBit);
/*8020BCF4 00208AF4*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*8020BCF8 00208AF8*/ PPC::Runtime::ASM::addi(context->r5, context->r5, jumptable_804B2B50 @ Get_MemoryOffset_LowBit);
/*8020BCFC 00208AFC*/ PPC::Runtime::ASM::lwzx(context->r0, context->r5, context->r0);
/*8020BD00 00208B00*/ PPC::Runtime::ASM::mtctr(context->r0);
/*8020BD04 00208B04*/ PPC::Runtime::ASM::bctr();
/*8020BD08 00208B08*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*8020BD0C 00208B0C*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD10 00208B10*/ PPC::Runtime::ASM::li(context->r5, 0x1);
/*8020BD14 00208B14*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD18 00208B18*/ PPC::Runtime::ASM::li(context->r5, 0x2);
/*8020BD1C 00208B1C*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD20 00208B20*/ PPC::Runtime::ASM::li(context->r5, 0x3);
/*8020BD24 00208B24*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD28 00208B28*/ PPC::Runtime::ASM::li(context->r5, 0x4);
/*8020BD2C 00208B2C*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD30 00208B30*/ PPC::Runtime::ASM::li(context->r5, 0x5);
/*8020BD34 00208B34*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD38 00208B38*/ PPC::Runtime::ASM::li(context->r5, 0x6);
/*8020BD3C 00208B3C*/ PPC::Runtime::ASM::b(.L_8020BD4C);
/*8020BD40 00208B40*/ PPC::Runtime::ASM::li(context->r5, 0x7);
/*8020BD44 00208B44*/ PPC::Runtime::ASM::b(.L_8020BD4C);
RUNTIME_PPC_JUMP_LABEL(.L_8020BD48, 0x8020BD48) //this is a jump label
/*8020BD48 00208B48*/ PPC::Runtime::ASM::li(context->r5, -0x1);
RUNTIME_PPC_JUMP_LABEL(.L_8020BD4C, 0x8020BD4C) //this is a jump label
/*8020BD4C 00208B4C*/ PPC::Runtime::ASM::cmpwi(context->r5, -0x1);
/*8020BD50 00208B50*/ PPC::Runtime::ASM::beq(.L_8020BD58);
/*8020BD54 00208B54*/ PPC::Runtime::ASM::bl(fn_8020B784);
RUNTIME_PPC_JUMP_LABEL(.L_8020BD58, 0x8020BD58) //this is a jump label
/*8020BD58 00208B58*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020BD5C 00208B5C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8020BD60 00208B60*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8020BD64 00208B64*/ PPC::Runtime::ASM::blr();
}