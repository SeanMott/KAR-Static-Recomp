//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "MWTRACE.hpp"
#include "fn_TRKDoNotifyStopped.hpp"



void TRKTargetInterrupt(PPC::Runtime::GCContext* context)
{
/*803C0928 003BD728*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*803C092C 003BD72C*/ PPC::Runtime::ASM::mflr(context->r0);
/*803C0930 003BD730*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803C0934 003BD734*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803C0938 003BD738*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*803C093C 003BD73C*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*803C0940 003BD740*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*803C0944 003BD744*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x5);
/*803C0948 003BD748*/ PPC::Runtime::ASM::bge(.L_803C0A9C);
/*803C094C 003BD74C*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x3);
/*803C0950 003BD750*/ PPC::Runtime::ASM::bge(.L_803C0958);
/*803C0954 003BD754*/ PPC::Runtime::ASM::b(.L_803C0A9C);
RUNTIME_PPC_JUMP_LABEL(.L_803C0958, 0x803C0958) //this is a jump label
/*803C0958 003BD758*/ PPC::Runtime::ASM::lis(context->r3, lbl_804F9274 @ Get_MemoryOffset_HighBit);
/*803C095C 003BD75C*/ PPC::Runtime::ASM::addi(context->r4, context->r3, lbl_804F9274 @ Get_MemoryOffset_LowBit);
/*803C0960 003BD760*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*803C0964 003BD764*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*803C0968 003BD768*/ PPC::Runtime::ASM::beq(.L_803C0A70);
/*803C096C 003BD76C*/ PPC::Runtime::ASM::lis(context->r3, gTRKCPUState @ Get_MemoryOffset_HighBit);
/*803C0970 003BD770*/ PPC::Runtime::ASM::li(context->r5, 0x1);
/*803C0974 003BD774*/ PPC::Runtime::ASM::addi(context->r31, context->r3, gTRKCPUState @ Get_MemoryOffset_LowBit);
/*803C0978 003BD778*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1f8, context->r31));
/*803C097C 003BD77C*/ PPC::Runtime::ASM::rlwinm(context->r0, context->r0, 0, 22, 20);
/*803C0980 003BD780*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1f8, context->r31));
/*803C0984 003BD784*/ PPC::Runtime::ASM::beq(.L_803C09E8);
/*803C0988 003BD788*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2f8, context->r31));
/*803C098C 003BD78C*/ PPC::Runtime::ASM::clrlwi(context->r0, context->r0, 16);
/*803C0990 003BD790*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd00);
/*803C0994 003BD794*/ PPC::Runtime::ASM::bne(.L_803C09E8);
/*803C0998 003BD798*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*803C099C 003BD79C*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x1);
/*803C09A0 003BD7A0*/ PPC::Runtime::ASM::beq(.L_803C09C8);
/*803C09A4 003BD7A4*/ PPC::Runtime::ASM::bge(.L_803C09E8);
/*803C09A8 003BD7A8*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*803C09AC 003BD7AC*/ PPC::Runtime::ASM::bge(.L_803C09B4);
/*803C09B0 003BD7B0*/ PPC::Runtime::ASM::b(.L_803C09E8);
RUNTIME_PPC_JUMP_LABEL(.L_803C09B4, 0x803C09B4) //this is a jump label
/*803C09B4 003BD7B4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*803C09B8 003BD7B8*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*803C09BC 003BD7BC*/ PPC::Runtime::ASM::beq(.L_803C09E8);
/*803C09C0 003BD7C0*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*803C09C4 003BD7C4*/ PPC::Runtime::ASM::b(.L_803C09E8);
RUNTIME_PPC_JUMP_LABEL(.L_803C09C8, 0x803C09C8) //this is a jump label
/*803C09C8 003BD7C8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x80, context->r31));
/*803C09CC 003BD7CC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r4));
/*803C09D0 003BD7D0*/ PPC::Runtime::ASM::cmplw(context->r3, context->r0);
/*803C09D4 003BD7D4*/ PPC::Runtime::ASM::blt(.L_803C09E8);
/*803C09D8 003BD7D8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r4));
/*803C09DC 003BD7DC*/ PPC::Runtime::ASM::cmplw(context->r3, context->r0);
/*803C09E0 003BD7E0*/ PPC::Runtime::ASM::bgt(.L_803C09E8);
/*803C09E4 003BD7E4*/ PPC::Runtime::ASM::li(context->r5, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_803C09E8, 0x803C09E8) //this is a jump label
/*803C09E8 003BD7E8*/ PPC::Runtime::ASM::cmpwi(context->r5, 0x0);
/*803C09EC 003BD7EC*/ PPC::Runtime::ASM::beq(.L_803C0A00);
/*803C09F0 003BD7F0*/ PPC::Runtime::ASM::lis(context->r3, lbl_804F9274 @ Get_MemoryOffset_HighBit);
/*803C09F4 003BD7F4*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*803C09F8 003BD7F8*/ PPC::Runtime::ASM::stw(context->r0, lbl_804F9274 @ Get_MemoryOffset_LowBit ( context->r3 ));
/*803C09FC 003BD7FC*/ PPC::Runtime::ASM::b(.L_803C0A70);
RUNTIME_PPC_JUMP_LABEL(.L_803C0A00, 0x803C0A00) //this is a jump label
/*803C0A00 003BD800*/ PPC::Runtime::ASM::lis(context->r4, lbl_804F9274 @ Get_MemoryOffset_HighBit);
/*803C0A04 003BD804*/ PPC::Runtime::ASM::li(context->r0, 0x1);
/*803C0A08 003BD808*/ PPC::Runtime::ASM::addi(context->r5, context->r4, lbl_804F9274 @ Get_MemoryOffset_LowBit);
/*803C0A0C 003BD80C*/ PPC::Runtime::ASM::lis(context->r3, String_ "TargetDoStep_FuncCal" Get_MemoryOffset_HighBit);
/*803C0A10 003BD810*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r5));
/*803C0A14 003BD814*/ PPC::Runtime::ASM::addi(context->r4, context->r3, String_ "TargetDoStep_FuncCal" Get_MemoryOffset_LowBit);
/*803C0A18 003BD818*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*803C0A1C 003BD81C*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*803C0A20 003BD820*/ PPC::Runtime::ASM::bl(MWTRACE);
/*803C0A24 003BD824*/ PPC::Runtime::ASM::lis(context->r3, lbl_804F9274 @ Get_MemoryOffset_HighBit);
/*803C0A28 003BD828*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1f8, context->r31));
/*803C0A2C 003BD82C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_804F9274 @ Get_MemoryOffset_LowBit);
/*803C0A30 003BD830*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*803C0A34 003BD834*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x400);
/*803C0A38 003BD838*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1f8, context->r31));
/*803C0A3C 003BD83C*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*803C0A40 003BD840*/ PPC::Runtime::ASM::beq(.L_803C0A4C);
/*803C0A44 003BD844*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x10);
/*803C0A48 003BD848*/ PPC::Runtime::ASM::bne(.L_803C0A60);
RUNTIME_PPC_JUMP_LABEL(.L_803C0A4C, 0x803C0A4C) //this is a jump label
/*803C0A4C 003BD84C*/ PPC::Runtime::ASM::lis(context->r3, lbl_804F9274 @ Get_MemoryOffset_HighBit);
/*803C0A50 003BD850*/ PPC::Runtime::ASM::addi(context->r4, context->r3, lbl_804F9274 @ Get_MemoryOffset_LowBit);
/*803C0A54 003BD854*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*803C0A58 003BD858*/ PPC::Runtime::ASM::subi(context->r0, context->r3, 0x1);
/*803C0A5C 003BD85C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
RUNTIME_PPC_JUMP_LABEL(.L_803C0A60, 0x803C0A60) //this is a jump label
/*803C0A60 003BD860*/ PPC::Runtime::ASM::lis(context->r3, gTRKState @ Get_MemoryOffset_HighBit);
/*803C0A64 003BD864*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*803C0A68 003BD868*/ PPC::Runtime::ASM::addi(context->r3, context->r3, gTRKState @ Get_MemoryOffset_LowBit);
/*803C0A6C 003BD86C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x98, context->r3));
RUNTIME_PPC_JUMP_LABEL(.L_803C0A70, 0x803C0A70) //this is a jump label
/*803C0A70 003BD870*/ PPC::Runtime::ASM::lis(context->r3, lbl_804F9274 @ Get_MemoryOffset_HighBit);
/*803C0A74 003BD874*/ PPC::Runtime::ASM::lwz(context->r0, lbl_804F9274 @ Get_MemoryOffset_LowBit ( context->r3 ));
/*803C0A78 003BD878*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*803C0A7C 003BD87C*/ PPC::Runtime::ASM::bne(.L_803C0A9C);
/*803C0A80 003BD880*/ PPC::Runtime::ASM::lis(context->r3, gTRKState @ Get_MemoryOffset_HighBit);
/*803C0A84 003BD884*/ PPC::Runtime::ASM::li(context->r0, 0x1);
/*803C0A88 003BD888*/ PPC::Runtime::ASM::addi(context->r4, context->r3, gTRKState @ Get_MemoryOffset_LowBit);
/*803C0A8C 003BD88C*/ PPC::Runtime::ASM::li(context->r3, 0x90);
/*803C0A90 003BD890*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x98, context->r4));
/*803C0A94 003BD894*/ PPC::Runtime::ASM::bl(fn_TRKDoNotifyStopped);
/*803C0A98 003BD898*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
RUNTIME_PPC_JUMP_LABEL(.L_803C0A9C, 0x803C0A9C) //this is a jump label
/*803C0A9C 003BD89C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803C0AA0 003BD8A0*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*803C0AA4 003BD8A4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803C0AA8 003BD8A8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*803C0AAC 003BD8AC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803C0AB0 003BD8B0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*803C0AB4 003BD8B4*/ PPC::Runtime::ASM::blr();
}