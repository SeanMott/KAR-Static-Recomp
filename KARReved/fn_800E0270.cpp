//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E0270(PPC::Runtime::GCContext* context)
{
/*800E0270 000DD070*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E0274 000DD074*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E0278 000DD078*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E027C 000DD07C*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x20);
/*800E0280 000DD080*/ PPC::Runtime::ASM::bl(_savegpr_27);
/*800E0284 000DD084*/ PPC::Runtime::ASM::mr(context->r27, context->r3);
/*800E0288 000DD088*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_941 @ Get_MemoryOffset_HighBit);
/*800E028C 000DD08C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x110, context->r27));
/*800E0290 000DD090*/ PPC::Runtime::ASM::mr(context->r28, context->r4);
/*800E0294 000DD094*/ PPC::Runtime::ASM::mr(context->r29, context->r5);
/*800E0298 000DD098*/ PPC::Runtime::ASM::addi(context->r31, context->r3, MemoryOffset_941 @ Get_MemoryOffset_LowBit);
/*800E029C 000DD09C*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*800E02A0 000DD0A0*/ PPC::Runtime::ASM::bne(.L_800E02B4);
/*800E02A4 000DD0A4*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x4c);
/*800E02A8 000DD0A8*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x218);
/*800E02AC 000DD0AC*/ PPC::Runtime::ASM::li(context->r4, 0x12);
/*800E02B0 000DD0B0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E02B4, 0x800E02B4) //this is a jump label
/*800E02B4 000DD0B4*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x0);
/*800E02B8 000DD0B8*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*800E02BC 000DD0BC*/ PPC::Runtime::ASM::blt(.L_800E02D4);
/*800E02C0 000DD0C0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E02C4 000DD0C4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*800E02C8 000DD0C8*/ PPC::Runtime::ASM::cmpw(context->r28, context->r0);
/*800E02CC 000DD0CC*/ PPC::Runtime::ASM::bge(.L_800E02D4);
/*800E02D0 000DD0D0*/ PPC::Runtime::ASM::li(context->r4, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E02D4, 0x800E02D4) //this is a jump label
/*800E02D4 000DD0D4*/ PPC::Runtime::ASM::cmpwi(context->r4, 0x0);
/*800E02D8 000DD0D8*/ PPC::Runtime::ASM::bne(.L_800E02EC);
/*800E02DC 000DD0DC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x4c);
/*800E02E0 000DD0E0*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x240);
/*800E02E4 000DD0E4*/ PPC::Runtime::ASM::li(context->r4, 0x13);
/*800E02E8 000DD0E8*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E02EC, 0x800E02EC) //this is a jump label
/*800E02EC 000DD0EC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x114, context->r27));
/*800E02F0 000DD0F0*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x20);
/*800E02F4 000DD0F4*/ PPC::Runtime::ASM::lbzx(context->r0, context->r3, context->r28);
/*800E02F8 000DD0F8*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r29, 7, 24, 24);
/*800E02FC 000DD0FC*/ PPC::Runtime::ASM::stbx(context->r0, context->r3, context->r28);
/*800E0300 000DD100*/ PPC::Runtime::ASM::bl(_restgpr_27);
/*800E0304 000DD104*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E0308 000DD108*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E030C 000DD10C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E0310 000DD110*/ PPC::Runtime::ASM::blr();
}