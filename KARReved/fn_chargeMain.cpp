//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801A0300.hpp"
#include "fn_checkIfGettingOffBike.hpp"
#include "fn_801B4D60.hpp"
#include "fn_801ABC2C.hpp"



void fn_chargeMain(PPC::Runtime::GCContext* context)
{
/*801ABAD0 001A88D0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801ABAD4 001A88D4*/ PPC::Runtime::ASM::mflr(context->r0);
/*801ABAD8 001A88D8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801ABADC 001A88DC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801ABAE0 001A88E0*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801ABAE4 001A88E4*/ PPC::Runtime::ASM::bl(fn_801A0300);
/*801ABAE8 001A88E8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801ABAEC 001A88EC*/ PPC::Runtime::ASM::bl(fn_checkIfGettingOffBike);
/*801ABAF0 001A88F0*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801ABAF4 001A88F4*/ PPC::Runtime::ASM::bne(.L_801ABB14);
/*801ABAF8 001A88F8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801ABAFC 001A88FC*/ PPC::Runtime::ASM::bl(fn_801B4D60);
/*801ABB00 001A8900*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801ABB04 001A8904*/ PPC::Runtime::ASM::bne(.L_801ABB14);
/*801ABB08 001A8908*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801ABB0C 001A890C*/ PPC::Runtime::ASM::bl(fn_801ABC2C);
/*801ABB10 001A8910*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_801ABB14, 0x801ABB14) //this is a jump label
/*801ABB14 001A8914*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801ABB18 001A8918*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801ABB1C 001A891C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801ABB20 001A8920*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801ABB24 001A8924*/ PPC::Runtime::ASM::blr();
}