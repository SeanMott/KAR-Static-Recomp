//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn___StringWrite.hpp"
#include "fn___StringWrite.hpp"
#include "__pformatter.hpp"



void fn_803B4BA0(PPC::Runtime::GCContext* context)
{
/*803B4BA0 003B19A0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0xa0, context->r1));
/*803B4BA4 003B19A4*/ PPC::Runtime::ASM::mflr(context->r0);
/*803B4BA8 003B19A8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa4, context->r1));
/*803B4BAC 003B19AC*/ PPC::Runtime::ASM::stmw(context->r26, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x88, context->r1));
/*803B4BB0 003B19B0*/ PPC::Runtime::ASM::mr(context->r26, context->r3);
/*803B4BB4 003B19B4*/ PPC::Runtime::ASM::mr(context->r27, context->r4);
/*803B4BB8 003B19B8*/ PPC::Runtime::ASM::bne(cr1, .L_803B4BDC);
/*803B4BBC 003B19BC*/ PPC::Runtime::ASM::stfd(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1));
/*803B4BC0 003B19C0*/ PPC::Runtime::ASM::stfd(context->f2, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r1));
/*803B4BC4 003B19C4*/ PPC::Runtime::ASM::stfd(context->f3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r1));
/*803B4BC8 003B19C8*/ PPC::Runtime::ASM::stfd(context->f4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x40, context->r1));
/*803B4BCC 003B19CC*/ PPC::Runtime::ASM::stfd(context->f5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x48, context->r1));
/*803B4BD0 003B19D0*/ PPC::Runtime::ASM::stfd(context->f6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x50, context->r1));
/*803B4BD4 003B19D4*/ PPC::Runtime::ASM::stfd(context->f7, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x58, context->r1));
/*803B4BD8 003B19D8*/ PPC::Runtime::ASM::stfd(context->f8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x60, context->r1));
RUNTIME_PPC_JUMP_LABEL(.L_803B4BDC, 0x803B4BDC) //this is a jump label
/*803B4BDC 003B19DC*/ PPC::Runtime::ASM::addi(context->r30, context->r1, 0xa8);
/*803B4BE0 003B19E0*/ PPC::Runtime::ASM::addi(context->r31, context->r1, 0x8);
/*803B4BE4 003B19E4*/ PPC::Runtime::ASM::lis(context->r29, 0x300);
/*803B4BE8 003B19E8*/ PPC::Runtime::ASM::li(context->r12, 0x0);
/*803B4BEC 003B19EC*/ PPC::Runtime::ASM::lis(context->r11, fn___StringWrite @ Get_MemoryOffset_HighBit);
/*803B4BF0 003B19F0*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803B4BF4 003B19F4*/ PPC::Runtime::ASM::addi(context->r28, context->r1, 0x74);
/*803B4BF8 003B19F8*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x68);
/*803B4BFC 003B19FC*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803B4C00 003B1A00*/ PPC::Runtime::ASM::addi(context->r0, context->r11, fn___StringWrite @ Get_MemoryOffset_LowBit);
/*803B4C04 003B1A04*/ PPC::Runtime::ASM::mr(context->r6, context->r28);
/*803B4C08 003B1A08*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*803B4C0C 003B1A0C*/ PPC::Runtime::ASM::mr(context->r3, context->r0);
/*803B4C10 003B1A10*/ PPC::Runtime::ASM::stw(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*803B4C14 003B1A14*/ PPC::Runtime::ASM::stw(context->r7, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*803B4C18 003B1A18*/ PPC::Runtime::ASM::stw(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*803B4C1C 003B1A1C*/ PPC::Runtime::ASM::stw(context->r9, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*803B4C20 003B1A20*/ PPC::Runtime::ASM::stw(context->r10, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*803B4C24 003B1A24*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x74, context->r1));
/*803B4C28 003B1A28*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x78, context->r1));
/*803B4C2C 003B1A2C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7c, context->r1));
/*803B4C30 003B1A30*/ PPC::Runtime::ASM::stw(context->r26, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x68, context->r1));
/*803B4C34 003B1A34*/ PPC::Runtime::ASM::stw(context->r27, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c, context->r1));
/*803B4C38 003B1A38*/ PPC::Runtime::ASM::stw(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x70, context->r1));
/*803B4C3C 003B1A3C*/ PPC::Runtime::ASM::bl(__pformatter);
/*803B4C40 003B1A40*/ PPC::Runtime::ASM::cmplwi(context->r26, 0x0);
/*803B4C44 003B1A44*/ PPC::Runtime::ASM::beq(.L_803B4C60);
/*803B4C48 003B1A48*/ PPC::Runtime::ASM::cmplw(context->r3, context->r27);
/*803B4C4C 003B1A4C*/ PPC::Runtime::ASM::subi(context->r4, context->r27, 0x1);
/*803B4C50 003B1A50*/ PPC::Runtime::ASM::bge(.L_803B4C58);
/*803B4C54 003B1A54*/ PPC::Runtime::ASM::mr(context->r4, context->r3);
RUNTIME_PPC_JUMP_LABEL(.L_803B4C58, 0x803B4C58) //this is a jump label
/*803B4C58 003B1A58*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*803B4C5C 003B1A5C*/ PPC::Runtime::ASM::stbx(context->r0, context->r26, context->r4);
RUNTIME_PPC_JUMP_LABEL(.L_803B4C60, 0x803B4C60) //this is a jump label
/*803B4C60 003B1A60*/ PPC::Runtime::ASM::lmw(context->r26, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x88, context->r1));
/*803B4C64 003B1A64*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa4, context->r1));
/*803B4C68 003B1A68*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803B4C6C 003B1A6C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0xa0);
/*803B4C70 003B1A70*/ PPC::Runtime::ASM::blr();
}