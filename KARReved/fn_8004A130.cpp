//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_gmGetClearcheckerTypeP.hpp"



void fn_8004A130(PPC::Runtime::GCContext* context)
{
/*8004A130 00046F30*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8004A134 00046F34*/ PPC::Runtime::ASM::mflr(context->r0);
/*8004A138 00046F38*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8004A13C 00046F3C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8004A140 00046F40*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8004A144 00046F44*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*8004A148 00046F48*/ PPC::Runtime::ASM::bl(fn_gmGetClearcheckerTypeP);
/*8004A14C 00046F4C*/ PPC::Runtime::ASM::clrlwi(context->r4, context->r30, 24);
/*8004A150 00046F50*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8004A154 00046F54*/ PPC::Runtime::ASM::cmplwi(context->r4, 0x78);
/*8004A158 00046F58*/ PPC::Runtime::ASM::blt(.L_8004A180);
/*8004A15C 00046F5C*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_173 @ Get_MemoryOffset_HighBit);
/*8004A160 00046F60*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_173 @ Get_MemoryOffset_LowBit);
/*8004A164 00046F64*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*8004A168 00046F68*/ PPC::Runtime::ASM::bl(OSReport);
/*8004A16C 00046F6C*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_172 @ Get_MemoryOffset_HighBit);
/*8004A170 00046F70*/ PPC::Runtime::ASM::li(context->r4, 0xc6);
/*8004A174 00046F74*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_172 @ Get_MemoryOffset_LowBit);
/*8004A178 00046F78*/ PPC::Runtime::ASM::li(context->r5, lbl_805D51D4 @ Get_MemoryOffset_SDA21);
/*8004A17C 00046F7C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_8004A180, 0x8004A180) //this is a jump label
/*8004A180 00046F80*/ PPC::Runtime::ASM::clrlwi(context->r0, context->r30, 24);
/*8004A184 00046F84*/ PPC::Runtime::ASM::add(context->r3, context->r31, context->r0);
/*8004A188 00046F88*/ PPC::Runtime::ASM::lbz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7c, context->r3));
/*8004A18C 00046F8C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8004A190 00046F90*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8004A194 00046F94*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8004A198 00046F98*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8004A19C 00046F9C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8004A1A0 00046FA0*/ PPC::Runtime::ASM::blr();
}