//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800E1F48.hpp"



void fn_800CF724(PPC::Runtime::GCContext* context)
{
/*800CF724 000CC524*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x30, context->r1));
/*800CF728 000CC528*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CF72C 000CC52C*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_898 @ Get_MemoryOffset_HighBit);
/*800CF730 000CC530*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800CF734 000CC534*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*800CF738 000CC538*/ PPC::Runtime::ASM::addi(context->r31, context->r5, MemoryOffset_898 @ Get_MemoryOffset_LowBit);
/*800CF73C 000CC53C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1));
/*800CF740 000CC540*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800CF744 000CC544*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CF748 000CC548*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*800CF74C 000CC54C*/ PPC::Runtime::ASM::mr(context->r28, context->r4);
/*800CF750 000CC550*/ PPC::Runtime::ASM::lwz(context->r29, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CF754 000CC554*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r29));
/*800CF758 000CC558*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF75C 000CC55C*/ PPC::Runtime::ASM::bne(.L_800CF770);
/*800CF760 000CC560*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x9c);
/*800CF764 000CC564*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800CF768 000CC568*/ PPC::Runtime::ASM::li(context->r4, 0x279);
/*800CF76C 000CC56C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF770, 0x800CF770) //this is a jump label
/*800CF770 000CC570*/ PPC::Runtime::ASM::cmpw(context->r30, context->r28);
/*800CF774 000CC574*/ PPC::Runtime::ASM::bne(.L_800CF780);
/*800CF778 000CC578*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF5DC @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CF77C 000CC57C*/ PPC::Runtime::ASM::b(.L_800CF854);
RUNTIME_PPC_JUMP_LABEL(.L_800CF780, 0x800CF780) //this is a jump label
/*800CF780 000CC580*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r29));
/*800CF784 000CC584*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF788 000CC588*/ PPC::Runtime::ASM::bne(.L_800CF79C);
/*800CF78C 000CC58C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF790 000CC590*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xe0);
/*800CF794 000CC594*/ PPC::Runtime::ASM::li(context->r4, 0xef);
/*800CF798 000CC598*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF79C, 0x800CF79C) //this is a jump label
/*800CF79C 000CC59C*/ PPC::Runtime::ASM::cmpwi(context->r30, 0x0);
/*800CF7A0 000CC5A0*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800CF7A4 000CC5A4*/ PPC::Runtime::ASM::blt(.L_800CF7B8);
/*800CF7A8 000CC5A8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x128, context->r29));
/*800CF7AC 000CC5AC*/ PPC::Runtime::ASM::cmpw(context->r30, context->r0);
/*800CF7B0 000CC5B0*/ PPC::Runtime::ASM::bge(.L_800CF7B8);
/*800CF7B4 000CC5B4*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800CF7B8, 0x800CF7B8) //this is a jump label
/*800CF7B8 000CC5B8*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800CF7BC 000CC5BC*/ PPC::Runtime::ASM::bne(.L_800CF7D0);
/*800CF7C0 000CC5C0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF7C4 000CC5C4*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xec);
/*800CF7C8 000CC5C8*/ PPC::Runtime::ASM::li(context->r4, 0xf0);
/*800CF7CC 000CC5CC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF7D0, 0x800CF7D0) //this is a jump label
/*800CF7D0 000CC5D0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r29));
/*800CF7D4 000CC5D4*/ PPC::Runtime::ASM::mulli(context->r3, context->r30, 0x2c);
/*800CF7D8 000CC5D8*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x124, context->r29));
/*800CF7DC 000CC5DC*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF7E0 000CC5E0*/ PPC::Runtime::ASM::add(context->r30, context->r4, context->r3);
/*800CF7E4 000CC5E4*/ PPC::Runtime::ASM::bne(.L_800CF7F8);
/*800CF7E8 000CC5E8*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF7EC 000CC5EC*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xe0);
/*800CF7F0 000CC5F0*/ PPC::Runtime::ASM::li(context->r4, 0xef);
/*800CF7F4 000CC5F4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF7F8, 0x800CF7F8) //this is a jump label
/*800CF7F8 000CC5F8*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x0);
/*800CF7FC 000CC5FC*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800CF800 000CC600*/ PPC::Runtime::ASM::blt(.L_800CF814);
/*800CF804 000CC604*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x128, context->r29));
/*800CF808 000CC608*/ PPC::Runtime::ASM::cmpw(context->r28, context->r0);
/*800CF80C 000CC60C*/ PPC::Runtime::ASM::bge(.L_800CF814);
/*800CF810 000CC610*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800CF814, 0x800CF814) //this is a jump label
/*800CF814 000CC614*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800CF818 000CC618*/ PPC::Runtime::ASM::bne(.L_800CF82C);
/*800CF81C 000CC61C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x68);
/*800CF820 000CC620*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xec);
/*800CF824 000CC624*/ PPC::Runtime::ASM::li(context->r4, 0xf0);
/*800CF828 000CC628*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF82C, 0x800CF82C) //this is a jump label
/*800CF82C 000CC62C*/ PPC::Runtime::ASM::mulli(context->r0, context->r28, 0x2c);
/*800CF830 000CC630*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x124, context->r29));
/*800CF834 000CC634*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*800CF838 000CC638*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800CF83C 000CC63C*/ PPC::Runtime::ASM::add(context->r5, context->r5, context->r0);
/*800CF840 000CC640*/ PPC::Runtime::ASM::addi(context->r6, context->r1, 0x10);
/*800CF844 000CC644*/ PPC::Runtime::ASM::addi(context->r7, context->r1, 0xc);
/*800CF848 000CC648*/ PPC::Runtime::ASM::addi(context->r8, context->r1, 0x8);
/*800CF84C 000CC64C*/ PPC::Runtime::ASM::bl(fn_800E1F48);
/*800CF850 000CC650*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
RUNTIME_PPC_JUMP_LABEL(.L_800CF854, 0x800CF854) //this is a jump label
/*800CF854 000CC654*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800CF858 000CC658*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*800CF85C 000CC65C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1));
/*800CF860 000CC660*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CF864 000CC664*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*800CF868 000CC668*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CF86C 000CC66C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x30);
/*800CF870 000CC670*/ PPC::Runtime::ASM::blr();
}