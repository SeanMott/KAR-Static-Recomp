//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800A98EC.hpp"
#include "fn_800D9E34.hpp"
#include "fn_800A98F0.hpp"



void fn_800D1CA8(PPC::Runtime::GCContext* context)
{
/*800D1CA8 000CEAA8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800D1CAC 000CEAAC*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D1CB0 000CEAB0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800D1CB4 000CEAB4*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800D1CB8 000CEAB8*/ PPC::Runtime::ASM::fmr(context->f31, context->f1);
/*800D1CBC 000CEABC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D1CC0 000CEAC0*/ PPC::Runtime::ASM::mr(context->r31, context->r6);
/*800D1CC4 000CEAC4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800D1CC8 000CEAC8*/ PPC::Runtime::ASM::mr(context->r30, context->r5);
/*800D1CCC 000CEACC*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D1CD0 000CEAD0*/ PPC::Runtime::ASM::mr(context->r29, context->r4);
/*800D1CD4 000CEAD4*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D1CD8 000CEAD8*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*800D1CDC 000CEADC*/ PPC::Runtime::ASM::bl(fn_800A98EC);
/*800D1CE0 000CEAE0*/ PPC::Runtime::ASM::lwz(context->r3, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800D1CE4 000CEAE4*/ PPC::Runtime::ASM::fmr(context->f1, context->f31);
/*800D1CE8 000CEAE8*/ PPC::Runtime::ASM::fmr(context->f2, context->f31);
/*800D1CEC 000CEAEC*/ PPC::Runtime::ASM::mr(context->r4, context->r28);
/*800D1CF0 000CEAF0*/ PPC::Runtime::ASM::mr(context->r5, context->r29);
/*800D1CF4 000CEAF4*/ PPC::Runtime::ASM::mr(context->r8, context->r30);
/*800D1CF8 000CEAF8*/ PPC::Runtime::ASM::mr(context->r9, context->r31);
/*800D1CFC 000CEAFC*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x54);
/*800D1D00 000CEB00*/ PPC::Runtime::ASM::li(context->r6, 0x1);
/*800D1D04 000CEB04*/ PPC::Runtime::ASM::li(context->r7, 0x1);
/*800D1D08 000CEB08*/ PPC::Runtime::ASM::bl(fn_800D9E34);
/*800D1D0C 000CEB0C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*800D1D10 000CEB10*/ PPC::Runtime::ASM::bl(fn_800A98F0);
/*800D1D14 000CEB14*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800D1D18 000CEB18*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800D1D1C 000CEB1C*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800D1D20 000CEB20*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D1D24 000CEB24*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800D1D28 000CEB28*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D1D2C 000CEB2C*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D1D30 000CEB30*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D1D34 000CEB34*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800D1D38 000CEB38*/ PPC::Runtime::ASM::blr();
}