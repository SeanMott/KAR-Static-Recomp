//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800547E0.hpp"
#include "fn_8018CB28.hpp"
#include "fn_killWhispy.hpp"
#include "fn_800F579C.hpp"
#include "fn_800F5C68.hpp"
#include "fn_801023E8.hpp"
#include "fn_8010203C.hpp"
#include "fn_8010203C.hpp"



void fn_80101CA4(PPC::Runtime::GCContext* context)
{
/*80101CA4 000FEAA4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80101CA8 000FEAA8*/ PPC::Runtime::ASM::mflr(context->r0);
/*80101CAC 000FEAAC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80101CB0 000FEAB0*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80101CB4 000FEAB4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80101CB8 000FEAB8*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80101CBC 000FEABC*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*80101CC0 000FEAC0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*80101CC4 000FEAC4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*80101CC8 000FEAC8*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x64, context->r4));
/*80101CCC 000FEACC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*80101CD0 000FEAD0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*80101CD4 000FEAD4*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 3);
/*80101CD8 000FEAD8*/ PPC::Runtime::ASM::lwzx(context->r3, context->r4, context->r0);
/*80101CDC 000FEADC*/ PPC::Runtime::ASM::bl(fn_800547E0);
/*80101CE0 000FEAE0*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*80101CE4 000FEAE4*/ PPC::Runtime::ASM::bne(.L_80101D60);
/*80101CE8 000FEAE8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r29));
/*80101CEC 000FEAEC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*80101CF0 000FEAF0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xec, context->r30));
/*80101CF4 000FEAF4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*80101CF8 000FEAF8*/ PPC::Runtime::ASM::bl(fn_8018CB28);
/*80101CFC 000FEAFC*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF95C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80101D00 000FEB00*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*80101D04 000FEB04*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r31));
/*80101D08 000FEB08*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*80101D0C 000FEB0C*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*80101D10 000FEB10*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805DF960 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80101D14 000FEB14*/ PPC::Runtime::ASM::li(context->r6, -0x1);
/*80101D18 000FEB18*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*80101D1C 000FEB1C*/ PPC::Runtime::ASM::bl(fn_killWhispy);
/*80101D20 000FEB20*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r31));
/*80101D24 000FEB24*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*80101D28 000FEB28*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*80101D2C 000FEB2C*/ PPC::Runtime::ASM::li(context->r6, 0x1);
/*80101D30 000FEB30*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF960 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80101D34 000FEB34*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*80101D38 000FEB38*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805DF95C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80101D3C 000FEB3C*/ PPC::Runtime::ASM::bl(fn_800F579C);
/*80101D40 000FEB40*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*80101D44 000FEB44*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*80101D48 000FEB48*/ PPC::Runtime::ASM::bl(fn_800F5C68);
/*80101D4C 000FEB4C*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*80101D50 000FEB50*/ PPC::Runtime::ASM::bl(fn_801023E8);
/*80101D54 000FEB54*/ PPC::Runtime::ASM::lis(context->r3, fn_8010203C @ Get_MemoryOffset_HighBit);
/*80101D58 000FEB58*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_8010203C @ Get_MemoryOffset_LowBit);
/*80101D5C 000FEB5C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x100, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_80101D60, 0x80101D60) //this is a jump label
/*80101D60 000FEB60*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80101D64 000FEB64*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80101D68 000FEB68*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80101D6C 000FEB6C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80101D70 000FEB70*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80101D74 000FEB74*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80101D78 000FEB78*/ PPC::Runtime::ASM::blr();
}