//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn___assert.hpp"
#include "fn___assert.hpp"



void fn_80438314(PPC::Runtime::GCContext* context)
{
/*80438314 00435114*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80438318 00435118*/ PPC::Runtime::ASM::mflr(context->r0);
/*8043831C 0043511C*/ PPC::Runtime::ASM::lis(context->r5, lbl_80505390 @ Get_MemoryOffset_HighBit);
/*80438320 00435120*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80438324 00435124*/ PPC::Runtime::ASM::addi(context->r5, context->r5, lbl_80505390 @ Get_MemoryOffset_LowBit);
/*80438328 00435128*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8043832C 0043512C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*80438330 00435130*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/* 80438334 00435134  7C 9E 23 79 */ mr. context->r30 , context->r4
/*80438338 00435138*/ PPC::Runtime::ASM::li(context->r4, 0x1);
/*8043833C 0043513C*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1d, context->r3));
/*80438340 00435140*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_BYTE4_COUNT_18058CD68 @ Get_MemoryOffset_HighBit);
/*80438344 00435144*/ PPC::Runtime::ASM::addi(context->r3, context->r3, STRUCT_BYTE4_COUNT_18058CD68 @ Get_MemoryOffset_LowBit);
/*80438348 00435148*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*8043834C 0043514C*/ PPC::Runtime::ASM::stwx(context->r4, context->r3, context->r0);
/*80438350 00435150*/ PPC::Runtime::ASM::bne(.L_8043839C);
/*80438354 00435154*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1d, context->r31));
/*80438358 00435158*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_BYTE4_COUNT_18058CCE8 @ Get_MemoryOffset_HighBit);
/*8043835C 0043515C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, STRUCT_BYTE4_COUNT_18058CCE8 @ Get_MemoryOffset_LowBit);
/*80438360 00435160*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*80438364 00435164*/ PPC::Runtime::ASM::lwzx(context->r0, context->r3, context->r0);
/*80438368 00435168*/ PPC::Runtime::ASM::cmplw(context->r0, context->r31);
/*8043836C 0043516C*/ PPC::Runtime::ASM::beq(.L_80438380);
/*80438370 00435170*/ PPC::Runtime::ASM::addi(context->r3, context->r5, 0x0);
/*80438374 00435174*/ PPC::Runtime::ASM::addi(context->r5, context->r5, 0xc);
/*80438378 00435178*/ PPC::Runtime::ASM::li(context->r4, 0x88);
/*8043837C 0043517C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_80438380, 0x80438380) //this is a jump label
/*80438380 00435180*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1d, context->r31));
/*80438384 00435184*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_BYTE4_COUNT_18058CCE8 @ Get_MemoryOffset_HighBit);
/*80438388 00435188*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*8043838C 0043518C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, STRUCT_BYTE4_COUNT_18058CCE8 @ Get_MemoryOffset_LowBit);
/*80438390 00435190*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*80438394 00435194*/ PPC::Runtime::ASM::stwx(context->r4, context->r3, context->r0);
/*80438398 00435198*/ PPC::Runtime::ASM::b(.L_804383C0);
RUNTIME_PPC_JUMP_LABEL(.L_8043839C, 0x8043839C) //this is a jump label
/*8043839C 0043519C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*804383A0 004351A0*/ PPC::Runtime::ASM::cmplw(context->r0, context->r31);
/*804383A4 004351A4*/ PPC::Runtime::ASM::beq(.L_804383B8);
/*804383A8 004351A8*/ PPC::Runtime::ASM::addi(context->r3, context->r5, 0x0);
/*804383AC 004351AC*/ PPC::Runtime::ASM::addi(context->r5, context->r5, 0x30);
/*804383B0 004351B0*/ PPC::Runtime::ASM::li(context->r4, 0x8b);
/*804383B4 004351B4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_804383B8, 0x804383B8) //this is a jump label
/*804383B8 004351B8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*804383BC 004351BC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_804383C0, 0x804383C0) //this is a jump label
/*804383C0 004351C0*/ PPC::Runtime::ASM::lwz(context->r0, STRUCT_BYTE4_COUNT_1805DE3E8 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*804383C4 004351C4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*804383C8 004351C8*/ PPC::Runtime::ASM::lhz(context->r3, SkipAddress_22 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*804383CC 004351CC*/ PPC::Runtime::ASM::stw(context->r31, STRUCT_BYTE4_COUNT_1805DE3E8 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*804383D0 004351D0*/ PPC::Runtime::ASM::subi(context->r0, context->r3, 0x1);
/*804383D4 004351D4*/ PPC::Runtime::ASM::sth(context->r0, SkipAddress_22 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*804383D8 004351D8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*804383DC 004351DC*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*804383E0 004351E0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*804383E4 004351E4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*804383E8 004351E8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*804383EC 004351EC*/ PPC::Runtime::ASM::blr();
}