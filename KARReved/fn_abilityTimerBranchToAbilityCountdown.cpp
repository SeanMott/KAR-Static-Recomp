//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_abilityTimerBranchToAbilityCountdown(PPC::Runtime::GCContext* context)
{
/*801A5F68 001A2D68*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801A5F6C 001A2D6C*/ PPC::Runtime::ASM::mflr(context->r0);
/*801A5F70 001A2D70*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801A5F74 001A2D74*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801A5F78 001A2D78*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801A5F7C 001A2D7C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r3));
/*801A5F80 001A2D80*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*801A5F84 001A2D84*/ PPC::Runtime::ASM::beq(.L_801A5F8C);
/*801A5F88 001A2D88*/ PPC::Runtime::ASM::bl(fn_HSD_JObjAnimAll?);
RUNTIME_PPC_JUMP_LABEL(.L_801A5F8C, 0x801A5F8C) //this is a jump label
/*801A5F8C 001A2D8C*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x92c, context->r31));
/*801A5F90 001A2D90*/ PPC::Runtime::ASM::cmplwi(context->r12, 0x0);
/*801A5F94 001A2D94*/ PPC::Runtime::ASM::beq(.L_801A5FA4);
/*801A5F98 001A2D98*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801A5F9C 001A2D9C*/ PPC::Runtime::ASM::mtctr(context->r12);
/*801A5FA0 001A2DA0*/ PPC::Runtime::ASM::bctrl();
RUNTIME_PPC_JUMP_LABEL(.L_801A5FA4, 0x801A5FA4) //this is a jump label
/*801A5FA4 001A2DA4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801A5FA8 001A2DA8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801A5FAC 001A2DAC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801A5FB0 001A2DB0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801A5FB4 001A2DB4*/ PPC::Runtime::ASM::blr();
}