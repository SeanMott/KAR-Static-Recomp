//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_GXSetDither.hpp"



void fn_HSD_StateSetColorDither(PPC::Runtime::GCContext* context)
{
/*803F88B0 003F56B0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*803F88B4 003F56B4*/ PPC::Runtime::ASM::mflr(context->r0);
/*803F88B8 003F56B8*/ PPC::Runtime::ASM::neg(context->r4, context->r3);
/*803F88BC 003F56BC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803F88C0 003F56C0*/ PPC::Runtime::ASM::or(context->r3, context->r4, context->r3);
/*803F88C4 003F56C4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803F88C8 003F56C8*/ PPC::Runtime::ASM::srwi(context->r31, context->r3, 31);
/*803F88CC 003F56CC*/ PPC::Runtime::ASM::lbz(context->r0, SkipAddress_43 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803F88D0 003F56D0*/ PPC::Runtime::ASM::cmplw(context->r0, context->r31);
/*803F88D4 003F56D4*/ PPC::Runtime::ASM::beq(.L_803F88E4);
/*803F88D8 003F56D8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*803F88DC 003F56DC*/ PPC::Runtime::ASM::bl(fn_GXSetDither);
/*803F88E0 003F56E0*/ PPC::Runtime::ASM::stb(context->r31, SkipAddress_43 @ Get_MemoryOffset_SDA21 ( context->r0 ));
RUNTIME_PPC_JUMP_LABEL(.L_803F88E4, 0x803F88E4) //this is a jump label
/*803F88E4 003F56E4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803F88E8 003F56E8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803F88EC 003F56EC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803F88F0 003F56F0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*803F88F4 003F56F4*/ PPC::Runtime::ASM::blr();
}