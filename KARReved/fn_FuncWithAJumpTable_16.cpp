//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80047844.hpp"
#include "fn_8007863C.hpp"
#include "fn_FuncWithAJumpTable_11.hpp"



void fn_FuncWithAJumpTable_16(PPC::Runtime::GCContext* context)
{
/*800488EC 000456EC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800488F0 000456F0*/ PPC::Runtime::ASM::mflr(context->r0);
/*800488F4 000456F4*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_158 @ Get_MemoryOffset_HighBit);
/*800488F8 000456F8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800488FC 000456FC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80048900 00045700*/ PPC::Runtime::ASM::addi(context->r31, context->r3, MemoryOffset_158 @ Get_MemoryOffset_LowBit);
/*80048904 00045704*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80048908 00045708*/ PPC::Runtime::ASM::bl(fn_80047844);
/*8004890C 0004570C*/ PPC::Runtime::ASM::bl(fn_8007863C);
/*80048910 00045710*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*80048914 00045714*/ PPC::Runtime::ASM::cmpwi(context->r30, 0xb);
/*80048918 00045718*/ PPC::Runtime::ASM::beq(.L_80048A0C);
/*8004891C 0004571C*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x10);
/*80048920 00045720*/ PPC::Runtime::ASM::bgt(.L_800489D0);
/*80048924 00045724*/ PPC::Runtime::ASM::lis(context->r3, FuncWithAJumpTable_16_JumpTable_80497290 @ Get_MemoryOffset_HighBit);
/*80048928 00045728*/ PPC::Runtime::ASM::slwi(context->r0, context->r30, 2);
/*8004892C 0004572C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, FuncWithAJumpTable_16_JumpTable_80497290 @ Get_MemoryOffset_LowBit);
/*80048930 00045730*/ PPC::Runtime::ASM::lwzx(context->r0, context->r3, context->r0);
/*80048934 00045734*/ PPC::Runtime::ASM::mtctr(context->r0);
/*80048938 00045738*/ PPC::Runtime::ASM::bctr();
/*8004893C 0004573C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*80048940 00045740*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*80048944 00045744*/ PPC::Runtime::ASM::bl(OSReport);
/*80048948 00045748*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x38);
/*8004894C 0004574C*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*80048950 00045750*/ PPC::Runtime::ASM::bl(OSReport);
/*80048954 00045754*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*80048958 00045758*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x70);
/*8004895C 0004575C*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*80048960 00045760*/ PPC::Runtime::ASM::bl(OSReport);
/*80048964 00045764*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*80048968 00045768*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*8004896C 0004576C*/ PPC::Runtime::ASM::bl(OSReport);
/*80048970 00045770*/ PPC::Runtime::ASM::li(context->r3, 0x10);
/*80048974 00045774*/ PPC::Runtime::ASM::b(.L_80048A08);
/*80048978 00045778*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*8004897C 0004577C*/ PPC::Runtime::ASM::b(.L_80048A08);
/*80048980 00045780*/ PPC::Runtime::ASM::li(context->r3, 0x17);
/*80048984 00045784*/ PPC::Runtime::ASM::b(.L_80048A08);
/*80048988 00045788*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*8004898C 0004578C*/ PPC::Runtime::ASM::b(.L_80048A08);
/*80048990 00045790*/ PPC::Runtime::ASM::li(context->r3, 0x4);
/*80048994 00045794*/ PPC::Runtime::ASM::b(.L_80048A08);
/*80048998 00045798*/ PPC::Runtime::ASM::li(context->r3, 0x8);
/*8004899C 0004579C*/ PPC::Runtime::ASM::b(.L_80048A08);
/*800489A0 000457A0*/ PPC::Runtime::ASM::li(context->r3, 0x9);
/*800489A4 000457A4*/ PPC::Runtime::ASM::b(.L_80048A08);
/*800489A8 000457A8*/ PPC::Runtime::ASM::li(context->r3, 0xa);
/*800489AC 000457AC*/ PPC::Runtime::ASM::b(.L_80048A08);
/*800489B0 000457B0*/ PPC::Runtime::ASM::li(context->r3, 0xf);
/*800489B4 000457B4*/ PPC::Runtime::ASM::b(.L_80048A08);
/*800489B8 000457B8*/ PPC::Runtime::ASM::li(context->r3, 0x10);
/*800489BC 000457BC*/ PPC::Runtime::ASM::b(.L_80048A08);
/*800489C0 000457C0*/ PPC::Runtime::ASM::li(context->r3, 0x11);
/*800489C4 000457C4*/ PPC::Runtime::ASM::b(.L_80048A08);
/*800489C8 000457C8*/ PPC::Runtime::ASM::li(context->r3, 0x15);
/*800489CC 000457CC*/ PPC::Runtime::ASM::b(.L_80048A08);
RUNTIME_PPC_JUMP_LABEL(.L_800489D0, 0x800489D0) //this is a jump label
/*800489D0 000457D0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800489D4 000457D4*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800489D8 000457D8*/ PPC::Runtime::ASM::bl(OSReport);
/*800489DC 000457DC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x38);
/*800489E0 000457E0*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800489E4 000457E4*/ PPC::Runtime::ASM::bl(OSReport);
/*800489E8 000457E8*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800489EC 000457EC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0xa0);
/*800489F0 000457F0*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800489F4 000457F4*/ PPC::Runtime::ASM::bl(OSReport);
/*800489F8 000457F8*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800489FC 000457FC*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*80048A00 00045800*/ PPC::Runtime::ASM::bl(OSReport);
/*80048A04 00045804*/ PPC::Runtime::ASM::li(context->r3, 0x10);
RUNTIME_PPC_JUMP_LABEL(.L_80048A08, 0x80048A08) //this is a jump label
/*80048A08 00045808*/ PPC::Runtime::ASM::bl(fn_FuncWithAJumpTable_11);
RUNTIME_PPC_JUMP_LABEL(.L_80048A0C, 0x80048A0C) //this is a jump label
/*80048A0C 0004580C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80048A10 00045810*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80048A14 00045814*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80048A18 00045818*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80048A1C 0004581C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80048A20 00045820*/ PPC::Runtime::ASM::blr();
}