//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "OSDisableInterrupts.hpp"
#include "fn_DVDGetCommandBlockStatus.hpp"
#include "OSRestoreInterrupts.hpp"
#include "OSRestoreInterrupts.hpp"



void fn_8045CB08(PPC::Runtime::GCContext* context)
{
/*8045CB08 00459908*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*8045CB0C 0045990C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8045CB10 00459910*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8045CB14 00459914*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8045CB18 00459918*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8045CB1C 0045991C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8045CB20 00459920*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*8045CB24 00459924*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*8045CB28 00459928*/ PPC::Runtime::ASM::mr(context->r0, context->r3);
/*8045CB2C 0045992C*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*8045CB30 00459930*/ PPC::Runtime::ASM::mr(context->r30, context->r0);
/*8045CB34 00459934*/ PPC::Runtime::ASM::bl(fn_DVDGetCommandBlockStatus);
/*8045CB38 00459938*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c, context->r29));
/*8045CB3C 0045993C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8045CB40 00459940*/ PPC::Runtime::ASM::cmpw(context->r31, context->r0);
/*8045CB44 00459944*/ PPC::Runtime::ASM::bne(.L_8045CB54);
/*8045CB48 00459948*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*8045CB4C 0045994C*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*8045CB50 00459950*/ PPC::Runtime::ASM::b(.L_8045CB80);
RUNTIME_PPC_JUMP_LABEL(.L_8045CB54, 0x8045CB54) //this is a jump label
/*8045CB54 00459954*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c, context->r29));
/*8045CB58 00459958*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*8045CB5C 0045995C*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*8045CB60 00459960*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c, context->r29));
/*8045CB64 00459964*/ PPC::Runtime::ASM::cmplwi(context->r12, 0x0);
/*8045CB68 00459968*/ PPC::Runtime::ASM::beq(.L_8045CB80);
/*8045CB6C 0045996C*/ PPC::Runtime::ASM::mr(context->r5, context->r31);
/*8045CB70 00459970*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x70, context->r29));
/*8045CB74 00459974*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x74, context->r29));
/*8045CB78 00459978*/ PPC::Runtime::ASM::mtctr(context->r12);
/*8045CB7C 0045997C*/ PPC::Runtime::ASM::bctrl();
RUNTIME_PPC_JUMP_LABEL(.L_8045CB80, 0x8045CB80) //this is a jump label
/*8045CB80 00459980*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8045CB84 00459984*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8045CB88 00459988*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8045CB8C 0045998C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8045CB90 00459990*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8045CB94 00459994*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*8045CB98 00459998*/ PPC::Runtime::ASM::blr();
}