//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "memset.hpp"



void fn_80075D44(PPC::Runtime::GCContext* context)
{
/*80075D44 00072B44*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80075D48 00072B48*/ PPC::Runtime::ASM::mflr(context->r0);
/*80075D4C 00072B4C*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_BYTE4_COUNT_180552338 @ Get_MemoryOffset_HighBit);
/*80075D50 00072B50*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*80075D54 00072B54*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80075D58 00072B58*/ PPC::Runtime::ASM::addi(context->r3, context->r3, STRUCT_BYTE4_COUNT_180552338 @ Get_MemoryOffset_LowBit);
/*80075D5C 00072B5C*/ PPC::Runtime::ASM::li(context->r5, 0x10);
/*80075D60 00072B60*/ PPC::Runtime::ASM::bl(memset);
/*80075D64 00072B64*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_BYTE4_COUNT_180552338 @ Get_MemoryOffset_HighBit);
/*80075D68 00072B68*/ PPC::Runtime::ASM::li(context->r0, -0x1);
/*80075D6C 00072B6C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, STRUCT_BYTE4_COUNT_180552338 @ Get_MemoryOffset_LowBit);
/*80075D70 00072B70*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*80075D74 00072B74*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*80075D78 00072B78*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*80075D7C 00072B7C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r3));
/*80075D80 00072B80*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80075D84 00072B84*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80075D88 00072B88*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80075D8C 00072B8C*/ PPC::Runtime::ASM::blr();
}