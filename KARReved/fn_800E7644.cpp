//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E7644(PPC::Runtime::GCContext* context)
{
/*800E7644 000E4444*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E7648 000E4448*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E764C 000E444C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7650 000E4450*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7654 000E4454*/ PPC::Runtime::ASM::fmr(context->f31, context->f1);
/*800E7658 000E4458*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E765C 000E445C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7660 000E4460*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E7664 000E4464*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E7668 000E4468*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E766C 000E446C*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E7670 000E4470*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E7674 000E4474*/ PPC::Runtime::ASM::beq(.L_800E7688);
/*800E7678 000E4478*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E767C 000E447C*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E7680 000E4480*/ PPC::Runtime::ASM::li(context->r4, 0x1b9);
/*800E7684 000E4484*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7688, 0x800E7688) //this is a jump label
/*800E7688 000E4488*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E768C 000E448C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E7690 000E4490*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800E7694 000E4494*/ PPC::Runtime::ASM::beq(.L_800E76A8);
/*800E7698 000E4498*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E769C 000E449C*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x84);
/*800E76A0 000E44A0*/ PPC::Runtime::ASM::li(context->r4, 0x1bd);
/*800E76A4 000E44A4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E76A8, 0x800E76A8) //this is a jump label
/*800E76A8 000E44A8*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800E76AC 000E44AC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E76B0 000E44B0*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E76B4 000E44B4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E76B8 000E44B8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E76BC 000E44BC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E76C0 000E44C0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E76C4 000E44C4*/ PPC::Runtime::ASM::blr();
}