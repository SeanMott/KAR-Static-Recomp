//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_801CDE9C(PPC::Runtime::GCContext* context)
{
/*801CDE9C 001CAC9C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801CDEA0 001CACA0*/ PPC::Runtime::ASM::mflr(context->r0);
/*801CDEA4 001CACA4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801CDEA8 001CACA8*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801CDEAC 001CACAC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6f8, context->r3));
/*801CDEB0 001CACB0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x710, context->r3));
/*801CDEB4 001CACB4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r4));
/*801CDEB8 001CACB8*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 2);
/*801CDEBC 001CACBC*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*801CDEC0 001CACC0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x148, context->r3));
/*801CDEC4 001CACC4*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1, context->r31));
/*801CDEC8 001CACC8*/ PPC::Runtime::ASM::rlwinm.(context->r0, context->r0, 0, 30, 30);
/*801CDECC 001CACCC*/ PPC::Runtime::ASM::bne(.L_801CDEE4);
/*801CDED0 001CACD0*/ PPC::Runtime::ASM::lis(context->r4, String_ "cgf_allPtr_coll_info_AND_GrCFK_Wal" Get_MemoryOffset_HighBit);
/*801CDED4 001CACD4*/ PPC::Runtime::ASM::li(context->r3, String_ "mplib." 3 @ Get_MemoryOffset_SDA21);
/*801CDED8 001CACD8*/ PPC::Runtime::ASM::addi(context->r5, context->r4, String_ "cgf_allPtr_coll_info_AND_GrCFK_Wal" Get_MemoryOffset_LowBit);
/*801CDEDC 001CACDC*/ PPC::Runtime::ASM::li(context->r4, 0x107);
/*801CDEE0 001CACE0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_801CDEE4, 0x801CDEE4) //this is a jump label
/*801CDEE4 001CACE4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r31));
/*801CDEE8 001CACE8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801CDEEC 001CACEC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*801CDEF0 001CACF0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801CDEF4 001CACF4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801CDEF8 001CACF8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801CDEFC 001CACFC*/ PPC::Runtime::ASM::blr();
}