//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80072430.hpp"



void fn_800BBFC4(PPC::Runtime::GCContext* context)
{
/*800BBFC4 000B8DC4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800BBFC8 000B8DC8*/ PPC::Runtime::ASM::mflr(context->r0);
/*800BBFCC 000B8DCC*/ PPC::Runtime::ASM::lis(context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_HighBit);
/*800BBFD0 000B8DD0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800BBFD4 000B8DD4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800BBFD8 000B8DD8*/ PPC::Runtime::ASM::addi(context->r31, context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_LowBit);
/*800BBFDC 000B8DDC*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800BBFE0 000B8DE0*/ PPC::Runtime::ASM::li(context->r30, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800BBFE4, 0x800BBFE4) //this is a jump label
/*800BBFE4 000B8DE4*/ PPC::Runtime::ASM::cmpwi(context->r30, 0x0);
/*800BBFE8 000B8DE8*/ PPC::Runtime::ASM::blt(.L_800BBFF4);
/*800BBFEC 000B8DEC*/ PPC::Runtime::ASM::cmpwi(context->r30, 0x20);
/*800BBFF0 000B8DF0*/ PPC::Runtime::ASM::blt(.L_800BBFFC);
RUNTIME_PPC_JUMP_LABEL(.L_800BBFF4, 0x800BBFF4) //this is a jump label
/*800BBFF4 000B8DF4*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800BBFF8 000B8DF8*/ PPC::Runtime::ASM::b(.L_800BC000);
RUNTIME_PPC_JUMP_LABEL(.L_800BBFFC, 0x800BBFFC) //this is a jump label
/*800BBFFC 000B8DFC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb0, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_800BC000, 0x800BC000) //this is a jump label
/*800BC000 000B8E00*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800BC004 000B8E04*/ PPC::Runtime::ASM::beq(.L_800BC010);
/*800BC008 000B8E08*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800BC00C 000B8E0C*/ PPC::Runtime::ASM::b(.L_800BC014);
RUNTIME_PPC_JUMP_LABEL(.L_800BC010, 0x800BC010) //this is a jump label
/*800BC010 000B8E10*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800BC014, 0x800BC014) //this is a jump label
/*800BC014 000B8E14*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800BC018 000B8E18*/ PPC::Runtime::ASM::beq(.L_800BC02C);
/*800BC01C 000B8E1C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800BC020 000B8E20*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800BC024 000B8E24*/ PPC::Runtime::ASM::beq(.L_800BC02C);
/*800BC028 000B8E28*/ PPC::Runtime::ASM::bl(fn_80072430);
RUNTIME_PPC_JUMP_LABEL(.L_800BC02C, 0x800BC02C) //this is a jump label
/*800BC02C 000B8E2C*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x1);
/*800BC030 000B8E30*/ PPC::Runtime::ASM::addi(context->r31, context->r31, 0x4);
/*800BC034 000B8E34*/ PPC::Runtime::ASM::cmpwi(context->r30, 0x20);
/*800BC038 000B8E38*/ PPC::Runtime::ASM::blt(.L_800BBFE4);
/*800BC03C 000B8E3C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800BC040 000B8E40*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800BC044 000B8E44*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800BC048 000B8E48*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800BC04C 000B8E4C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800BC050 000B8E50*/ PPC::Runtime::ASM::blr();
}