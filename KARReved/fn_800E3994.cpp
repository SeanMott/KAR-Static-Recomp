//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E3994(PPC::Runtime::GCContext* context)
{
/*800E3994 000E0794*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x30, context->r1));
/*800E3998 000E0798*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E399C 000E079C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800E39A0 000E07A0*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x30);
/*800E39A4 000E07A4*/ PPC::Runtime::ASM::bl(_savegpr_25);
/*800E39A8 000E07A8*/ PPC::Runtime::ASM::mr(context->r25, context->r3);
/*800E39AC 000E07AC*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_FLOAT_4 @ Get_MemoryOffset_HighBit);
/*800E39B0 000E07B0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r25));
/*800E39B4 000E07B4*/ PPC::Runtime::ASM::mr(context->r27, context->r4);
/*800E39B8 000E07B8*/ PPC::Runtime::ASM::mr(context->r26, context->r5);
/*800E39BC 000E07BC*/ PPC::Runtime::ASM::addi(context->r29, context->r3, STRUCT_FLOAT_4 @ Get_MemoryOffset_LowBit);
/*800E39C0 000E07C0*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800E39C4 000E07C4*/ PPC::Runtime::ASM::bne(.L_800E39D8);
/*800E39C8 000E07C8*/ PPC::Runtime::ASM::addi(context->r3, context->r29, 0x48);
/*800E39CC 000E07CC*/ PPC::Runtime::ASM::addi(context->r5, context->r29, 0xdc);
/*800E39D0 000E07D0*/ PPC::Runtime::ASM::li(context->r4, 0xef);
/*800E39D4 000E07D4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E39D8, 0x800E39D8) //this is a jump label
/*800E39D8 000E07D8*/ PPC::Runtime::ASM::cmpwi(context->r27, 0x0);
/*800E39DC 000E07DC*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800E39E0 000E07E0*/ PPC::Runtime::ASM::blt(.L_800E39F4);
/*800E39E4 000E07E4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x128, context->r25));
/*800E39E8 000E07E8*/ PPC::Runtime::ASM::cmpw(context->r27, context->r0);
/*800E39EC 000E07EC*/ PPC::Runtime::ASM::bge(.L_800E39F4);
/*800E39F0 000E07F0*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E39F4, 0x800E39F4) //this is a jump label
/*800E39F4 000E07F4*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800E39F8 000E07F8*/ PPC::Runtime::ASM::bne(.L_800E3A0C);
/*800E39FC 000E07FC*/ PPC::Runtime::ASM::addi(context->r3, context->r29, 0x48);
/*800E3A00 000E0800*/ PPC::Runtime::ASM::addi(context->r5, context->r29, 0xe8);
/*800E3A04 000E0804*/ PPC::Runtime::ASM::li(context->r4, 0xf0);
/*800E3A08 000E0808*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E3A0C, 0x800E3A0C) //this is a jump label
/*800E3A0C 000E080C*/ PPC::Runtime::ASM::mulli(context->r31, context->r27, 0x2c);
/*800E3A10 000E0810*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x124, context->r25));
/*800E3A14 000E0814*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r25));
/*800E3A18 000E0818*/ PPC::Runtime::ASM::lwzx(context->r3, context->r30, context->r31);
/*800E3A1C 000E081C*/ PPC::Runtime::ASM::cmplwi(context->r28, 0x0);
/*800E3A20 000E0820*/ PPC::Runtime::ASM::lwz(context->r27, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800E3A24 000E0824*/ PPC::Runtime::ASM::bne(.L_800E3A38);
/*800E3A28 000E0828*/ PPC::Runtime::ASM::addi(context->r3, context->r29, 0x48);
/*800E3A2C 000E082C*/ PPC::Runtime::ASM::addi(context->r5, context->r29, 0x54);
/*800E3A30 000E0830*/ PPC::Runtime::ASM::li(context->r4, 0x1d);
/*800E3A34 000E0834*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E3A38, 0x800E3A38) //this is a jump label
/*800E3A38 000E0838*/ PPC::Runtime::ASM::cmpwi(context->r27, 0x0);
/*800E3A3C 000E083C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800E3A40 000E0840*/ PPC::Runtime::ASM::blt(.L_800E3A54);
/*800E3A44 000E0844*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r28));
/*800E3A48 000E0848*/ PPC::Runtime::ASM::cmpw(context->r27, context->r0);
/*800E3A4C 000E084C*/ PPC::Runtime::ASM::bge(.L_800E3A54);
/*800E3A50 000E0850*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E3A54, 0x800E3A54) //this is a jump label
/*800E3A54 000E0854*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800E3A58 000E0858*/ PPC::Runtime::ASM::bne(.L_800E3A6C);
/*800E3A5C 000E085C*/ PPC::Runtime::ASM::addi(context->r3, context->r29, 0x48);
/*800E3A60 000E0860*/ PPC::Runtime::ASM::addi(context->r5, context->r29, 0x60);
/*800E3A64 000E0864*/ PPC::Runtime::ASM::li(context->r4, 0x1e);
/*800E3A68 000E0868*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E3A6C, 0x800E3A6C) //this is a jump label
/*800E3A6C 000E086C*/ PPC::Runtime::ASM::lwzx(context->r4, context->r30, context->r31);
/*800E3A70 000E0870*/ PPC::Runtime::ASM::mulli(context->r0, context->r27, 0x1c);
/*800E3A74 000E0874*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x120, context->r25));
/*800E3A78 000E0878*/ PPC::Runtime::ASM::mr(context->r3, context->r26);
/*800E3A7C 000E087C*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*800E3A80 000E0880*/ PPC::Runtime::ASM::add(context->r4, context->r5, context->r0);
/*800E3A84 000E0884*/ PPC::Runtime::ASM::bl(fn_splArcLengthPoint);
/*800E3A88 000E0888*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x30);
/*800E3A8C 000E088C*/ PPC::Runtime::ASM::bl(_restgpr_25);
/*800E3A90 000E0890*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800E3A94 000E0894*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E3A98 000E0898*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x30);
/*800E3A9C 000E089C*/ PPC::Runtime::ASM::blr();
}