//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_AIGetDSPSampleRate.hpp"
#include "fn_AIGetStreamPlayState_2.hpp"
#include "fn_AIGetStreamPlayState_3.hpp"
#include "fn_AIGetStreamSampleRate.hpp"
#include "fn_AISetStreamVolLeft.hpp"
#include "fn_AISetStreamVolRight.hpp"
#include "OSDisableInterrupts.hpp"
#include "fn___AI_SRC_INIT.hpp"
#include "OSRestoreInterrupts.hpp"
#include "fn_AISetStreamVolLeft.hpp"
#include "fn_AISetStreamVolRight.hpp"



void fn_AISetDSPSampleRate(PPC::Runtime::GCContext* context)
{
/*803DF838 003DC638*/ PPC::Runtime::ASM::mflr(context->r0);
/*803DF83C 003DC63C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803DF840 003DC640*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x28, context->r1));
/*803DF844 003DC644*/ PPC::Runtime::ASM::stmw(context->r26, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*803DF848 003DC648*/ PPC::Runtime::ASM::mr(context->r26, context->r3);
/*803DF84C 003DC64C*/ PPC::Runtime::ASM::bl(fn_AIGetDSPSampleRate);
/*803DF850 003DC650*/ PPC::Runtime::ASM::cmplw(context->r26, context->r3);
/*803DF854 003DC654*/ PPC::Runtime::ASM::beq(.L_803DF904);
/*803DF858 003DC658*/ PPC::Runtime::ASM::lis(context->r31, 0xcc00);
/*803DF85C 003DC65C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF860 003DC660*/ PPC::Runtime::ASM::cmplwi(context->r26, 0x0);
/*803DF864 003DC664*/ PPC::Runtime::ASM::rlwinm(context->r0, context->r0, 0, 26, 24);
/*803DF868 003DC668*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF86C 003DC66C*/ PPC::Runtime::ASM::bne(.L_803DF904);
/*803DF870 003DC670*/ PPC::Runtime::ASM::bl(fn_AIGetStreamPlayState_2);
/*803DF874 003DC674*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*803DF878 003DC678*/ PPC::Runtime::ASM::bl(fn_AIGetStreamPlayState_3);
/*803DF87C 003DC67C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF880 003DC680*/ PPC::Runtime::ASM::addi(context->r29, context->r3, 0x0);
/*803DF884 003DC684*/ PPC::Runtime::ASM::clrlwi(context->r27, context->r0, 31);
/*803DF888 003DC688*/ PPC::Runtime::ASM::bl(fn_AIGetStreamSampleRate);
/*803DF88C 003DC68C*/ PPC::Runtime::ASM::addi(context->r28, context->r3, 0x0);
/*803DF890 003DC690*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*803DF894 003DC694*/ PPC::Runtime::ASM::bl(fn_AISetStreamVolLeft);
/*803DF898 003DC698*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*803DF89C 003DC69C*/ PPC::Runtime::ASM::bl(fn_AISetStreamVolRight);
/*803DF8A0 003DC6A0*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*803DF8A4 003DC6A4*/ PPC::Runtime::ASM::mr(context->r26, context->r3);
/*803DF8A8 003DC6A8*/ PPC::Runtime::ASM::bl(fn___AI_SRC_INIT);
/*803DF8AC 003DC6AC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8B0 003DC6B0*/ PPC::Runtime::ASM::slwi(context->r0, context->r28, 1);
/*803DF8B4 003DC6B4*/ PPC::Runtime::ASM::addi(context->r3, context->r26, 0x0);
/*803DF8B8 003DC6B8*/ PPC::Runtime::ASM::rlwinm(context->r4, context->r4, 0, 27, 25);
/*803DF8BC 003DC6BC*/ PPC::Runtime::ASM::ori(context->r4, context->r4, 0x20);
/*803DF8C0 003DC6C0*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8C4 003DC6C4*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8C8 003DC6C8*/ PPC::Runtime::ASM::rlwinm(context->r4, context->r4, 0, 31, 29);
/*803DF8CC 003DC6CC*/ PPC::Runtime::ASM::or(context->r0, context->r4, context->r0);
/*803DF8D0 003DC6D0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8D4 003DC6D4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8D8 003DC6D8*/ PPC::Runtime::ASM::clrrwi(context->r0, context->r0, 1);
/*803DF8DC 003DC6DC*/ PPC::Runtime::ASM::or(context->r0, context->r0, context->r27);
/*803DF8E0 003DC6E0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8E4 003DC6E4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8E8 003DC6E8*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x40);
/*803DF8EC 003DC6EC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6c00, context->r31));
/*803DF8F0 003DC6F0*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*803DF8F4 003DC6F4*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*803DF8F8 003DC6F8*/ PPC::Runtime::ASM::bl(fn_AISetStreamVolLeft);
/*803DF8FC 003DC6FC*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*803DF900 003DC700*/ PPC::Runtime::ASM::bl(fn_AISetStreamVolRight);
RUNTIME_PPC_JUMP_LABEL(.L_803DF904, 0x803DF904) //this is a jump label
/*803DF904 003DC704*/ PPC::Runtime::ASM::lmw(context->r26, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*803DF908 003DC708*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*803DF90C 003DC70C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x28);
/*803DF910 003DC710*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803DF914 003DC714*/ PPC::Runtime::ASM::blr();
}