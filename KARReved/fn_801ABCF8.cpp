//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_Rider_CheckAnimationEnd.hpp"
#include "fn_801A8454.hpp"



void fn_801ABCF8(PPC::Runtime::GCContext* context)
{
/*801ABCF8 001A8AF8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801ABCFC 001A8AFC*/ PPC::Runtime::ASM::mflr(context->r0);
/*801ABD00 001A8B00*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801ABD04 001A8B04*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801ABD08 001A8B08*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801ABD0C 001A8B0C*/ PPC::Runtime::ASM::bl(fn_Rider_CheckAnimationEnd);
/*801ABD10 001A8B10*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801ABD14 001A8B14*/ PPC::Runtime::ASM::beq(.L_801ABD2C);
/*801ABD18 001A8B18*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38c, context->r31));
/*801ABD1C 001A8B1C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801ABD20 001A8B20*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r4));
/*801ABD24 001A8B24*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c0, context->r31));
/*801ABD28 001A8B28*/ PPC::Runtime::ASM::bl(fn_801A8454);
RUNTIME_PPC_JUMP_LABEL(.L_801ABD2C, 0x801ABD2C) //this is a jump label
/*801ABD2C 001A8B2C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801ABD30 001A8B30*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801ABD34 001A8B34*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801ABD38 001A8B38*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801ABD3C 001A8B3C*/ PPC::Runtime::ASM::blr();
}