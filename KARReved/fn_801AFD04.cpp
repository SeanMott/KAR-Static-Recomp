//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_ability_Sword_end.hpp"
#include "fn_Rider_SetModelVisibility.hpp"
#include "fn_Rider_SetUnknownFlag.hpp"
#include "fn_revertKirbyModel?.hpp"



void fn_801AFD04(PPC::Runtime::GCContext* context)
{
/*801AFD04 001ACB04*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801AFD08 001ACB08*/ PPC::Runtime::ASM::mflr(context->r0);
/*801AFD0C 001ACB0C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AFD10 001ACB10*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AFD14 001ACB14*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801AFD18 001ACB18*/ PPC::Runtime::ASM::bl(fn_ability_Sword_end);
/*801AFD1C 001ACB1C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFD20 001ACB20*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*801AFD24 001ACB24*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*801AFD28 001ACB28*/ PPC::Runtime::ASM::bl(fn_Rider_SetModelVisibility);
/*801AFD2C 001ACB2C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFD30 001ACB30*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*801AFD34 001ACB34*/ PPC::Runtime::ASM::bl(fn_Rider_SetUnknownFlag);
/*801AFD38 001ACB38*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFD3C 001ACB3C*/ PPC::Runtime::ASM::bl(fn_revertKirbyModel?);
/*801AFD40 001ACB40*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AFD44 001ACB44*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AFD48 001ACB48*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801AFD4C 001ACB4C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801AFD50 001ACB50*/ PPC::Runtime::ASM::blr();
}