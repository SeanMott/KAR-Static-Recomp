//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801C7C30.hpp"
#include "fn_801B50EC.hpp"



void fn_801B4E2C(PPC::Runtime::GCContext* context)
{
/*801B4E2C 001B1C2C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801B4E30 001B1C30*/ PPC::Runtime::ASM::mflr(context->r0);
/*801B4E34 001B1C34*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801B4E38 001B1C38*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801B4E3C 001B1C3C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801B4E40 001B1C40*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3f4, context->r3));
/*801B4E44 001B1C44*/ PPC::Runtime::ASM::bl(fn_801C7C30);
/*801B4E48 001B1C48*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801B4E4C 001B1C4C*/ PPC::Runtime::ASM::beq(.L_801B4E64);
/*801B4E50 001B1C50*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E162C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801B4E54 001B1C54*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801B4E58 001B1C58*/ PPC::Runtime::ASM::bl(fn_801B50EC);
/*801B4E5C 001B1C5C*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*801B4E60 001B1C60*/ PPC::Runtime::ASM::b(.L_801B4E68);
RUNTIME_PPC_JUMP_LABEL(.L_801B4E64, 0x801B4E64) //this is a jump label
/*801B4E64 001B1C64*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_801B4E68, 0x801B4E68) //this is a jump label
/*801B4E68 001B1C68*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801B4E6C 001B1C6C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801B4E70 001B1C70*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801B4E74 001B1C74*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801B4E78 001B1C78*/ PPC::Runtime::ASM::blr();
}