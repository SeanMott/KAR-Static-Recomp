//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn___assert.hpp"



void fn_80429DBC(PPC::Runtime::GCContext* context)
{
/*80429DBC 00426BBC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80429DC0 00426BC0*/ PPC::Runtime::ASM::mflr(context->r0);
/*80429DC4 00426BC4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80429DC8 00426BC8*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80429DCC 00426BCC*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*80429DD0 00426BD0*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7, context->r3));
/*80429DD4 00426BD4*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xff);
/*80429DD8 00426BD8*/ PPC::Runtime::ASM::beq(.L_80429E20);
/*80429DDC 00426BDC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r31));
/*80429DE0 00426BE0*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*80429DE4 00426BE4*/ PPC::Runtime::ASM::bne(.L_80429E00);
/*80429DE8 00426BE8*/ PPC::Runtime::ASM::lis(context->r3, lbl_80504EB0 @ Get_MemoryOffset_HighBit);
/*80429DEC 00426BEC*/ PPC::Runtime::ASM::lis(context->r5, lbl_80504EF0 @ Get_MemoryOffset_HighBit);
/*80429DF0 00426BF0*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_80504EB0 @ Get_MemoryOffset_LowBit);
/*80429DF4 00426BF4*/ PPC::Runtime::ASM::li(context->r4, 0x63);
/*80429DF8 00426BF8*/ PPC::Runtime::ASM::addi(context->r5, context->r5, lbl_80504EF0 @ Get_MemoryOffset_LowBit);
/*80429DFC 00426BFC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_80429E00, 0x80429E00) //this is a jump label
/*80429E00 00426C00*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r31));
/*80429E04 00426C04*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r31));
/*80429E08 00426C08*/ PPC::Runtime::ASM::mtctr(context->r12);
/*80429E0C 00426C0C*/ PPC::Runtime::ASM::bctrl();
/*80429E10 00426C10*/ PPC::Runtime::ASM::li(context->r3, 0xff);
/*80429E14 00426C14*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*80429E18 00426C18*/ PPC::Runtime::ASM::stb(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7, context->r31));
/*80429E1C 00426C1C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_80429E20, 0x80429E20) //this is a jump label
/*80429E20 00426C20*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80429E24 00426C24*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80429E28 00426C28*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80429E2C 00426C2C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80429E30 00426C30*/ PPC::Runtime::ASM::blr();
}