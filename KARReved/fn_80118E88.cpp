//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80112044.hpp"
#include "fn_8011582C.hpp"



void fn_80118E88(PPC::Runtime::GCContext* context)
{
/*80118E88 00115C88*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80118E8C 00115C8C*/ PPC::Runtime::ASM::mflr(context->r0);
/*80118E90 00115C90*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80118E94 00115C94*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80118E98 00115C98*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80118E9C 00115C9C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80118EA0 00115CA0*/ PPC::Runtime::ASM::bl(fn_80112044);
/*80118EA4 00115CA4*/ PPC::Runtime::ASM::addi(context->r30, context->r3, 0x80);
/*80118EA8 00115CA8*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*80118EAC 00115CAC*/ PPC::Runtime::ASM::li(context->r31, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_80118EB0, 0x80118EB0) //this is a jump label
/*80118EB0 00115CB0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r30));
/*80118EB4 00115CB4*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*80118EB8 00115CB8*/ PPC::Runtime::ASM::beq(.L_80118EC4);
/*80118EBC 00115CBC*/ PPC::Runtime::ASM::bl(fn_8011582C);
/*80118EC0 00115CC0*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_80118EC4, 0x80118EC4) //this is a jump label
/*80118EC4 00115CC4*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
/*80118EC8 00115CC8*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x4);
/*80118ECC 00115CCC*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x4);
/*80118ED0 00115CD0*/ PPC::Runtime::ASM::blt(.L_80118EB0);
/*80118ED4 00115CD4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80118ED8 00115CD8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80118EDC 00115CDC*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80118EE0 00115CE0*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80118EE4 00115CE4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80118EE8 00115CE8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80118EEC 00115CEC*/ PPC::Runtime::ASM::blr();
}