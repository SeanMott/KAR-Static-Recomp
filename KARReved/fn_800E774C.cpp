//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E774C(PPC::Runtime::GCContext* context)
{
/*800E774C 000E454C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E7750 000E4550*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E7754 000E4554*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7758 000E4558*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E775C 000E455C*/ PPC::Runtime::ASM::fmr(context->f31, context->f1);
/*800E7760 000E4560*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E7764 000E4564*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7768 000E4568*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E776C 000E456C*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E7770 000E4570*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E7774 000E4574*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E7778 000E4578*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E777C 000E457C*/ PPC::Runtime::ASM::beq(.L_800E7790);
/*800E7780 000E4580*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E7784 000E4584*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E7788 000E4588*/ PPC::Runtime::ASM::li(context->r4, 0x1dd);
/*800E778C 000E458C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7790, 0x800E7790) //this is a jump label
/*800E7790 000E4590*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E7794 000E4594*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E7798 000E4598*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x2);
/*800E779C 000E459C*/ PPC::Runtime::ASM::beq(.L_800E77B0);
/*800E77A0 000E45A0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E77A4 000E45A4*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xe0);
/*800E77A8 000E45A8*/ PPC::Runtime::ASM::li(context->r4, 0x1e1);
/*800E77AC 000E45AC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E77B0, 0x800E77B0) //this is a jump label
/*800E77B0 000E45B0*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800E77B4 000E45B4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E77B8 000E45B8*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E77BC 000E45BC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E77C0 000E45C0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E77C4 000E45C4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E77C8 000E45C8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E77CC 000E45CC*/ PPC::Runtime::ASM::blr();
}