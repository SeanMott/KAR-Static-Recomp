//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_803ED2D0.hpp"
#include "fn_803ED2DC.hpp"
#include "fn_803ED2D0.hpp"
#include "fn_803ED2DC.hpp"
#include "fn_803ED334.hpp"
#include "fn_803ED334.hpp"
#include "OSInitThreadQueue.hpp"
#include "fn_DSPCheckInit.hpp"
#include "fn_DSPInit.hpp"
#include "fn_DSPAddTask.hpp"



void fn_803ED360(PPC::Runtime::GCContext* context)
{
/*803ED360 003EA160*/ PPC::Runtime::ASM::mflr(context->r0);
/*803ED364 003EA164*/ PPC::Runtime::ASM::lis(context->r5, fn_803ED2D0 @ Get_MemoryOffset_HighBit);
/*803ED368 003EA168*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803ED36C 003EA16C*/ PPC::Runtime::ASM::lis(context->r3, lbl_804FEA00 @ Get_MemoryOffset_HighBit);
/*803ED370 003EA170*/ PPC::Runtime::ASM::addi(context->r0, context->r3, lbl_804FEA00 @ Get_MemoryOffset_LowBit);
/*803ED374 003EA174*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*803ED378 003EA178*/ PPC::Runtime::ASM::lis(context->r4, STRUCT_BYTE4_COUNT_180571E00 @ Get_MemoryOffset_HighBit);
/*803ED37C 003EA17C*/ PPC::Runtime::ASM::li(context->r9, 0x0);
/*803ED380 003EA180*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803ED384 003EA184*/ PPC::Runtime::ASM::addi(context->r31, context->r4, STRUCT_BYTE4_COUNT_180571E00 @ Get_MemoryOffset_LowBit);
/*803ED388 003EA188*/ PPC::Runtime::ASM::lis(context->r4, fn_803ED2DC @ Get_MemoryOffset_HighBit);
/*803ED38C 003EA18C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x78c, context->r31));
/*803ED390 003EA190*/ PPC::Runtime::ASM::addi(context->r8, context->r31, 0x7d0);
/*803ED394 003EA194*/ PPC::Runtime::ASM::li(context->r7, 0x10);
/*803ED398 003EA198*/ PPC::Runtime::ASM::lhz(context->r0, StructValues_Byte2_1 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803ED39C 003EA19C*/ PPC::Runtime::ASM::li(context->r6, 0x30);
/*803ED3A0 003EA1A0*/ PPC::Runtime::ASM::addi(context->r5, context->r5, fn_803ED2D0 @ Get_MemoryOffset_LowBit);
/*803ED3A4 003EA1A4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x790, context->r31));
/*803ED3A8 003EA1A8*/ PPC::Runtime::ASM::li(context->r0, 0x2000);
/*803ED3AC 003EA1AC*/ PPC::Runtime::ASM::addi(context->r4, context->r4, fn_803ED2DC @ Get_MemoryOffset_LowBit);
/*803ED3B0 003EA1B0*/ PPC::Runtime::ASM::stw(context->r9, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x794, context->r31));
/*803ED3B4 003EA1B4*/ PPC::Runtime::ASM::lis(context->r3, fn_803ED334 @ Get_MemoryOffset_HighBit);
/*803ED3B8 003EA1B8*/ PPC::Runtime::ASM::stw(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x798, context->r31));
/*803ED3BC 003EA1BC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x79c, context->r31));
/*803ED3C0 003EA1C0*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_803ED334 @ Get_MemoryOffset_LowBit);
/*803ED3C4 003EA1C4*/ PPC::Runtime::ASM::li(context->r3, SkipAddress_45 @ Get_MemoryOffset_SDA21);
/*803ED3C8 003EA1C8*/ PPC::Runtime::ASM::stw(context->r9, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7a0, context->r31));
/*803ED3CC 003EA1CC*/ PPC::Runtime::ASM::sth(context->r7, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7a4, context->r31));
/*803ED3D0 003EA1D0*/ PPC::Runtime::ASM::sth(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7a6, context->r31));
/*803ED3D4 003EA1D4*/ PPC::Runtime::ASM::stw(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7a8, context->r31));
/*803ED3D8 003EA1D8*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7ac, context->r31));
/*803ED3DC 003EA1DC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7b0, context->r31));
/*803ED3E0 003EA1E0*/ PPC::Runtime::ASM::stw(context->r9, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7b4, context->r31));
/*803ED3E4 003EA1E4*/ PPC::Runtime::ASM::stw(context->r9, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x784, context->r31));
/*803ED3E8 003EA1E8*/ PPC::Runtime::ASM::stw(context->r9, STRUCT_BYTE4_COUNT_1805DE0EC @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803ED3EC 003EA1EC*/ PPC::Runtime::ASM::stw(context->r9, STRUCT_BYTE4_COUNT_1805DE0F0 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803ED3F0 003EA1F0*/ PPC::Runtime::ASM::bl(OSInitThreadQueue);
/*803ED3F4 003EA1F4*/ PPC::Runtime::ASM::bl(fn_DSPCheckInit);
/*803ED3F8 003EA1F8*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*803ED3FC 003EA1FC*/ PPC::Runtime::ASM::bne(.L_803ED404);
/*803ED400 003EA200*/ PPC::Runtime::ASM::bl(fn_DSPInit);
RUNTIME_PPC_JUMP_LABEL(.L_803ED404, 0x803ED404) //this is a jump label
/*803ED404 003EA204*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x780);
/*803ED408 003EA208*/ PPC::Runtime::ASM::bl(fn_DSPAddTask);
RUNTIME_PPC_JUMP_LABEL(.L_803ED40C, 0x803ED40C) //this is a jump label
/*803ED40C 003EA20C*/ PPC::Runtime::ASM::lwz(context->r0, STRUCT_BYTE4_COUNT_1805DE0EC @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803ED410 003EA210*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*803ED414 003EA214*/ PPC::Runtime::ASM::beq(.L_803ED40C);
/*803ED418 003EA218*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803ED41C 003EA21C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803ED420 003EA220*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*803ED424 003EA224*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803ED428 003EA228*/ PPC::Runtime::ASM::blr();
}