//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800B9928.hpp"



void fn_800CDCAC(PPC::Runtime::GCContext* context)
{
/*800CDCAC 000CAAAC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800CDCB0 000CAAB0*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CDCB4 000CAAB4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CDCB8 000CAAB8*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x94, context->r3));
/*800CDCBC 000CAABC*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xaa, context->r6));
/* 800CDCC0 000CAAC0  54 00 CF FF */ extrwi. context->r0 , context->r0 , 1 , 24
/*800CDCC4 000CAAC4*/ PPC::Runtime::ASM::bne(.L_800CDCE8);
/*800CDCC8 000CAAC8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x17c, context->r3));
/*800CDCCC 000CAACC*/ PPC::Runtime::ASM::addi(context->r4, context->r6, 0x14);
/*800CDCD0 000CAAD0*/ PPC::Runtime::ASM::addi(context->r5, context->r6, 0x2c);
/*800CDCD4 000CAAD4*/ PPC::Runtime::ASM::addi(context->r6, context->r6, 0x20);
/*800CDCD8 000CAAD8*/ PPC::Runtime::ASM::lha(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x68, context->r3));
/*800CDCDC 000CAADC*/ PPC::Runtime::ASM::bl(fn_800B9928);
/*800CDCE0 000CAAE0*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*800CDCE4 000CAAE4*/ PPC::Runtime::ASM::b(.L_800CDCEC);
RUNTIME_PPC_JUMP_LABEL(.L_800CDCE8, 0x800CDCE8) //this is a jump label
/*800CDCE8 000CAAE8*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800CDCEC, 0x800CDCEC) //this is a jump label
/*800CDCEC 000CAAEC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CDCF0 000CAAF0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CDCF4 000CAAF4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800CDCF8 000CAAF8*/ PPC::Runtime::ASM::blr();
}