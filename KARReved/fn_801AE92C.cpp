//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_randomAbility_getItemID.hpp"
#include "fn_randomAbility_removeGlow.hpp"



void fn_801AE92C(PPC::Runtime::GCContext* context)
{
/*801AE92C 001AB72C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801AE930 001AB730*/ PPC::Runtime::ASM::mflr(context->r0);
/*801AE934 001AB734*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AE938 001AB738*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AE93C 001AB73C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801AE940 001AB740*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x458, context->r3));
/*801AE944 001AB744*/ PPC::Runtime::ASM::cmpwi(context->r0, -0x1);
/*801AE948 001AB748*/ PPC::Runtime::ASM::bne(.L_801AE960);
/*801AE94C 001AB74C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x460, context->r31));
/*801AE950 001AB750*/ PPC::Runtime::ASM::cmpwi(context->r0, -0x1);
/*801AE954 001AB754*/ PPC::Runtime::ASM::bne(.L_801AE960);
/*801AE958 001AB758*/ PPC::Runtime::ASM::bl(fn_randomAbility_getItemID);
/*801AE95C 001AB75C*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x458, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_801AE960, 0x801AE960) //this is a jump label
/*801AE960 001AB760*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801AE964 001AB764*/ PPC::Runtime::ASM::li(context->r0, -0x1);
/*801AE968 001AB768*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x92c, context->r31));
/*801AE96C 001AB76C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AE970 001AB770*/ PPC::Runtime::ASM::li(context->r4, 0x2d);
/*801AE974 001AB774*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x930, context->r31));
/*801AE978 001AB778*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x934, context->r31));
/*801AE97C 001AB77C*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x938, context->r31));
/*801AE980 001AB780*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7e8, context->r31));
/*801AE984 001AB784*/ PPC::Runtime::ASM::lbz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa30, context->r31));
/*801AE988 001AB788*/ PPC::Runtime::ASM::rlwimi(context->r5, context->r6, 2, 29, 29);
/*801AE98C 001AB78C*/ PPC::Runtime::ASM::stb(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa30, context->r31));
/*801AE990 001AB790*/ PPC::Runtime::ASM::lbz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x825, context->r31));
/*801AE994 001AB794*/ PPC::Runtime::ASM::rlwimi(context->r5, context->r6, 1, 30, 30);
/*801AE998 001AB798*/ PPC::Runtime::ASM::stb(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x825, context->r31));
/*801AE99C 001AB79C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x99c, context->r31));
/*801AE9A0 001AB7A0*/ PPC::Runtime::ASM::bl(fn_randomAbility_removeGlow);
/*801AE9A4 001AB7A4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AE9A8 001AB7A8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AE9AC 001AB7AC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801AE9B0 001AB7B0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801AE9B4 001AB7B4*/ PPC::Runtime::ASM::blr();
}