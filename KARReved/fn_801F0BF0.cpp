//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_chargeLogic?.hpp"
#include "fn_801C9DB8.hpp"
#include "fn_801E6ED4.hpp"



void fn_801F0BF0(PPC::Runtime::GCContext* context)
{
/*801F0BF0 001ED9F0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801F0BF4 001ED9F4*/ PPC::Runtime::ASM::mflr(context->r0);
/*801F0BF8 001ED9F8*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E1FA0 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801F0BFC 001ED9FC*/ PPC::Runtime::ASM::li(context->r4, 0x1a);
/*801F0C00 001EDA00*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801F0C04 001EDA04*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*801F0C08 001EDA08*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E1FA4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801F0C0C 001EDA0C*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801F0C10 001EDA10*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801F0C14 001EDA14*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801F0C18 001EDA18*/ PPC::Runtime::ASM::bl(fn_chargeLogic?);
/*801F0C1C 001EDA1C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801F0C20 001EDA20*/ PPC::Runtime::ASM::bl(fn_801C9DB8);
/*801F0C24 001EDA24*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801F0C28 001EDA28*/ PPC::Runtime::ASM::bl(fn_801E6ED4);
/*801F0C2C 001EDA2C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801F0C30 001EDA30*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801F0C34 001EDA34*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801F0C38 001EDA38*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801F0C3C 001EDA3C*/ PPC::Runtime::ASM::blr();
}