//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_Rider_CheckAnimationEnd.hpp"
#include "fn_801BE018.hpp"



void fn_801BF1C0(PPC::Runtime::GCContext* context)
{
/*801BF1C0 001BBFC0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801BF1C4 001BBFC4*/ PPC::Runtime::ASM::mflr(context->r0);
/*801BF1C8 001BBFC8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801BF1CC 001BBFCC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801BF1D0 001BBFD0*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801BF1D4 001BBFD4*/ PPC::Runtime::ASM::bl(fn_Rider_CheckAnimationEnd);
/*801BF1D8 001BBFD8*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801BF1DC 001BBFDC*/ PPC::Runtime::ASM::beq(.L_801BF1F4);
/*801BF1E0 001BBFE0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38c, context->r31));
/*801BF1E4 001BBFE4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801BF1E8 001BBFE8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*801BF1EC 001BBFEC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c0, context->r31));
/*801BF1F0 001BBFF0*/ PPC::Runtime::ASM::bl(fn_801BE018);
RUNTIME_PPC_JUMP_LABEL(.L_801BF1F4, 0x801BF1F4) //this is a jump label
/*801BF1F4 001BBFF4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801BF1F8 001BBFF8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801BF1FC 001BBFFC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801BF200 001BC000*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801BF204 001BC004*/ PPC::Runtime::ASM::blr();
}