//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800CF600(PPC::Runtime::GCContext* context)
{
/*800CF600 000CC400*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800CF604 000CC404*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CF608 000CC408*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CF60C 000CC40C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800CF610 000CC410*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800CF614 000CC414*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800CF618 000CC418*/ PPC::Runtime::ASM::lwz(context->r31, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CF61C 000CC41C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r31));
/*800CF620 000CC420*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800CF624 000CC424*/ PPC::Runtime::ASM::bne(.L_800CF63C);
/*800CF628 000CC428*/ PPC::Runtime::ASM::lis(context->r4, MemoryOffset_901 @ Get_MemoryOffset_HighBit);
/*800CF62C 000CC42C*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800CF630 000CC430*/ PPC::Runtime::ASM::addi(context->r5, context->r4, MemoryOffset_901 @ Get_MemoryOffset_LowBit);
/*800CF634 000CC434*/ PPC::Runtime::ASM::li(context->r4, 0x24b);
/*800CF638 000CC438*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CF63C, 0x800CF63C) //this is a jump label
/*800CF63C 000CC43C*/ PPC::Runtime::ASM::mulli(context->r3, context->r30, 0x18);
/*800CF640 000CC440*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r31));
/*800CF644 000CC444*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*800CF648 000CC448*/ PPC::Runtime::ASM::addi(context->r0, context->r3, 0x14);
/*800CF64C 000CC44C*/ PPC::Runtime::ASM::lbzx(context->r0, context->r4, context->r0);
/*800CF650 000CC450*/ PPC::Runtime::ASM::extrwi(context->r3, context->r0, 1, 24);
/*800CF654 000CC454*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800CF658 000CC458*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800CF65C 000CC45C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CF660 000CC460*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CF664 000CC464*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800CF668 000CC468*/ PPC::Runtime::ASM::blr();
}