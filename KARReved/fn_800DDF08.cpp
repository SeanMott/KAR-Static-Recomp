//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8000A2A0.hpp"
#include "memcpy.hpp"
#include "fn_800DDFEC.hpp"
#include "fn_800DDFEC.hpp"
#include "fn_800DD748.hpp"



void fn_800DDF08(PPC::Runtime::GCContext* context)
{
/*800DDF08 000DAD08*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800DDF0C 000DAD0C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800DDF10 000DAD10*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800DDF14 000DAD14*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x20);
/*800DDF18 000DAD18*/ PPC::Runtime::ASM::bl(_savegpr_26);
/*800DDF1C 000DAD1C*/ PPC::Runtime::ASM::mr(context->r26, context->r3);
/*800DDF20 000DAD20*/ PPC::Runtime::ASM::mr(context->r27, context->r4);
/*800DDF24 000DAD24*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*800DDF28 000DAD28*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*800DDF2C 000DAD2C*/ PPC::Runtime::ASM::b(.L_800DDFB4);
RUNTIME_PPC_JUMP_LABEL(.L_800DDF30, 0x800DDF30) //this is a jump label
/*800DDF30 000DAD30*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x74, context->r26));
/*800DDF34 000DAD34*/ PPC::Runtime::ASM::add(context->r3, context->r0, context->r30);
/*800DDF38 000DAD38*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r3));
/*800DDF3C 000DAD3C*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x1a);
/*800DDF40 000DAD40*/ PPC::Runtime::ASM::bne(.L_800DDFAC);
/*800DDF44 000DAD44*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r3));
/*800DDF48 000DAD48*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r28));
/*800DDF4C 000DAD4C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r28));
/*800DDF50 000DAD50*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800DDF54 000DAD54*/ PPC::Runtime::ASM::bne(.L_800DDF84);
/*800DDF58 000DAD58*/ PPC::Runtime::ASM::bl(fn_8000A2A0);
/*800DDF5C 000DAD5C*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800DDF60 000DAD60*/ PPC::Runtime::ASM::bne(.L_800DDF78);
/*800DDF64 000DAD64*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_936 @ Get_MemoryOffset_HighBit);
/*800DDF68 000DAD68*/ PPC::Runtime::ASM::li(context->r4, 0x39);
/*800DDF6C 000DAD6C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_936 @ Get_MemoryOffset_LowBit);
/*800DDF70 000DAD70*/ PPC::Runtime::ASM::li(context->r5, lbl_805D6110 @ Get_MemoryOffset_SDA21);
/*800DDF74 000DAD74*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800DDF78, 0x800DDF78) //this is a jump label
/*800DDF78 000DAD78*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*800DDF7C 000DAD7C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r28));
/*800DDF80 000DAD80*/ PPC::Runtime::ASM::b(.L_800DDFA4);
RUNTIME_PPC_JUMP_LABEL(.L_800DDF84, 0x800DDF84) //this is a jump label
/*800DDF84 000DAD84*/ PPC::Runtime::ASM::clrlslwi(context->r3, context->r0, 16, 1);
/*800DDF88 000DAD88*/ PPC::Runtime::ASM::bl(fn__HSD_MemAlloc);
/*800DDF8C 000DAD8C*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r28));
/*800DDF90 000DAD90*/ PPC::Runtime::ASM::mr(context->r4, context->r31);
/*800DDF94 000DAD94*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r28));
/*800DDF98 000DAD98*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r28));
/*800DDF9C 000DAD9C*/ PPC::Runtime::ASM::slwi(context->r5, context->r0, 1);
/*800DDFA0 000DADA0*/ PPC::Runtime::ASM::bl(memcpy);
RUNTIME_PPC_JUMP_LABEL(.L_800DDFA4, 0x800DDFA4) //this is a jump label
/*800DDFA4 000DADA4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800DDFA8 000DADA8*/ PPC::Runtime::ASM::bl(fn_HSD_Free);
RUNTIME_PPC_JUMP_LABEL(.L_800DDFAC, 0x800DDFAC) //this is a jump label
/*800DDFAC 000DADAC*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x140);
/*800DDFB0 000DADB0*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800DDFB4, 0x800DDFB4) //this is a jump label
/*800DDFB4 000DADB4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x78, context->r26));
/*800DDFB8 000DADB8*/ PPC::Runtime::ASM::cmpw(context->r29, context->r0);
/*800DDFBC 000DADBC*/ PPC::Runtime::ASM::blt(.L_800DDF30);
/*800DDFC0 000DADC0*/ PPC::Runtime::ASM::lis(context->r4, fn_800DDFEC @ Get_MemoryOffset_HighBit);
/*800DDFC4 000DADC4*/ PPC::Runtime::ASM::mr(context->r3, context->r26);
/*800DDFC8 000DADC8*/ PPC::Runtime::ASM::addi(context->r5, context->r4, fn_800DDFEC @ Get_MemoryOffset_LowBit);
/*800DDFCC 000DADCC*/ PPC::Runtime::ASM::mr(context->r4, context->r27);
/*800DDFD0 000DADD0*/ PPC::Runtime::ASM::bl(fn_800DD748);
/*800DDFD4 000DADD4*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x20);
/*800DDFD8 000DADD8*/ PPC::Runtime::ASM::bl(_restgpr_26);
/*800DDFDC 000DADDC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800DDFE0 000DADE0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800DDFE4 000DADE4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800DDFE8 000DADE8*/ PPC::Runtime::ASM::blr();
}