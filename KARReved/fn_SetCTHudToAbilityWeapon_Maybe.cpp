//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801C7FA8.hpp"



void fn_SetCTHudToAbilityWeapon_Maybe(PPC::Runtime::GCContext* context)
{
/*801A7D00 001A4B00*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*801A7D04 001A4B04*/ PPC::Runtime::ASM::mflr(context->r0);
/*801A7D08 001A4B08*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801A7D0C 001A4B0C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801A7D10 001A4B10*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801A7D14 001A4B14*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3f4, context->r3));
/*801A7D18 001A4B18*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*801A7D1C 001A4B1C*/ PPC::Runtime::ASM::beq(.L_801A7D5C);
/*801A7D20 001A4B20*/ PPC::Runtime::ASM::bl(fn_801C7FA8);
/*801A7D24 001A4B24*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38c, context->r31));
/*801A7D28 001A4B28*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x91c, context->r31));
/*801A7D2C 001A4B2C*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x164, context->r3));
/*801A7D30 001A4B30*/ PPC::Runtime::ASM::fmuls(context->f0, context->f1, context->f0);
/*801A7D34 001A4B34*/ PPC::Runtime::ASM::fctiwz(context->f0, context->f0);
/*801A7D38 001A4B38*/ PPC::Runtime::ASM::stfd(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801A7D3C 001A4B3C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801A7D40 001A4B40*/ PPC::Runtime::ASM::subf(context->r0, context->r3, context->r0);
/*801A7D44 001A4B44*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x91c, context->r31));
/*801A7D48 001A4B48*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x91c, context->r31));
/*801A7D4C 001A4B4C*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*801A7D50 001A4B50*/ PPC::Runtime::ASM::bgt(.L_801A7D5C);
/*801A7D54 001A4B54*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*801A7D58 001A4B58*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x91c, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_801A7D5C, 0x801A7D5C) //this is a jump label
/*801A7D5C 001A4B5C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801A7D60 001A4B60*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801A7D64 001A4B64*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801A7D68 001A4B68*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*801A7D6C 001A4B6C*/ PPC::Runtime::ASM::blr();
}