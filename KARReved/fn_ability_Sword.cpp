//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_Rider_ActionStateChange.hpp"
#include "fn_ability_ChangeSpeedometerDesign.hpp"
#include "fn_801AFF1C.hpp"
#include "fn_801AFED8.hpp"
#include "fn_801AFF1C.hpp"
#include "fn_801AFED8.hpp"
#include "fn_ability_Sword_giveHat.hpp"
#include "fn_Rider_SetModelVisibility.hpp"
#include "fn_Rider_SetUnknownFlag.hpp"



void fn_ability_Sword(PPC::Runtime::GCContext* context)
{
/*801AFD54 001ACB54*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801AFD58 001ACB58*/ PPC::Runtime::ASM::mflr(context->r0);
/*801AFD5C 001ACB5C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E14B0 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801AFD60 001ACB60*/ PPC::Runtime::ASM::li(context->r4, 0x3a);
/*801AFD64 001ACB64*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AFD68 001ACB68*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*801AFD6C 001ACB6C*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*801AFD70 001ACB70*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E14B4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801AFD74 001ACB74*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AFD78 001ACB78*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801AFD7C 001ACB7C*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801AFD80 001ACB80*/ PPC::Runtime::ASM::bl(fn_Rider_ActionStateChange);
/*801AFD84 001ACB84*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFD88 001ACB88*/ PPC::Runtime::ASM::li(context->r4, 0x3);
/*801AFD8C 001ACB8C*/ PPC::Runtime::ASM::li(context->r5, 0x1);
/*801AFD90 001ACB90*/ PPC::Runtime::ASM::bl(fn_ability_ChangeSpeedometerDesign);
/*801AFD94 001ACB94*/ PPC::Runtime::ASM::lis(context->r3, fn_801AFF1C @ Get_MemoryOffset_HighBit);
/*801AFD98 001ACB98*/ PPC::Runtime::ASM::lis(context->r4, fn_801AFED8 @ Get_MemoryOffset_HighBit);
/*801AFD9C 001ACB9C*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_801AFF1C @ Get_MemoryOffset_LowBit);
/*801AFDA0 001ACBA0*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFDA4 001ACBA4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7f8, context->r31));
/*801AFDA8 001ACBA8*/ PPC::Runtime::ASM::addi(context->r0, context->r4, fn_801AFED8 @ Get_MemoryOffset_LowBit);
/*801AFDAC 001ACBAC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7e4, context->r31));
/*801AFDB0 001ACBB0*/ PPC::Runtime::ASM::bl(fn_ability_Sword_giveHat);
/*801AFDB4 001ACBB4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFDB8 001ACBB8*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*801AFDBC 001ACBBC*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*801AFDC0 001ACBC0*/ PPC::Runtime::ASM::bl(fn_Rider_SetModelVisibility);
/*801AFDC4 001ACBC4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFDC8 001ACBC8*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*801AFDCC 001ACBCC*/ PPC::Runtime::ASM::bl(fn_Rider_SetUnknownFlag);
/*801AFDD0 001ACBD0*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x9f4, context->r31));
/*801AFDD4 001ACBD4*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*801AFDD8 001ACBD8*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r3, 7, 24, 24);
/*801AFDDC 001ACBDC*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x9f4, context->r31));
/*801AFDE0 001ACBE0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AFDE4 001ACBE4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AFDE8 001ACBE8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801AFDEC 001ACBEC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801AFDF0 001ACBF0*/ PPC::Runtime::ASM::blr();
}