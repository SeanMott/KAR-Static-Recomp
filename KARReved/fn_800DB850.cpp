//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800550F4.hpp"
#include "fn_800550BC.hpp"



void fn_800DB850(PPC::Runtime::GCContext* context)
{
/*800DB850 000D8650*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800DB854 000D8654*/ PPC::Runtime::ASM::mflr(context->r0);
/*800DB858 000D8658*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800DB85C 000D865C*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800DB860 000D8660*/ PPC::Runtime::ASM::fmr(context->f31, context->f2);
/*800DB864 000D8664*/ PPC::Runtime::ASM::stfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800DB868 000D8668*/ PPC::Runtime::ASM::fmr(context->f30, context->f1);
/*800DB86C 000D866C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800DB870 000D8670*/ PPC::Runtime::ASM::mr(context->r31, context->r7);
/*800DB874 000D8674*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800DB878 000D8678*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800DB87C 000D867C*/ PPC::Runtime::ASM::bl(fn_HSD_JObjAddAnimAll);
/*800DB880 000D8680*/ PPC::Runtime::ASM::fmr(context->f1, context->f31);
/*800DB884 000D8684*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800DB888 000D8688*/ PPC::Runtime::ASM::bl(fn_HSD_JObjReqAnim);
/*800DB88C 000D868C*/ PPC::Runtime::ASM::cmpwi(context->r31, 0x0);
/*800DB890 000D8690*/ PPC::Runtime::ASM::beq(.L_800DB8A4);
/*800DB894 000D8694*/ PPC::Runtime::ASM::lis(context->r4, 0x1);
/*800DB898 000D8698*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800DB89C 000D869C*/ PPC::Runtime::ASM::subi(context->r4, context->r4, 0x1);
/*800DB8A0 000D86A0*/ PPC::Runtime::ASM::bl(fn_800550F4);
RUNTIME_PPC_JUMP_LABEL(.L_800DB8A4, 0x800DB8A4) //this is a jump label
/*800DB8A4 000D86A4*/ PPC::Runtime::ASM::fmr(context->f1, context->f30);
/*800DB8A8 000D86A8*/ PPC::Runtime::ASM::lis(context->r4, 0x1);
/*800DB8AC 000D86AC*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800DB8B0 000D86B0*/ PPC::Runtime::ASM::subi(context->r4, context->r4, 0x1);
/*800DB8B4 000D86B4*/ PPC::Runtime::ASM::bl(fn_800550BC);
/*800DB8B8 000D86B8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800DB8BC 000D86BC*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800DB8C0 000D86C0*/ PPC::Runtime::ASM::lfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800DB8C4 000D86C4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800DB8C8 000D86C8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800DB8CC 000D86CC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800DB8D0 000D86D0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800DB8D4 000D86D4*/ PPC::Runtime::ASM::blr();
}