//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800EA084.hpp"
#include "fn_800EA084.hpp"



void fn_800FE204(PPC::Runtime::GCContext* context)
{
/*800FE204 000FB004*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800FE208 000FB008*/ PPC::Runtime::ASM::mflr(context->r0);
/*800FE20C 000FB00C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FE210 000FB010*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800FE214 000FB014*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800FE218 000FB018*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FE21C 000FB01C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800FE220 000FB020*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x140, context->r29));
/*800FE224 000FB024*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800FE228 000FB028*/ PPC::Runtime::ASM::beq(.L_800FE270);
/*800FE22C 000FB02C*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*800FE230 000FB030*/ PPC::Runtime::ASM::li(context->r31, 0x0);
/*800FE234 000FB034*/ PPC::Runtime::ASM::b(.L_800FE264);
RUNTIME_PPC_JUMP_LABEL(.L_800FE238, 0x800FE238) //this is a jump label
/*800FE238 000FB038*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x140, context->r29));
/*800FE23C 000FB03C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x150, context->r29));
/*800FE240 000FB040*/ PPC::Runtime::ASM::add(context->r4, context->r0, context->r31);
/*800FE244 000FB044*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*800FE248 000FB048*/ PPC::Runtime::ASM::cmpw(context->r3, context->r0);
/*800FE24C 000FB04C*/ PPC::Runtime::ASM::bne(.L_800FE25C);
/*800FE250 000FB050*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*800FE254 000FB054*/ PPC::Runtime::ASM::addi(context->r3, context->r29, 0x118);
/*800FE258 000FB058*/ PPC::Runtime::ASM::bl(fn_800EA084);
RUNTIME_PPC_JUMP_LABEL(.L_800FE25C, 0x800FE25C) //this is a jump label
/*800FE25C 000FB05C*/ PPC::Runtime::ASM::addi(context->r31, context->r31, 0xc);
/*800FE260 000FB060*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800FE264, 0x800FE264) //this is a jump label
/*800FE264 000FB064*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x144, context->r29));
/*800FE268 000FB068*/ PPC::Runtime::ASM::cmpw(context->r30, context->r0);
/*800FE26C 000FB06C*/ PPC::Runtime::ASM::blt(.L_800FE238);
RUNTIME_PPC_JUMP_LABEL(.L_800FE270, 0x800FE270) //this is a jump label
/*800FE270 000FB070*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x148, context->r29));
/*800FE274 000FB074*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800FE278 000FB078*/ PPC::Runtime::ASM::beq(.L_800FE2C0);
/*800FE27C 000FB07C*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*800FE280 000FB080*/ PPC::Runtime::ASM::mr(context->r31, context->r30);
/*800FE284 000FB084*/ PPC::Runtime::ASM::b(.L_800FE2B4);
RUNTIME_PPC_JUMP_LABEL(.L_800FE288, 0x800FE288) //this is a jump label
/*800FE288 000FB088*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x148, context->r29));
/*800FE28C 000FB08C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x150, context->r29));
/*800FE290 000FB090*/ PPC::Runtime::ASM::add(context->r4, context->r0, context->r31);
/*800FE294 000FB094*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*800FE298 000FB098*/ PPC::Runtime::ASM::cmpw(context->r3, context->r0);
/*800FE29C 000FB09C*/ PPC::Runtime::ASM::bne(.L_800FE2AC);
/*800FE2A0 000FB0A0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*800FE2A4 000FB0A4*/ PPC::Runtime::ASM::addi(context->r3, context->r29, 0x118);
/*800FE2A8 000FB0A8*/ PPC::Runtime::ASM::bl(fn_800EA084);
RUNTIME_PPC_JUMP_LABEL(.L_800FE2AC, 0x800FE2AC) //this is a jump label
/*800FE2AC 000FB0AC*/ PPC::Runtime::ASM::addi(context->r31, context->r31, 0xc);
/*800FE2B0 000FB0B0*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800FE2B4, 0x800FE2B4) //this is a jump label
/*800FE2B4 000FB0B4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14c, context->r29));
/*800FE2B8 000FB0B8*/ PPC::Runtime::ASM::cmpw(context->r30, context->r0);
/*800FE2BC 000FB0BC*/ PPC::Runtime::ASM::blt(.L_800FE288);
RUNTIME_PPC_JUMP_LABEL(.L_800FE2C0, 0x800FE2C0) //this is a jump label
/*800FE2C0 000FB0C0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FE2C4 000FB0C4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800FE2C8 000FB0C8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800FE2CC 000FB0CC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FE2D0 000FB0D0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800FE2D4 000FB0D4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800FE2D8 000FB0D8*/ PPC::Runtime::ASM::blr();
}