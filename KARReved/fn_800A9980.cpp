//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_loadGlobalDeadLocations?.hpp"
#include "fn_8009908C.hpp"
#include "fn_800A1680.hpp"



void fn_800A9980(PPC::Runtime::GCContext* context)
{
/*800A9980 000A6780*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x40, context->r1));
/*800A9984 000A6784*/ PPC::Runtime::ASM::mflr(context->r0);
/*800A9988 000A6788*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r1));
/*800A998C 000A678C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3c, context->r1));
/*800A9990 000A6790*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r1));
/*800A9994 000A6794*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800A9998 000A6798*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r1));
/*800A999C 000A679C*/ PPC::Runtime::ASM::mr(context->r28, context->r4);
/*800A99A0 000A67A0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800A99A4 000A67A4*/ PPC::Runtime::ASM::lis(context->r3, lbl_80553E50 @ Get_MemoryOffset_HighBit);
/*800A99A8 000A67A8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_80553E50 @ Get_MemoryOffset_LowBit);
/*800A99AC 000A67AC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800A99B0 000A67B0*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2f3c, context->r3));
/*800A99B4 000A67B4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r4));
/*800A99B8 000A67B8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c, context->r4));
/*800A99BC 000A67BC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r3));
/*800A99C0 000A67C0*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800A99C4 000A67C4*/ PPC::Runtime::ASM::beq(.L_800A99F0);
/*800A99C8 000A67C8*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*800A99CC 000A67CC*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x20);
/*800A99D0 000A67D0*/ PPC::Runtime::ASM::addi(context->r5, context->r1, 0x14);
/*800A99D4 000A67D4*/ PPC::Runtime::ASM::addi(context->r6, context->r1, 0x8);
/*800A99D8 000A67D8*/ PPC::Runtime::ASM::bl(fn_loadGlobalDeadLocations?);
/*800A99DC 000A67DC*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*800A99E0 000A67E0*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x20);
/*800A99E4 000A67E4*/ PPC::Runtime::ASM::addi(context->r5, context->r1, 0x14);
/*800A99E8 000A67E8*/ PPC::Runtime::ASM::addi(context->r6, context->r1, 0x8);
/*800A99EC 000A67EC*/ PPC::Runtime::ASM::bl(fn_8009908C);
RUNTIME_PPC_JUMP_LABEL(.L_800A99F0, 0x800A99F0) //this is a jump label
/*800A99F0 000A67F0*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*800A99F4 000A67F4*/ PPC::Runtime::ASM::beq(.L_800A9A14);
/*800A99F8 000A67F8*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*800A99FC 000A67FC*/ PPC::Runtime::ASM::slwi(context->r0, context->r29, 2);
/*800A9A00 000A6800*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800A9A04 000A6804*/ PPC::Runtime::ASM::mr(context->r6, context->r28);
/*800A9A08 000A6808*/ PPC::Runtime::ASM::lwzx(context->r5, context->r4, context->r0);
/*800A9A0C 000A680C*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*800A9A10 000A6810*/ PPC::Runtime::ASM::bl(fn_800A1680);
RUNTIME_PPC_JUMP_LABEL(.L_800A9A14, 0x800A9A14) //this is a jump label
/*800A9A14 000A6814*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r1));
/*800A9A18 000A6818*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3c, context->r1));
/*800A9A1C 000A681C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r1));
/*800A9A20 000A6820*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*800A9A24 000A6824*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r1));
/*800A9A28 000A6828*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800A9A2C 000A682C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x40);
/*800A9A30 000A6830*/ PPC::Runtime::ASM::blr();
}