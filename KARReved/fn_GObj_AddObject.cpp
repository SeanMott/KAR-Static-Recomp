//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn___assert.hpp"



void fn_GObj_AddObject(PPC::Runtime::GCContext* context)
{
/*80429C14 00426A14*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80429C18 00426A18*/ PPC::Runtime::ASM::mflr(context->r0);
/*80429C1C 00426A1C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80429C20 00426A20*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80429C24 00426A24*/ PPC::Runtime::ASM::mr(context->r31, context->r5);
/*80429C28 00426A28*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80429C2C 00426A2C*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*80429C30 00426A30*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80429C34 00426A34*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*80429C38 00426A38*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6, context->r3));
/*80429C3C 00426A3C*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xff);
/*80429C40 00426A40*/ PPC::Runtime::ASM::beq(.L_80429C5C);
/*80429C44 00426A44*/ PPC::Runtime::ASM::lis(context->r3, lbl_80504E78 @ Get_MemoryOffset_HighBit);
/*80429C48 00426A48*/ PPC::Runtime::ASM::lis(context->r5, lbl_80504E88 @ Get_MemoryOffset_HighBit);
/*80429C4C 00426A4C*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_80504E78 @ Get_MemoryOffset_LowBit);
/*80429C50 00426A50*/ PPC::Runtime::ASM::li(context->r4, 0x2a);
/*80429C54 00426A54*/ PPC::Runtime::ASM::addi(context->r5, context->r5, lbl_80504E88 @ Get_MemoryOffset_LowBit);
/*80429C58 00426A58*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_80429C5C, 0x80429C5C) //this is a jump label
/*80429C5C 00426A5C*/ PPC::Runtime::ASM::stb(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x6, context->r29));
/*80429C60 00426A60*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r29));
/*80429C64 00426A64*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80429C68 00426A68*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80429C6C 00426A6C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80429C70 00426A70*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80429C74 00426A74*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80429C78 00426A78*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80429C7C 00426A7C*/ PPC::Runtime::ASM::blr();
}