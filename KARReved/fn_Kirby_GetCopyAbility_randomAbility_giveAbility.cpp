//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_removeAbilityUponGettingAbility.hpp"
#include "fn_801915C4.hpp"
#include "fn_8022EE00.hpp"



void fn_Kirby_GetCopyAbility_randomAbility_giveAbility(PPC::Runtime::GCContext* context)
{
/*801A61D4 001A2FD4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*801A61D8 001A2FD8*/ PPC::Runtime::ASM::mflr(context->r0);
/*801A61DC 001A2FDC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801A61E0 001A2FE0*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801A61E4 001A2FE4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801A61E8 001A2FE8*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801A61EC 001A2FEC*/ PPC::Runtime::ASM::mr(context->r29, context->r4);
/*801A61F0 001A2FF0*/ PPC::Runtime::ASM::cmpwi(context->r29, -0x1);
/*801A61F4 001A2FF4*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*801A61F8 001A2FF8*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*801A61FC 001A2FFC*/ PPC::Runtime::ASM::beq(.L_801A6248);
/*801A6200 001A3000*/ PPC::Runtime::ASM::lis(context->r4, lbl_804AF4F0 @ Get_MemoryOffset_HighBit);
/*801A6204 001A3004*/ PPC::Runtime::ASM::slwi(context->r30, context->r29, 2);
/*801A6208 001A3008*/ PPC::Runtime::ASM::addi(context->r31, context->r4, lbl_804AF4F0 @ Get_MemoryOffset_LowBit);
/*801A620C 001A300C*/ PPC::Runtime::ASM::lwzx(context->r0, context->r31, context->r30);
/*801A6210 001A3010*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*801A6214 001A3014*/ PPC::Runtime::ASM::beq(.L_801A6248);
/*801A6218 001A3018*/ PPC::Runtime::ASM::bl(fn_removeAbilityUponGettingAbility);
/*801A621C 001A301C*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*801A6220 001A3020*/ PPC::Runtime::ASM::bl(fn_801915C4);
/*801A6224 001A3024*/ PPC::Runtime::ASM::lbz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r28));
/*801A6228 001A3028*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*801A622C 001A302C*/ PPC::Runtime::ASM::bl(fn_8022EE00);
/*801A6230 001A3030*/ PPC::Runtime::ASM::lwzx(context->r12, context->r31, context->r30);
/*801A6234 001A3034*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*801A6238 001A3038*/ PPC::Runtime::ASM::mtctr(context->r12);
/*801A623C 001A303C*/ PPC::Runtime::ASM::bctrl();
/*801A6240 001A3040*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*801A6244 001A3044*/ PPC::Runtime::ASM::b(.L_801A624C);
RUNTIME_PPC_JUMP_LABEL(.L_801A6248, 0x801A6248) //this is a jump label
/*801A6248 001A3048*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_801A624C, 0x801A624C) //this is a jump label
/*801A624C 001A304C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*801A6250 001A3050*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801A6254 001A3054*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801A6258 001A3058*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801A625C 001A305C*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*801A6260 001A3060*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801A6264 001A3064*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*801A6268 001A3068*/ PPC::Runtime::ASM::blr();
}