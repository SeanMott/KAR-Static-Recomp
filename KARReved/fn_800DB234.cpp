//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800DB234(PPC::Runtime::GCContext* context)
{
/*800DB234 000D8034*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800DB238 000D8038*/ PPC::Runtime::ASM::mflr(context->r0);
/*800DB23C 000D803C*/ PPC::Runtime::ASM::mr(context->r6, context->r3);
/*800DB240 000D8040*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*800DB244 000D8044*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800DB248 000D8048*/ PPC::Runtime::ASM::li(context->r8, 0x0);
/*800DB24C 000D804C*/ PPC::Runtime::ASM::mtctr(context->r5);
/*800DB250 000D8050*/ PPC::Runtime::ASM::cmpwi(context->r5, 0x0);
/*800DB254 000D8054*/ PPC::Runtime::ASM::ble(.L_800DB290);
RUNTIME_PPC_JUMP_LABEL(.L_800DB258, 0x800DB258) //this is a jump label
/*800DB258 000D8058*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r6));
/*800DB25C 000D805C*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800DB260 000D8060*/ PPC::Runtime::ASM::bne(.L_800DB284);
/*800DB264 000D8064*/ PPC::Runtime::ASM::cmpw(context->r7, context->r4);
/*800DB268 000D8068*/ PPC::Runtime::ASM::bne(.L_800DB280);
/*800DB26C 000D806C*/ PPC::Runtime::ASM::slwi(context->r0, context->r8, 2);
/*800DB270 000D8070*/ PPC::Runtime::ASM::li(context->r4, 0x1);
/*800DB274 000D8074*/ PPC::Runtime::ASM::stwx(context->r4, context->r3, context->r0);
/*800DB278 000D8078*/ PPC::Runtime::ASM::mr(context->r3, context->r8);
/*800DB27C 000D807C*/ PPC::Runtime::ASM::b(.L_800DB2A8);
RUNTIME_PPC_JUMP_LABEL(.L_800DB280, 0x800DB280) //this is a jump label
/*800DB280 000D8080*/ PPC::Runtime::ASM::addi(context->r7, context->r7, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800DB284, 0x800DB284) //this is a jump label
/*800DB284 000D8084*/ PPC::Runtime::ASM::addi(context->r6, context->r6, 0x4);
/*800DB288 000D8088*/ PPC::Runtime::ASM::addi(context->r8, context->r8, 0x1);
/*800DB28C 000D808C*/ PPC::Runtime::ASM::bdnz(.L_800DB258);
RUNTIME_PPC_JUMP_LABEL(.L_800DB290, 0x800DB290) //this is a jump label
/*800DB290 000D8090*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_930 @ Get_MemoryOffset_HighBit);
/*800DB294 000D8094*/ PPC::Runtime::ASM::li(context->r4, 0x339);
/*800DB298 000D8098*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_930 @ Get_MemoryOffset_LowBit);
/*800DB29C 000D809C*/ PPC::Runtime::ASM::li(context->r5, lbl_805D60D0 @ Get_MemoryOffset_SDA21);
/*800DB2A0 000D80A0*/ PPC::Runtime::ASM::bl(fn___assert);
/*800DB2A4 000D80A4*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800DB2A8, 0x800DB2A8) //this is a jump label
/*800DB2A8 000D80A8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800DB2AC 000D80AC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800DB2B0 000D80B0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800DB2B4 000D80B4*/ PPC::Runtime::ASM::blr();
}