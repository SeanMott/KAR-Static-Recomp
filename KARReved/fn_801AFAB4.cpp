//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801A7BDC.hpp"
#include "fn_abilityTimer_Sword_checkIf0.hpp"
#include "fn_801AFB90.hpp"
#include "fn_abilityTimer_Sword_checkIf0.hpp"
#include "fn_801AFBB0.hpp"
#include "fn_801AFB90.hpp"
#include "fn_801AFD04.hpp"
#include "fn_801AFCC0.hpp"
#include "fn_801AFBB0.hpp"
#include "fn_801AFD04.hpp"
#include "fn_801AFCC0.hpp"
#include "fn_801AFF3C.hpp"



void fn_801AFAB4(PPC::Runtime::GCContext* context)
{
/*801AFAB4 001AC8B4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801AFAB8 001AC8B8*/ PPC::Runtime::ASM::mflr(context->r0);
/*801AFABC 001AC8BC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AFAC0 001AC8C0*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AFAC4 001AC8C4*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801AFAC8 001AC8C8*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38c, context->r3));
/*801AFACC 001AC8CC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1b4, context->r4));
/*801AFAD0 001AC8D0*/ PPC::Runtime::ASM::bl(fn_801A7BDC);
/*801AFAD4 001AC8D4*/ PPC::Runtime::ASM::lis(context->r4, fn_abilityTimer_Sword_checkIf0 @ Get_MemoryOffset_HighBit);
/*801AFAD8 001AC8D8*/ PPC::Runtime::ASM::lis(context->r3, fn_801AFB90 @ Get_MemoryOffset_HighBit);
/*801AFADC 001AC8DC*/ PPC::Runtime::ASM::addi(context->r0, context->r4, fn_abilityTimer_Sword_checkIf0 @ Get_MemoryOffset_LowBit);
/*801AFAE0 001AC8E0*/ PPC::Runtime::ASM::lis(context->r5, fn_801AFBB0 @ Get_MemoryOffset_HighBit);
/*801AFAE4 001AC8E4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x92c, context->r31));
/*801AFAE8 001AC8E8*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_801AFB90 @ Get_MemoryOffset_LowBit);
/*801AFAEC 001AC8EC*/ PPC::Runtime::ASM::lis(context->r4, fn_801AFD04 @ Get_MemoryOffset_HighBit);
/*801AFAF0 001AC8F0*/ PPC::Runtime::ASM::lis(context->r3, fn_801AFCC0 @ Get_MemoryOffset_HighBit);
/*801AFAF4 001AC8F4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x934, context->r31));
/*801AFAF8 001AC8F8*/ PPC::Runtime::ASM::addi(context->r6, context->r5, fn_801AFBB0 @ Get_MemoryOffset_LowBit);
/*801AFAFC 001AC8FC*/ PPC::Runtime::ASM::addi(context->r5, context->r4, fn_801AFD04 @ Get_MemoryOffset_LowBit);
/*801AFB00 001AC900*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_801AFCC0 @ Get_MemoryOffset_LowBit);
/*801AFB04 001AC904*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x938, context->r31));
/*801AFB08 001AC908*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AFB0C 001AC90C*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*801AFB10 001AC910*/ PPC::Runtime::ASM::stw(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7fc, context->r31));
/*801AFB14 001AC914*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7e8, context->r31));
/*801AFB18 001AC918*/ PPC::Runtime::ASM::bl(fn_801AFF3C);
/*801AFB1C 001AC91C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AFB20 001AC920*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AFB24 001AC924*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801AFB28 001AC928*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801AFB2C 001AC92C*/ PPC::Runtime::ASM::blr();
}