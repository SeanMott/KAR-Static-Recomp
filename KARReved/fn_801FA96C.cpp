//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_chargeLogic?.hpp"
#include "fn_801CA294.hpp"
#include "fn_801E3B80.hpp"



void fn_801FA96C(PPC::Runtime::GCContext* context)
{
/*801FA96C 001F776C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801FA970 001F7770*/ PPC::Runtime::ASM::mflr(context->r0);
/*801FA974 001F7774*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E21D4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801FA978 001F7778*/ PPC::Runtime::ASM::li(context->r4, 0x15);
/*801FA97C 001F777C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801FA980 001F7780*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*801FA984 001F7784*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E21D8 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801FA988 001F7788*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801FA98C 001F778C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801FA990 001F7790*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801FA994 001F7794*/ PPC::Runtime::ASM::bl(fn_chargeLogic?);
/*801FA998 001F7798*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r31));
/*801FA99C 001F779C*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*801FA9A0 001F77A0*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r3, 0, 31, 31);
/*801FA9A4 001F77A4*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r31));
/*801FA9A8 001F77A8*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc35, context->r31));
/* 801FA9AC 001F77AC  54 00 07 FF */ clrlwi. context->r0 , context->r0 , 31
/*801FA9B0 001F77B0*/ PPC::Runtime::ASM::bne(.L_801FA9BC);
/*801FA9B4 001F77B4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801FA9B8 001F77B8*/ PPC::Runtime::ASM::bl(fn_801CA294);
RUNTIME_PPC_JUMP_LABEL(.L_801FA9BC, 0x801FA9BC) //this is a jump label
/*801FA9BC 001F77BC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801FA9C0 001F77C0*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*801FA9C4 001F77C4*/ PPC::Runtime::ASM::bl(fn_801E3B80);
/*801FA9C8 001F77C8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801FA9CC 001F77CC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801FA9D0 001F77D0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801FA9D4 001F77D4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801FA9D8 001F77D8*/ PPC::Runtime::ASM::blr();
}