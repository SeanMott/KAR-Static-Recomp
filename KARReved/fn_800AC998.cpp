//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800AB9B4.hpp"
#include "fn_800AC8CC.hpp"
#include "fn_800AC8CC.hpp"



void fn_800AC998(PPC::Runtime::GCContext* context)
{
/*800AC998 000A9798*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800AC99C 000A979C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800AC9A0 000A97A0*/ PPC::Runtime::ASM::lis(context->r4, lbl_80557060 @ Get_MemoryOffset_HighBit);
/*800AC9A4 000A97A4*/ PPC::Runtime::ASM::li(context->r5, 0x4);
/*800AC9A8 000A97A8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800AC9AC 000A97AC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800AC9B0 000A97B0*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800AC9B4 000A97B4*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800AC9B8 000A97B8*/ PPC::Runtime::ASM::addi(context->r3, context->r4, lbl_80557060 @ Get_MemoryOffset_LowBit);
/*800AC9BC 000A97BC*/ PPC::Runtime::ASM::li(context->r4, 0x20);
/*800AC9C0 000A97C0*/ PPC::Runtime::ASM::bl(fn_HSD_ObjAllocInit);
/*800AC9C4 000A97C4*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*800AC9C8 000A97C8*/ PPC::Runtime::ASM::stw(context->r0, STRUCT_BYTE4_COUNT_1805DD6A4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800AC9CC 000A97CC*/ PPC::Runtime::ASM::bl(fn_800AB9B4);
/* 800AC9D0 000A97D0  7C 7F 1B 79 */ mr. context->r31 , context->r3
/*800AC9D4 000A97D4*/ PPC::Runtime::ASM::beq(.L_800AC9E8);
/*800AC9D8 000A97D8*/ PPC::Runtime::ASM::lis(context->r4, fn_800AC8CC @ Get_MemoryOffset_HighBit);
/*800AC9DC 000A97DC*/ PPC::Runtime::ASM::clrlwi(context->r5, context->r30, 24);
/*800AC9E0 000A97E0*/ PPC::Runtime::ASM::addi(context->r4, context->r4, fn_800AC8CC @ Get_MemoryOffset_LowBit);
/*800AC9E4 000A97E4*/ PPC::Runtime::ASM::bl(fn_804288A4);
RUNTIME_PPC_JUMP_LABEL(.L_800AC9E8, 0x800AC9E8) //this is a jump label
/*800AC9E8 000A97E8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800AC9EC 000A97EC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800AC9F0 000A97F0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800AC9F4 000A97F4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800AC9F8 000A97F8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800AC9FC 000A97FC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800ACA00 000A9800*/ PPC::Runtime::ASM::blr();
}