//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E2C84(PPC::Runtime::GCContext* context)
{
/*800E2C84 000DFA84*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E2C88 000DFA88*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E2C8C 000DFA8C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E2C90 000DFA90*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E2C94 000DFA94*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E2C98 000DFA98*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E2C9C 000DFA9C*/ PPC::Runtime::ASM::mr(context->r29, context->r4);
/*800E2CA0 000DFAA0*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E2CA4 000DFAA4*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*800E2CA8 000DFAA8*/ PPC::Runtime::ASM::lis(context->r3, STRUCT_FLOAT_4 @ Get_MemoryOffset_HighBit);
/*800E2CAC 000DFAAC*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r28));
/*800E2CB0 000DFAB0*/ PPC::Runtime::ASM::addi(context->r31, context->r3, STRUCT_FLOAT_4 @ Get_MemoryOffset_LowBit);
/*800E2CB4 000DFAB4*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*800E2CB8 000DFAB8*/ PPC::Runtime::ASM::bne(.L_800E2CCC);
/*800E2CBC 000DFABC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x48);
/*800E2CC0 000DFAC0*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x54);
/*800E2CC4 000DFAC4*/ PPC::Runtime::ASM::li(context->r4, 0x1d);
/*800E2CC8 000DFAC8*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E2CCC, 0x800E2CCC) //this is a jump label
/*800E2CCC 000DFACC*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x0);
/*800E2CD0 000DFAD0*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800E2CD4 000DFAD4*/ PPC::Runtime::ASM::blt(.L_800E2CE8);
/*800E2CD8 000DFAD8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E2CDC 000DFADC*/ PPC::Runtime::ASM::cmpw(context->r29, context->r0);
/*800E2CE0 000DFAE0*/ PPC::Runtime::ASM::bge(.L_800E2CE8);
/*800E2CE4 000DFAE4*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E2CE8, 0x800E2CE8) //this is a jump label
/*800E2CE8 000DFAE8*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800E2CEC 000DFAEC*/ PPC::Runtime::ASM::bne(.L_800E2D00);
/*800E2CF0 000DFAF0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x48);
/*800E2CF4 000DFAF4*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x60);
/*800E2CF8 000DFAF8*/ PPC::Runtime::ASM::li(context->r4, 0x1e);
/*800E2CFC 000DFAFC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E2D00, 0x800E2D00) //this is a jump label
/*800E2D00 000DFB00*/ PPC::Runtime::ASM::mulli(context->r3, context->r29, 0x1c);
/*800E2D04 000DFB04*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x120, context->r28));
/*800E2D08 000DFB08*/ PPC::Runtime::ASM::addi(context->r0, context->r3, 0x18);
/*800E2D0C 000DFB0C*/ PPC::Runtime::ASM::lbzx(context->r0, context->r4, context->r0);
/*800E2D10 000DFB10*/ PPC::Runtime::ASM::extrwi(context->r3, context->r0, 1, 24);
/*800E2D14 000DFB14*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E2D18 000DFB18*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E2D1C 000DFB1C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E2D20 000DFB20*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E2D24 000DFB24*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E2D28 000DFB28*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E2D2C 000DFB2C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E2D30 000DFB30*/ PPC::Runtime::ASM::blr();
}