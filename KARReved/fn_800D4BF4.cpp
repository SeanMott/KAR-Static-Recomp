//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800D4BF4(PPC::Runtime::GCContext* context)
{
/*800D4BF4 000D19F4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800D4BF8 000D19F8*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D4BFC 000D19FC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D4C00 000D1A00*/ PPC::Runtime::ASM::slwi(context->r0, context->r3, 3);
/*800D4C04 000D1A04*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D4C08 000D1A08*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D4C0C 000D1A0C*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*800D4C10 000D1A10*/ PPC::Runtime::ASM::lwz(context->r5, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800D4C14 000D1A14*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x104, context->r5));
/*800D4C18 000D1A18*/ PPC::Runtime::ASM::lwzx(context->r31, context->r3, context->r0);
/*800D4C1C 000D1A1C*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*800D4C20 000D1A20*/ PPC::Runtime::ASM::bne(.L_800D4C34);
/*800D4C24 000D1A24*/ PPC::Runtime::ASM::li(context->r3, lbl_805D609C @ Get_MemoryOffset_SDA21);
/*800D4C28 000D1A28*/ PPC::Runtime::ASM::li(context->r4, 0x47c);
/*800D4C2C 000D1A2C*/ PPC::Runtime::ASM::li(context->r5, lbl_805D60A4 @ Get_MemoryOffset_SDA21);
/*800D4C30 000D1A30*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800D4C34, 0x800D4C34) //this is a jump label
/*800D4C34 000D1A34*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*800D4C38 000D1A38*/ PPC::Runtime::ASM::beq(.L_800D4C7C);
/*800D4C3C 000D1A3C*/ PPC::Runtime::ASM::bne(.L_800D4C50);
/*800D4C40 000D1A40*/ PPC::Runtime::ASM::li(context->r3, lbl_805D609C @ Get_MemoryOffset_SDA21);
/*800D4C44 000D1A44*/ PPC::Runtime::ASM::li(context->r4, 0x25d);
/*800D4C48 000D1A48*/ PPC::Runtime::ASM::li(context->r5, lbl_805D60A4 @ Get_MemoryOffset_SDA21);
/*800D4C4C 000D1A4C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800D4C50, 0x800D4C50) //this is a jump label
/*800D4C50 000D1A50*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r31));
/*800D4C54 000D1A54*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800D4C58 000D1A58*/ PPC::Runtime::ASM::rlwinm.(context->r0, context->r4, 0, 8, 8);
/*800D4C5C 000D1A5C*/ PPC::Runtime::ASM::bne(.L_800D4C6C);
/*800D4C60 000D1A60*/ PPC::Runtime::ASM::rlwinm.(context->r0, context->r4, 0, 25, 25);
/*800D4C64 000D1A64*/ PPC::Runtime::ASM::beq(.L_800D4C6C);
/*800D4C68 000D1A68*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800D4C6C, 0x800D4C6C) //this is a jump label
/*800D4C6C 000D1A6C*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800D4C70 000D1A70*/ PPC::Runtime::ASM::beq(.L_800D4C7C);
/*800D4C74 000D1A74*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800D4C78 000D1A78*/ PPC::Runtime::ASM::bl(fn_HSD_JObjSetupMatrixSub);
RUNTIME_PPC_JUMP_LABEL(.L_800D4C7C, 0x800D4C7C) //this is a jump label
/*800D4C7C 000D1A7C*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800D4C80 000D1A80*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x44);
/*800D4C84 000D1A84*/ PPC::Runtime::ASM::bl(fn_HSD_MtxGetTranslate);
/*800D4C88 000D1A88*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D4C8C 000D1A8C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D4C90 000D1A90*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D4C94 000D1A94*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D4C98 000D1A98*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800D4C9C 000D1A9C*/ PPC::Runtime::ASM::blr();
}