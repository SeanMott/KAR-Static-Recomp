//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E9958(PPC::Runtime::GCContext* context)
{
/*800E9958 000E6758*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E995C 000E675C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E9960 000E6760*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E9964 000E6764*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E9968 000E6768*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E996C 000E676C*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*800E9970 000E6770*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E9974 000E6774*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*800E9978 000E6778*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_960 @ Get_MemoryOffset_HighBit);
/*800E997C 000E677C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E9980 000E6780*/ PPC::Runtime::ASM::addi(context->r31, context->r3, MemoryOffset_960 @ Get_MemoryOffset_LowBit);
/*800E9984 000E6784*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800E9988 000E6788*/ PPC::Runtime::ASM::bne(.L_800E999C);
/*800E998C 000E678C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E9990 000E6790*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x38);
/*800E9994 000E6794*/ PPC::Runtime::ASM::li(context->r4, 0x113);
/*800E9998 000E6798*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E999C, 0x800E999C) //this is a jump label
/*800E999C 000E679C*/ PPC::Runtime::ASM::li(context->r0, -0x1);
/*800E99A0 000E67A0*/ PPC::Runtime::ASM::xor(context->r0, context->r30, context->r0);
/*800E99A4 000E67A4*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*800E99A8 000E67A8*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r30);
/*800E99AC 000E67AC*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/* 800E99B0 000E67B0  54 00 0F FF */ srwi. context->r0 , context->r0 , 31
/*800E99B4 000E67B4*/ PPC::Runtime::ASM::beq(.L_800E99E4);
/*800E99B8 000E67B8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E99BC 000E67BC*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800E99C0 000E67C0*/ PPC::Runtime::ASM::beq(.L_800E99CC);
/*800E99C4 000E67C4*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*800E99C8 000E67C8*/ PPC::Runtime::ASM::b(.L_800E99D0);
RUNTIME_PPC_JUMP_LABEL(.L_800E99CC, 0x800E99CC) //this is a jump label
/*800E99CC 000E67CC*/ PPC::Runtime::ASM::li(context->r4, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800E99D0, 0x800E99D0) //this is a jump label
/*800E99D0 000E67D0*/ PPC::Runtime::ASM::xor(context->r0, context->r4, context->r30);
/*800E99D4 000E67D4*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*800E99D8 000E67D8*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r4);
/*800E99DC 000E67DC*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/*800E99E0 000E67E0*/ PPC::Runtime::ASM::srwi(context->r0, context->r0, 31);
RUNTIME_PPC_JUMP_LABEL(.L_800E99E4, 0x800E99E4) //this is a jump label
/*800E99E4 000E67E4*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800E99E8 000E67E8*/ PPC::Runtime::ASM::bne(.L_800E9A0C);
/*800E99EC 000E67EC*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800E99F0 000E67F0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x48);
/*800E99F4 000E67F4*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800E99F8 000E67F8*/ PPC::Runtime::ASM::bl(OSReport);
/*800E99FC 000E67FC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E9A00 000E6800*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E9A04 000E6804*/ PPC::Runtime::ASM::li(context->r4, 0x114);
/*800E9A08 000E6808*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E9A0C, 0x800E9A0C) //this is a jump label
/*800E9A0C 000E680C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E9A10 000E6810*/ PPC::Runtime::ASM::slwi(context->r0, context->r30, 2);
/*800E9A14 000E6814*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800E9A18 000E6818*/ PPC::Runtime::ASM::lwzx(context->r3, context->r3, context->r0);
/*800E9A1C 000E681C*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800E9A20 000E6820*/ PPC::Runtime::ASM::subfic(context->r3, context->r4, -0x1);
/*800E9A24 000E6824*/ PPC::Runtime::ASM::addi(context->r0, context->r4, 0x1);
/*800E9A28 000E6828*/ PPC::Runtime::ASM::or(context->r0, context->r3, context->r0);
/*800E9A2C 000E682C*/ PPC::Runtime::ASM::srwi(context->r3, context->r0, 31);
/*800E9A30 000E6830*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E9A34 000E6834*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E9A38 000E6838*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E9A3C 000E683C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E9A40 000E6840*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E9A44 000E6844*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E9A48 000E6848*/ PPC::Runtime::ASM::blr();
}