//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn___assert.hpp"



void fn_8041DF98(PPC::Runtime::GCContext* context)
{
/*8041DF98 0041AD98*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8041DF9C 0041AD9C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8041DFA0 0041ADA0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8041DFA4 0041ADA4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/* 8041DFA8 0041ADA8  7C 7F 1B 79 */ mr. context->r31 , context->r3
/*8041DFAC 0041ADAC*/ PPC::Runtime::ASM::bne(.L_8041DFC4);
/*8041DFB0 0041ADB0*/ PPC::Runtime::ASM::lis(context->r3, lbl_80504528 @ Get_MemoryOffset_HighBit);
/*8041DFB4 0041ADB4*/ PPC::Runtime::ASM::li(context->r4, 0x33c);
/*8041DFB8 0041ADB8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_80504528 @ Get_MemoryOffset_LowBit);
/*8041DFBC 0041ADBC*/ PPC::Runtime::ASM::li(context->r5, MemoryOffset_485 @ Get_MemoryOffset_SDA21);
/*8041DFC0 0041ADC0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_8041DFC4, 0x8041DFC4) //this is a jump label
/*8041DFC4 0041ADC4*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x50, context->r31));
/*8041DFC8 0041ADC8*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/* 8041DFCC 0041ADCC  54 00 C8 02 */ extlwi context->r0 , context->r0 , 2 , 25
/*8041DFD0 0041ADD0*/ PPC::Runtime::ASM::srawi(context->r0, context->r0, 31);
/*8041DFD4 0041ADD4*/ PPC::Runtime::ASM::extsb.(context->r0, context->r0);
/*8041DFD8 0041ADD8*/ PPC::Runtime::ASM::bne(.L_8041E000);
/*8041DFDC 0041ADDC*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x40, context->r31));
/*8041DFE0 0041ADE0*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r31));
/*8041DFE4 0041ADE4*/ PPC::Runtime::ASM::fcmpo(cr0, context->f1, context->f0);
/*8041DFE8 0041ADE8*/ PPC::Runtime::ASM::ble(.L_8041E000);
/*8041DFEC 0041ADEC*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c, context->r31));
/*8041DFF0 0041ADF0*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x48, context->r31));
/*8041DFF4 0041ADF4*/ PPC::Runtime::ASM::fcmpo(cr0, context->f1, context->f0);
/*8041DFF8 0041ADF8*/ PPC::Runtime::ASM::ble(.L_8041E000);
/*8041DFFC 0041ADFC*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_8041E000, 0x8041E000) //this is a jump label
/*8041E000 0041AE00*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8041E004 0041AE04*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8041E008 0041AE08*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8041E00C 0041AE0C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8041E010 0041AE10*/ PPC::Runtime::ASM::blr();
}