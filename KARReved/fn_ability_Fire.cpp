//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_Rider_ActionStateChange.hpp"
#include "fn_ability_ChangeSpeedometerDesign.hpp"
#include "fn_801AF618.hpp"
#include "fn_801AF618.hpp"
#include "fn_801AF5D4.hpp"
#include "fn_801AF5D4.hpp"
#include "fn_ability_Fire_giveHat.hpp"



void fn_ability_Fire(PPC::Runtime::GCContext* context)
{
/*801AF474 001AC274*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801AF478 001AC278*/ PPC::Runtime::ASM::mflr(context->r0);
/*801AF47C 001AC27C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E14A0 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801AF480 001AC280*/ PPC::Runtime::ASM::li(context->r4, 0x39);
/*801AF484 001AC284*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AF488 001AC288*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*801AF48C 001AC28C*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*801AF490 001AC290*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E14A4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801AF494 001AC294*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AF498 001AC298*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801AF49C 001AC29C*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801AF4A0 001AC2A0*/ PPC::Runtime::ASM::bl(fn_Rider_ActionStateChange);
/*801AF4A4 001AC2A4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AF4A8 001AC2A8*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*801AF4AC 001AC2AC*/ PPC::Runtime::ASM::li(context->r5, 0x1);
/*801AF4B0 001AC2B0*/ PPC::Runtime::ASM::bl(fn_ability_ChangeSpeedometerDesign);
/*801AF4B4 001AC2B4*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*801AF4B8 001AC2B8*/ PPC::Runtime::ASM::lis(context->r3, fn_801AF618 @ Get_MemoryOffset_HighBit);
/*801AF4BC 001AC2BC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3f0, context->r31));
/*801AF4C0 001AC2C0*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_801AF618 @ Get_MemoryOffset_LowBit);
/*801AF4C4 001AC2C4*/ PPC::Runtime::ASM::lis(context->r4, fn_801AF5D4 @ Get_MemoryOffset_HighBit);
/*801AF4C8 001AC2C8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801AF4CC 001AC2CC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7f8, context->r31));
/*801AF4D0 001AC2D0*/ PPC::Runtime::ASM::addi(context->r0, context->r4, fn_801AF5D4 @ Get_MemoryOffset_LowBit);
/*801AF4D4 001AC2D4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7e4, context->r31));
/*801AF4D8 001AC2D8*/ PPC::Runtime::ASM::bl(fn_ability_Fire_giveHat);
/*801AF4DC 001AC2DC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801AF4E0 001AC2E0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801AF4E4 001AC2E4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801AF4E8 001AC2E8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801AF4EC 001AC2EC*/ PPC::Runtime::ASM::blr();
}