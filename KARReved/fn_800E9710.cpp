//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E9710(PPC::Runtime::GCContext* context)
{
/*800E9710 000E6510*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E9714 000E6514*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E9718 000E6518*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E971C 000E651C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E9720 000E6520*/ PPC::Runtime::ASM::mr(context->r31, context->r4);
/*800E9724 000E6524*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E9728 000E6528*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E972C 000E652C*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*800E9730 000E6530*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_960 @ Get_MemoryOffset_HighBit);
/*800E9734 000E6534*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E9738 000E6538*/ PPC::Runtime::ASM::addi(context->r30, context->r3, MemoryOffset_960 @ Get_MemoryOffset_LowBit);
/*800E973C 000E653C*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800E9740 000E6540*/ PPC::Runtime::ASM::bne(.L_800E9754);
/*800E9744 000E6544*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x0);
/*800E9748 000E6548*/ PPC::Runtime::ASM::addi(context->r5, context->r30, 0x38);
/*800E974C 000E654C*/ PPC::Runtime::ASM::li(context->r4, 0x113);
/*800E9750 000E6550*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E9754, 0x800E9754) //this is a jump label
/*800E9754 000E6554*/ PPC::Runtime::ASM::li(context->r0, -0x1);
/*800E9758 000E6558*/ PPC::Runtime::ASM::xor(context->r0, context->r31, context->r0);
/*800E975C 000E655C*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*800E9760 000E6560*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r31);
/*800E9764 000E6564*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/* 800E9768 000E6568  54 00 0F FF */ srwi. context->r0 , context->r0 , 31
/*800E976C 000E656C*/ PPC::Runtime::ASM::beq(.L_800E979C);
/*800E9770 000E6570*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E9774 000E6574*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800E9778 000E6578*/ PPC::Runtime::ASM::beq(.L_800E9784);
/*800E977C 000E657C*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*800E9780 000E6580*/ PPC::Runtime::ASM::b(.L_800E9788);
RUNTIME_PPC_JUMP_LABEL(.L_800E9784, 0x800E9784) //this is a jump label
/*800E9784 000E6584*/ PPC::Runtime::ASM::li(context->r4, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800E9788, 0x800E9788) //this is a jump label
/*800E9788 000E6588*/ PPC::Runtime::ASM::xor(context->r0, context->r4, context->r31);
/*800E978C 000E658C*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*800E9790 000E6590*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r4);
/*800E9794 000E6594*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/*800E9798 000E6598*/ PPC::Runtime::ASM::srwi(context->r0, context->r0, 31);
RUNTIME_PPC_JUMP_LABEL(.L_800E979C, 0x800E979C) //this is a jump label
/*800E979C 000E659C*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800E97A0 000E65A0*/ PPC::Runtime::ASM::bne(.L_800E97C4);
/*800E97A4 000E65A4*/ PPC::Runtime::ASM::mr(context->r4, context->r31);
/*800E97A8 000E65A8*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x48);
/*800E97AC 000E65AC*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800E97B0 000E65B0*/ PPC::Runtime::ASM::bl(OSReport);
/*800E97B4 000E65B4*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x0);
/*800E97B8 000E65B8*/ PPC::Runtime::ASM::addi(context->r5, context->r30, 0x58);
/*800E97BC 000E65BC*/ PPC::Runtime::ASM::li(context->r4, 0x114);
/*800E97C0 000E65C0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E97C4, 0x800E97C4) //this is a jump label
/*800E97C4 000E65C4*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E97C8 000E65C8*/ PPC::Runtime::ASM::slwi(context->r0, context->r31, 2);
/*800E97CC 000E65CC*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800E97D0 000E65D0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*800E97D4 000E65D4*/ PPC::Runtime::ASM::lwzx(context->r4, context->r4, context->r0);
/*800E97D8 000E65D8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r4));
/*800E97DC 000E65DC*/ PPC::Runtime::ASM::cmpwi(context->r0, -0x1);
/*800E97E0 000E65E0*/ PPC::Runtime::ASM::beq(.L_800E97F0);
/*800E97E4 000E65E4*/ PPC::Runtime::ASM::cmpw(context->r31, context->r0);
/*800E97E8 000E65E8*/ PPC::Runtime::ASM::ble(.L_800E97F0);
/*800E97EC 000E65EC*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E97F0, 0x800E97F0) //this is a jump label
/*800E97F0 000E65F0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E97F4 000E65F4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E97F8 000E65F8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E97FC 000E65FC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E9800 000E6600*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E9804 000E6604*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E9808 000E6608*/ PPC::Runtime::ASM::blr();
}