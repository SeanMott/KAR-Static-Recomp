//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E7488(PPC::Runtime::GCContext* context)
{
/*800E7488 000E4288*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E748C 000E428C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E7490 000E4290*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7494 000E4294*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7498 000E4298*/ PPC::Runtime::ASM::fmr(context->f31, context->f2);
/*800E749C 000E429C*/ PPC::Runtime::ASM::stfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E74A0 000E42A0*/ PPC::Runtime::ASM::fmr(context->f30, context->f1);
/*800E74A4 000E42A4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E74A8 000E42A8*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E74AC 000E42AC*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E74B0 000E42B0*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E74B4 000E42B4*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E74B8 000E42B8*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E74BC 000E42BC*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E74C0 000E42C0*/ PPC::Runtime::ASM::beq(.L_800E74D4);
/*800E74C4 000E42C4*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E74C8 000E42C8*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E74CC 000E42CC*/ PPC::Runtime::ASM::li(context->r4, 0x179);
/*800E74D0 000E42D0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E74D4, 0x800E74D4) //this is a jump label
/*800E74D4 000E42D4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E74D8 000E42D8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E74DC 000E42DC*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x1);
/*800E74E0 000E42E0*/ PPC::Runtime::ASM::beq(.L_800E74F4);
/*800E74E4 000E42E4*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E74E8 000E42E8*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xb0);
/*800E74EC 000E42EC*/ PPC::Runtime::ASM::li(context->r4, 0x17d);
/*800E74F0 000E42F0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E74F4, 0x800E74F4) //this is a jump label
/*800E74F4 000E42F4*/ PPC::Runtime::ASM::stfs(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*800E74F8 000E42F8*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*800E74FC 000E42FC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7500 000E4300*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7504 000E4304*/ PPC::Runtime::ASM::lfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7508 000E4308*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E750C 000E430C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E7510 000E4310*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E7514 000E4314*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E7518 000E4318*/ PPC::Runtime::ASM::blr();
}