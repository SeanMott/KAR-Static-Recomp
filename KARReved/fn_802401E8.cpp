//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8023F4E4.hpp"
#include "fn_8023F4E4.hpp"



void fn_802401E8(PPC::Runtime::GCContext* context)
{
/*802401E8 0023CFE8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*802401EC 0023CFEC*/ PPC::Runtime::ASM::mflr(context->r0);
/*802401F0 0023CFF0*/ PPC::Runtime::ASM::lis(context->r4, lbl_8055DA08 @ Get_MemoryOffset_HighBit);
/*802401F4 0023CFF4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*802401F8 0023CFF8*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*802401FC 0023CFFC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80240200 0023D000*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r3));
/*80240204 0023D004*/ PPC::Runtime::ASM::addi(context->r3, context->r4, lbl_8055DA08 @ Get_MemoryOffset_LowBit);
/*80240208 0023D008*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8024020C 0023D00C*/ PPC::Runtime::ASM::bl(fn_ExPPC_UnwindStack);
/*80240210 0023D010*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*80240214 0023D014*/ PPC::Runtime::ASM::bne(.L_80240240);
/*80240218 0023D018*/ PPC::Runtime::ASM::lis(context->r3, fn_8023F4E4 @ Get_MemoryOffset_HighBit);
/*8024021C 0023D01C*/ PPC::Runtime::ASM::lis(context->r4, 0x1);
/*80240220 0023D020*/ PPC::Runtime::ASM::addi(context->r6, context->r3, fn_8023F4E4 @ Get_MemoryOffset_LowBit);
/*80240224 0023D024*/ PPC::Runtime::ASM::addi(context->r8, context->r1, 0x8);
/*80240228 0023D028*/ PPC::Runtime::ASM::subi(context->r5, context->r4, 0x1);
/*8024022C 0023D02C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80240230 0023D030*/ PPC::Runtime::ASM::li(context->r4, 0x6);
/*80240234 0023D034*/ PPC::Runtime::ASM::li(context->r7, 0x2);
/*80240238 0023D038*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*8024023C 0023D03C*/ PPC::Runtime::ASM::bl(fn_803FCDB8);
RUNTIME_PPC_JUMP_LABEL(.L_80240240, 0x80240240) //this is a jump label
/*80240240 0023D040*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80240244 0023D044*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*80240248 0023D048*/ PPC::Runtime::ASM::beq(.L_8024026C);
/*8024024C 0023D04C*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*80240250 0023D050*/ PPC::Runtime::ASM::bne(.L_80240264);
/*80240254 0023D054*/ PPC::Runtime::ASM::li(context->r3, lbl_805D7310 @ Get_MemoryOffset_SDA21);
/*80240258 0023D058*/ PPC::Runtime::ASM::li(context->r4, 0xab);
/*8024025C 0023D05C*/ PPC::Runtime::ASM::li(context->r5, lbl_805D7318 @ Get_MemoryOffset_SDA21);
/*80240260 0023D060*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_80240264, 0x80240264) //this is a jump label
/*80240264 0023D064*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r31));
/*80240268 0023D068*/ PPC::Runtime::ASM::b(.L_80240270);
RUNTIME_PPC_JUMP_LABEL(.L_8024026C, 0x8024026C) //this is a jump label
/*8024026C 0023D06C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E2B20 @ Get_MemoryOffset_SDA21 ( context->r0 ));
RUNTIME_PPC_JUMP_LABEL(.L_80240270, 0x80240270) //this is a jump label
/*80240270 0023D070*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80240274 0023D074*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80240278 0023D078*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8024027C 0023D07C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80240280 0023D080*/ PPC::Runtime::ASM::blr();
}