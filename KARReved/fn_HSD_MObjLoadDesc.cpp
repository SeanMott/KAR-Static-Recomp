//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_hsdSearchClassInfo.hpp"
#include "fn_HSD_MObjAlloc.hpp"
#include "fn_hsdNew.hpp"
#include "fn___assert.hpp"
#include "fn_HSD_MObjCompileTev.hpp"



void fn_HSD_MObjLoadDesc(PPC::Runtime::GCContext* context)
{
/*803FA014 003F6E14*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*803FA018 003F6E18*/ PPC::Runtime::ASM::mflr(context->r0);
/*803FA01C 003F6E1C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803FA020 003F6E20*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803FA024 003F6E24*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/* 803FA028 003F6E28  7C 7E 1B 79 */ mr. context->r30 , context->r3
/*803FA02C 003F6E2C*/ PPC::Runtime::ASM::beq(.L_803FA098);
/*803FA030 003F6E30*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*803FA034 003F6E34*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*803FA038 003F6E38*/ PPC::Runtime::ASM::beq(.L_803FA048);
/*803FA03C 003F6E3C*/ PPC::Runtime::ASM::bl(fn_hsdSearchClassInfo);
/*803FA040 003F6E40*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*803FA044 003F6E44*/ PPC::Runtime::ASM::bne(.L_803FA054);
RUNTIME_PPC_JUMP_LABEL(.L_803FA048, 0x803FA048) //this is a jump label
/*803FA048 003F6E48*/ PPC::Runtime::ASM::bl(fn_HSD_MObjAlloc);
/*803FA04C 003F6E4C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*803FA050 003F6E50*/ PPC::Runtime::ASM::b(.L_803FA070);
RUNTIME_PPC_JUMP_LABEL(.L_803FA054, 0x803FA054) //this is a jump label
/*803FA054 003F6E54*/ PPC::Runtime::ASM::bl(fn_hsdNew);
/* 803FA058 003F6E58  7C 7F 1B 79 */ mr. context->r31 , context->r3
/*803FA05C 003F6E5C*/ PPC::Runtime::ASM::bne(.L_803FA070);
/*803FA060 003F6E60*/ PPC::Runtime::ASM::li(context->r3, MemoryOffset_598 @ Get_MemoryOffset_SDA21);
/*803FA064 003F6E64*/ PPC::Runtime::ASM::li(context->r4, 0x175);
/*803FA068 003F6E68*/ PPC::Runtime::ASM::li(context->r5, String_ "mob" Get_MemoryOffset_SDA21);
/*803FA06C 003F6E6C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_803FA070, 0x803FA070) //this is a jump label
/*803FA070 003F6E70*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*803FA074 003F6E74*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*803FA078 003F6E78*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*803FA07C 003F6E7C*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x40, context->r5));
/*803FA080 003F6E80*/ PPC::Runtime::ASM::mtctr(context->r12);
/*803FA084 003F6E84*/ PPC::Runtime::ASM::bctrl();
/*803FA088 003F6E88*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*803FA08C 003F6E8C*/ PPC::Runtime::ASM::bl(fn_HSD_MObjCompileTev);
/*803FA090 003F6E90*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*803FA094 003F6E94*/ PPC::Runtime::ASM::b(.L_803FA09C);
RUNTIME_PPC_JUMP_LABEL(.L_803FA098, 0x803FA098) //this is a jump label
/*803FA098 003F6E98*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_803FA09C, 0x803FA09C) //this is a jump label
/*803FA09C 003F6E9C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803FA0A0 003F6EA0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803FA0A4 003F6EA4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*803FA0A8 003F6EA8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803FA0AC 003F6EAC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*803FA0B0 003F6EB0*/ PPC::Runtime::ASM::blr();
}