//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8000A278.hpp"
#include "fn_cityTrialCheckToSpawnStar.hpp"
#include "fn_cityTrialCheckToSpawnStar.hpp"
#include "fn_801DFA74.hpp"
#include "fn_801DFA74.hpp"
#include "fn_801DDEE8.hpp"



void fn_801DE36C(PPC::Runtime::GCContext* context)
{
/*801DE36C 001DB16C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801DE370 001DB170*/ PPC::Runtime::ASM::mflr(context->r0);
/*801DE374 001DB174*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801DE378 001DB178*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801DE37C 001DB17C*/ PPC::Runtime::ASM::bl(fn_8000A278);
/*801DE380 001DB180*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801DE384 001DB184*/ PPC::Runtime::ASM::beq(.L_801DE400);
/*801DE388 001DB188*/ PPC::Runtime::ASM::li(context->r3, 0xc);
/*801DE38C 001DB18C*/ PPC::Runtime::ASM::li(context->r4, 0x5);
/*801DE390 001DB190*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*801DE394 001DB194*/ PPC::Runtime::ASM::bl(fn_GObj_Create);
/*801DE398 001DB198*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801DE39C 001DB19C*/ PPC::Runtime::ASM::lis(context->r5, lbl_8055A100 @ Get_MemoryOffset_HighBit);
/*801DE3A0 001DB1A0*/ PPC::Runtime::ASM::stw(context->r31, STRUCT_BYTE4_COUNT_1805DD860 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801DE3A4 001DB1A4*/ PPC::Runtime::ASM::addi(context->r3, context->r5, lbl_8055A100 @ Get_MemoryOffset_LowBit);
/*801DE3A8 001DB1A8*/ PPC::Runtime::ASM::li(context->r4, 0xc8);
/*801DE3AC 001DB1AC*/ PPC::Runtime::ASM::li(context->r5, 0x4);
/*801DE3B0 001DB1B0*/ PPC::Runtime::ASM::bl(fn_HSD_ObjAllocInit);
/*801DE3B4 001DB1B4*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*801DE3B8 001DB1B8*/ PPC::Runtime::ASM::beq(.L_801DE408);
/*801DE3BC 001DB1BC*/ PPC::Runtime::ASM::lis(context->r4, fn_cityTrialCheckToSpawnStar @ Get_MemoryOffset_HighBit);
/*801DE3C0 001DB1C0*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801DE3C4 001DB1C4*/ PPC::Runtime::ASM::addi(context->r4, context->r4, fn_cityTrialCheckToSpawnStar @ Get_MemoryOffset_LowBit);
/*801DE3C8 001DB1C8*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*801DE3CC 001DB1CC*/ PPC::Runtime::ASM::bl(fn_804288A4);
/*801DE3D0 001DB1D0*/ PPC::Runtime::ASM::lis(context->r3, lbl_8055A100 @ Get_MemoryOffset_HighBit);
/*801DE3D4 001DB1D4*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_8055A100 @ Get_MemoryOffset_LowBit);
/*801DE3D8 001DB1D8*/ PPC::Runtime::ASM::bl(fn_HSD_ObjAlloc);
/*801DE3DC 001DB1DC*/ PPC::Runtime::ASM::lis(context->r4, fn_801DFA74 @ Get_MemoryOffset_HighBit);
/*801DE3E0 001DB1E0*/ PPC::Runtime::ASM::mr(context->r6, context->r3);
/*801DE3E4 001DB1E4*/ PPC::Runtime::ASM::addi(context->r5, context->r4, fn_801DFA74 @ Get_MemoryOffset_LowBit);
/*801DE3E8 001DB1E8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801DE3EC 001DB1EC*/ PPC::Runtime::ASM::li(context->r4, 0xc);
/*801DE3F0 001DB1F0*/ PPC::Runtime::ASM::bl(fn_GObj_AddUserData);
/*801DE3F4 001DB1F4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801DE3F8 001DB1F8*/ PPC::Runtime::ASM::bl(fn_801DDEE8);
/*801DE3FC 001DB1FC*/ PPC::Runtime::ASM::b(.L_801DE408);
RUNTIME_PPC_JUMP_LABEL(.L_801DE400, 0x801DE400) //this is a jump label
/*801DE400 001DB200*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*801DE404 001DB204*/ PPC::Runtime::ASM::stw(context->r0, STRUCT_BYTE4_COUNT_1805DD860 @ Get_MemoryOffset_SDA21 ( context->r0 ));
RUNTIME_PPC_JUMP_LABEL(.L_801DE408, 0x801DE408) //this is a jump label
/*801DE408 001DB208*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801DE40C 001DB20C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801DE410 001DB210*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801DE414 001DB214*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801DE418 001DB218*/ PPC::Runtime::ASM::blr();
}