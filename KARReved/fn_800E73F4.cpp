//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E73F4(PPC::Runtime::GCContext* context)
{
/*800E73F4 000E41F4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E73F8 000E41F8*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E73FC 000E41FC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7400 000E4200*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7404 000E4204*/ PPC::Runtime::ASM::fmr(context->f31, context->f2);
/*800E7408 000E4208*/ PPC::Runtime::ASM::stfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E740C 000E420C*/ PPC::Runtime::ASM::fmr(context->f30, context->f1);
/*800E7410 000E4210*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E7414 000E4214*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E7418 000E4218*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E741C 000E421C*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E7420 000E4220*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E7424 000E4224*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E7428 000E4228*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E742C 000E422C*/ PPC::Runtime::ASM::beq(.L_800E7440);
/*800E7430 000E4230*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E7434 000E4234*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E7438 000E4238*/ PPC::Runtime::ASM::li(context->r4, 0x167);
/*800E743C 000E423C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7440, 0x800E7440) //this is a jump label
/*800E7440 000E4240*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E7444 000E4244*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E7448 000E4248*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800E744C 000E424C*/ PPC::Runtime::ASM::beq(.L_800E7460);
/*800E7450 000E4250*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E7454 000E4254*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x84);
/*800E7458 000E4258*/ PPC::Runtime::ASM::li(context->r4, 0x16b);
/*800E745C 000E425C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7460, 0x800E7460) //this is a jump label
/*800E7460 000E4260*/ PPC::Runtime::ASM::stfs(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*800E7464 000E4264*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*800E7468 000E4268*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E746C 000E426C*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7470 000E4270*/ PPC::Runtime::ASM::lfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7474 000E4274*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E7478 000E4278*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E747C 000E427C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E7480 000E4280*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E7484 000E4284*/ PPC::Runtime::ASM::blr();
}