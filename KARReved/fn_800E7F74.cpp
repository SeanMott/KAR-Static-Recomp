//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E7F74(PPC::Runtime::GCContext* context)
{
/*800E7F74 000E4D74*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E7F78 000E4D78*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E7F7C 000E4D7C*/ PPC::Runtime::ASM::lis(context->r4, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E7F80 000E4D80*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_955 @ Get_MemoryOffset_HighBit);
/*800E7F84 000E4D84*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7F88 000E4D88*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E7F8C 000E4D8C*/ PPC::Runtime::ASM::addi(context->r31, context->r3, MemoryOffset_955 @ Get_MemoryOffset_LowBit);
/*800E7F90 000E4D90*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7F94 000E4D94*/ PPC::Runtime::ASM::addi(context->r30, context->r4, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E7F98 000E4D98*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E7F9C 000E4D9C*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7FA0 000E4DA0*/ PPC::Runtime::ASM::li(context->r28, 0x0);
/*800E7FA4 000E4DA4*/ PPC::Runtime::ASM::lwz(context->r5, STRUCT_BYTE4_COUNT_1805DE334 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800E7FA8 000E4DA8*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r5));
/*800E7FAC 000E4DAC*/ PPC::Runtime::ASM::b(.L_800E7FD4);
RUNTIME_PPC_JUMP_LABEL(.L_800E7FB0, 0x800E7FB0) //this is a jump label
/*800E7FB0 000E4DB0*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E7FB4 000E4DB4*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E7FB8 000E4DB8*/ PPC::Runtime::ASM::beq(.L_800E7FCC);
/*800E7FBC 000E4DBC*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800E7FC0 000E4DC0*/ PPC::Runtime::ASM::mr(context->r5, context->r31);
/*800E7FC4 000E4DC4*/ PPC::Runtime::ASM::li(context->r4, 0x327);
/*800E7FC8 000E4DC8*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7FCC, 0x800E7FCC) //this is a jump label
/*800E7FCC 000E4DCC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r29));
/*800E7FD0 000E4DD0*/ PPC::Runtime::ASM::addi(context->r28, context->r28, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800E7FD4, 0x800E7FD4) //this is a jump label
/*800E7FD4 000E4DD4*/ PPC::Runtime::ASM::cmplwi(context->r29, 0x0);
/*800E7FD8 000E4DD8*/ PPC::Runtime::ASM::bne(.L_800E7FB0);
/*800E7FDC 000E4DDC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7FE0 000E4DE0*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*800E7FE4 000E4DE4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E7FE8 000E4DE8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7FEC 000E4DEC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E7FF0 000E4DF0*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7FF4 000E4DF4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E7FF8 000E4DF8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E7FFC 000E4DFC*/ PPC::Runtime::ASM::blr();
}