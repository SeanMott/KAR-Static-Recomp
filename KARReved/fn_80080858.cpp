//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801D1048.hpp"
#include "fn_80083D20.hpp"



void fn_80080858(PPC::Runtime::GCContext* context)
{
/*80080858 0007D658*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8008085C 0007D65C*/ PPC::Runtime::ASM::mflr(context->r0);
/*80080860 0007D660*/ PPC::Runtime::ASM::li(context->r5, -0x1d7);
/*80080864 0007D664*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80080868 0007D668*/ PPC::Runtime::ASM::clrlslwi(context->r0, context->r4, 24, 1);
/*8008086C 0007D66C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80080870 0007D670*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80080874 0007D674*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*80080878 0007D678*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_565 @ Get_MemoryOffset_HighBit);
/*8008087C 0007D67C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*80080880 0007D680*/ PPC::Runtime::ASM::addi(context->r4, context->r3, MemoryOffset_565 @ Get_MemoryOffset_LowBit);
/*80080884 0007D684*/ PPC::Runtime::ASM::lhz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1bbc, context->r31));
/*80080888 0007D688*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*8008088C 0007D68C*/ PPC::Runtime::ASM::and(context->r5, context->r6, context->r5);
/*80080890 0007D690*/ PPC::Runtime::ASM::sth(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1bbc, context->r31));
/*80080894 0007D694*/ PPC::Runtime::ASM::lhz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1bbc, context->r31));
/*80080898 0007D698*/ PPC::Runtime::ASM::lhzx(context->r0, context->r4, context->r0);
/*8008089C 0007D69C*/ PPC::Runtime::ASM::or(context->r0, context->r5, context->r0);
/*800808A0 0007D6A0*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1bbc, context->r31));
/*800808A4 0007D6A4*/ PPC::Runtime::ASM::bl(fn_801D1048);
/*800808A8 0007D6A8*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1bbc, context->r31));
/*800808AC 0007D6AC*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800808B0 0007D6B0*/ PPC::Runtime::ASM::clrlwi(context->r4, context->r0, 24);
/*800808B4 0007D6B4*/ PPC::Runtime::ASM::bl(fn_80083D20);
/*800808B8 0007D6B8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800808BC 0007D6BC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800808C0 0007D6C0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800808C4 0007D6C4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800808C8 0007D6C8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800808CC 0007D6CC*/ PPC::Runtime::ASM::blr();
}