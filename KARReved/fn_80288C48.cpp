//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_std_redBlackTree_balance_insert_shit.hpp"



void fn_80288C48(PPC::Runtime::GCContext* context)
{
/*80288C48 00285A48*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80288C4C 00285A4C*/ PPC::Runtime::ASM::mflr(context->r0);
/*80288C50 00285A50*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80288C54 00285A54*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x20);
/*80288C58 00285A58*/ PPC::Runtime::ASM::bl(_savegpr_26);
/*80288C5C 00285A5C*/ PPC::Runtime::ASM::mr(context->r27, context->r3);
/*80288C60 00285A60*/ PPC::Runtime::ASM::li(context->r0, -0x2);
/*80288C64 00285A64*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*80288C68 00285A68*/ PPC::Runtime::ASM::mr(context->r28, context->r4);
/*80288C6C 00285A6C*/ PPC::Runtime::ASM::mr(context->r29, context->r5);
/*80288C70 00285A70*/ PPC::Runtime::ASM::mr(context->r30, context->r6);
/*80288C74 00285A74*/ PPC::Runtime::ASM::cmplw(context->r3, context->r0);
/*80288C78 00285A78*/ PPC::Runtime::ASM::mr(context->r26, context->r7);
/*80288C7C 00285A7C*/ PPC::Runtime::ASM::ble(.L_80288CA0);
/*80288C80 00285A80*/ PPC::Runtime::ASM::lis(context->r4, __files @ Get_MemoryOffset_HighBit);
/*80288C84 00285A84*/ PPC::Runtime::ASM::lis(context->r3, lbl_804BC530 @ Get_MemoryOffset_HighBit);
/*80288C88 00285A88*/ PPC::Runtime::ASM::addi(context->r5, context->r4, __files @ Get_MemoryOffset_LowBit);
/*80288C8C 00285A8C*/ PPC::Runtime::ASM::addi(context->r4, context->r3, lbl_804BC530 @ Get_MemoryOffset_LowBit);
/*80288C90 00285A90*/ PPC::Runtime::ASM::addi(context->r3, context->r5, 0xa0);
/*80288C94 00285A94*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*80288C98 00285A98*/ PPC::Runtime::ASM::bl(fn_fprintf);
/*80288C9C 00285A9C*/ PPC::Runtime::ASM::bl(fn_abort);
RUNTIME_PPC_JUMP_LABEL(.L_80288CA0, 0x80288CA0) //this is a jump label
/*80288CA0 00285AA0*/ PPC::Runtime::ASM::li(context->r3, 0x18);
/*80288CA4 00285AA4*/ PPC::Runtime::ASM::bl(fn_8038CB28);
/* 80288CA8 00285AA8  7C 7F 1B 79 */ mr. context->r31 , context->r3
/*80288CAC 00285AAC*/ PPC::Runtime::ASM::bne(.L_80288CD0);
/*80288CB0 00285AB0*/ PPC::Runtime::ASM::lis(context->r4, __files @ Get_MemoryOffset_HighBit);
/*80288CB4 00285AB4*/ PPC::Runtime::ASM::lis(context->r3, lbl_804BC54C @ Get_MemoryOffset_HighBit);
/*80288CB8 00285AB8*/ PPC::Runtime::ASM::addi(context->r5, context->r4, __files @ Get_MemoryOffset_LowBit);
/*80288CBC 00285ABC*/ PPC::Runtime::ASM::addi(context->r4, context->r3, lbl_804BC54C @ Get_MemoryOffset_LowBit);
/*80288CC0 00285AC0*/ PPC::Runtime::ASM::addi(context->r3, context->r5, 0xa0);
/*80288CC4 00285AC4*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*80288CC8 00285AC8*/ PPC::Runtime::ASM::bl(fn_fprintf);
/*80288CCC 00285ACC*/ PPC::Runtime::ASM::bl(fn_abort);
RUNTIME_PPC_JUMP_LABEL(.L_80288CD0, 0x80288CD0) //this is a jump label
/*80288CD0 00285AD0*/ PPC::Runtime::ASM::addic.(context->r4, context->r31, 0xc);
/*80288CD4 00285AD4*/ PPC::Runtime::ASM::beq(.L_80288CF0);
/*80288CD8 00285AD8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r26));
/*80288CDC 00285ADC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r26));
/*80288CE0 00285AE0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*80288CE4 00285AE4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r26));
/*80288CE8 00285AE8*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*80288CEC 00285AEC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
RUNTIME_PPC_JUMP_LABEL(.L_80288CF0, 0x80288CF0) //this is a jump label
/*80288CF0 00285AF0*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/* 80288CF4 00285AF4  57 A0 06 3F */ clrlwi. context->r0 , context->r29 , 24
/*80288CF8 00285AF8*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*80288CFC 00285AFC*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*80288D00 00285B00*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80288D04 00285B04*/ PPC::Runtime::ASM::clrlwi(context->r0, context->r0, 31);
/*80288D08 00285B08*/ PPC::Runtime::ASM::or(context->r0, context->r28, context->r0);
/*80288D0C 00285B0C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80288D10 00285B10*/ PPC::Runtime::ASM::beq(.L_80288D1C);
/*80288D14 00285B14*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r28));
/*80288D18 00285B18*/ PPC::Runtime::ASM::b(.L_80288D20);
RUNTIME_PPC_JUMP_LABEL(.L_80288D1C, 0x80288D1C) //this is a jump label
/*80288D1C 00285B1C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r28));
RUNTIME_PPC_JUMP_LABEL(.L_80288D20, 0x80288D20) //this is a jump label
/*80288D20 00285B20*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r27));
/*80288D24 00285B24*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80288D28 00285B28*/ PPC::Runtime::ASM::addi(context->r0, context->r4, 0x1);
/*80288D2C 00285B2C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r27));
/*80288D30 00285B30*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r27));
/*80288D34 00285B34*/ PPC::Runtime::ASM::bl(fn_std_redBlackTree_balance_insert_shit);
/* 80288D38 00285B38  57 C0 06 3F */ clrlwi. context->r0 , context->r30 , 24
/*80288D3C 00285B3C*/ PPC::Runtime::ASM::beq(.L_80288D44);
/*80288D40 00285B40*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r27));
RUNTIME_PPC_JUMP_LABEL(.L_80288D44, 0x80288D44) //this is a jump label
/*80288D44 00285B44*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80288D48 00285B48*/ PPC::Runtime::ASM::addi(context->r11, context->r1, 0x20);
/*80288D4C 00285B4C*/ PPC::Runtime::ASM::bl(_restgpr_26);
/*80288D50 00285B50*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80288D54 00285B54*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80288D58 00285B58*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80288D5C 00285B5C*/ PPC::Runtime::ASM::blr();
}