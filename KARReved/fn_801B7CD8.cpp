//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_Rider_CheckAnimationEnd.hpp"
#include "fn_sndAuxCallbackPrepareDelay.hpp"
#include "fn_ground_chargeAnimation.hpp"
#include "fn_801A8454.hpp"



void fn_801B7CD8(PPC::Runtime::GCContext* context)
{
/*801B7CD8 001B4AD8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801B7CDC 001B4ADC*/ PPC::Runtime::ASM::mflr(context->r0);
/*801B7CE0 001B4AE0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801B7CE4 001B4AE4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801B7CE8 001B4AE8*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801B7CEC 001B4AEC*/ PPC::Runtime::ASM::bl(fn_Rider_CheckAnimationEnd);
/*801B7CF0 001B4AF0*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801B7CF4 001B4AF4*/ PPC::Runtime::ASM::beq(.L_801B7D18);
/*801B7CF8 001B4AF8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801B7CFC 001B4AFC*/ PPC::Runtime::ASM::bl(fn_sndAuxCallbackPrepareDelay);
/*801B7D00 001B4B00*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801B7D04 001B4B04*/ PPC::Runtime::ASM::bl(fn_ground_chargeAnimation);
/*801B7D08 001B4B08*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801B7D0C 001B4B0C*/ PPC::Runtime::ASM::bne(.L_801B7D18);
/*801B7D10 001B4B10*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801B7D14 001B4B14*/ PPC::Runtime::ASM::bl(fn_801A8454);
RUNTIME_PPC_JUMP_LABEL(.L_801B7D18, 0x801B7D18) //this is a jump label
/*801B7D18 001B4B18*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801B7D1C 001B4B1C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801B7D20 001B4B20*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801B7D24 001B4B24*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801B7D28 001B4B28*/ PPC::Runtime::ASM::blr();
}