//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800D7954.hpp"
#include "fn_800D79C0.hpp"
#include "fn_800F7870.hpp"
#include "fn_80102D90.hpp"



void fn_80102C78(PPC::Runtime::GCContext* context)
{
/*80102C78 000FFA78*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80102C7C 000FFA7C*/ PPC::Runtime::ASM::mflr(context->r0);
/*80102C80 000FFA80*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80102C84 000FFA84*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80102C88 000FFA88*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80102C8C 000FFA8C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80102C90 000FFA90*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*80102C94 000FFA94*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*80102C98 000FFA98*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*80102C9C 000FFA9C*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r4));
/*80102CA0 000FFAA0*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80102CA4 000FFAA4*/ PPC::Runtime::ASM::lwz(context->r3, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80102CA8 000FFAA8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r5));
/*80102CAC 000FFAAC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x104, context->r28));
/*80102CB0 000FFAB0*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x54);
/*80102CB4 000FFAB4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*80102CB8 000FFAB8*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 3);
/*80102CBC 000FFABC*/ PPC::Runtime::ASM::lwzx(context->r4, context->r4, context->r0);
/*80102CC0 000FFAC0*/ PPC::Runtime::ASM::bl(fn_800D7954);
/*80102CC4 000FFAC4*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x130, context->r31));
/*80102CC8 000FFAC8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*80102CCC 000FFACC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x130, context->r31));
/*80102CD0 000FFAD0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x90, context->r3));
/*80102CD4 000FFAD4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r30));
/*80102CD8 000FFAD8*/ PPC::Runtime::ASM::cmpwi(context->r0, -0x1);
/*80102CDC 000FFADC*/ PPC::Runtime::ASM::beq(.L_80102D30);
/*80102CE0 000FFAE0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x104, context->r28));
/*80102CE4 000FFAE4*/ PPC::Runtime::ASM::slwi(context->r0, context->r0, 3);
/*80102CE8 000FFAE8*/ PPC::Runtime::ASM::lwz(context->r6, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80102CEC 000FFAEC*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*80102CF0 000FFAF0*/ PPC::Runtime::ASM::lwzx(context->r4, context->r3, context->r0);
/*80102CF4 000FFAF4*/ PPC::Runtime::ASM::addi(context->r3, context->r6, 0x54);
/*80102CF8 000FFAF8*/ PPC::Runtime::ASM::bl(fn_800D79C0);
/*80102CFC 000FFAFC*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*80102D00 000FFB00*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r3));
/*80102D04 000FFB04*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*80102D08 000FFB08*/ PPC::Runtime::ASM::bne(.L_80102D24);
/*80102D0C 000FFB0C*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_1016 @ Get_MemoryOffset_HighBit);
/*80102D10 000FFB10*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_1017 @ Get_MemoryOffset_HighBit);
/*80102D14 000FFB14*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_1016 @ Get_MemoryOffset_LowBit);
/*80102D18 000FFB18*/ PPC::Runtime::ASM::li(context->r4, 0x50);
/*80102D1C 000FFB1C*/ PPC::Runtime::ASM::addi(context->r5, context->r5, MemoryOffset_1017 @ Get_MemoryOffset_LowBit);
/*80102D20 000FFB20*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_80102D24, 0x80102D24) //this is a jump label
/*80102D24 000FFB24*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r28));
/*80102D28 000FFB28*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r31));
/*80102D2C 000FFB2C*/ PPC::Runtime::ASM::b(.L_80102D38);
RUNTIME_PPC_JUMP_LABEL(.L_80102D30, 0x80102D30) //this is a jump label
/*80102D30 000FFB30*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*80102D34 000FFB34*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_80102D38, 0x80102D38) //this is a jump label
/*80102D38 000FFB38*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r31));
/*80102D3C 000FFB3C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*80102D40 000FFB40*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r3, 7, 24, 24);
/*80102D44 000FFB44*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r31));
/*80102D48 000FFB48*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80102D4C 000FFB4C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r3));
/*80102D50 000FFB50*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*80102D54 000FFB54*/ PPC::Runtime::ASM::beq(.L_80102D68);
/*80102D58 000FFB58*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*80102D5C 000FFB5C*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*80102D60 000FFB60*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*80102D64 000FFB64*/ PPC::Runtime::ASM::bl(fn_800F7870);
RUNTIME_PPC_JUMP_LABEL(.L_80102D68, 0x80102D68) //this is a jump label
/*80102D68 000FFB68*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*80102D6C 000FFB6C*/ PPC::Runtime::ASM::bl(fn_80102D90);
/*80102D70 000FFB70*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80102D74 000FFB74*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80102D78 000FFB78*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80102D7C 000FFB7C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80102D80 000FFB80*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*80102D84 000FFB84*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80102D88 000FFB88*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80102D8C 000FFB8C*/ PPC::Runtime::ASM::blr();
}