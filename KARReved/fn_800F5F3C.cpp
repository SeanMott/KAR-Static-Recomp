//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800DB7D0.hpp"



void fn_800F5F3C(PPC::Runtime::GCContext* context)
{
/*800F5F3C 000F2D3C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800F5F40 000F2D40*/ PPC::Runtime::ASM::mflr(context->r0);
/*800F5F44 000F2D44*/ PPC::Runtime::ASM::slwi(context->r7, context->r4, 3);
/*800F5F48 000F2D48*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*800F5F4C 000F2D4C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800F5F50 000F2D50*/ PPC::Runtime::ASM::lwz(context->r6, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800F5F54 000F2D54*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800F5F58 000F2D58*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x104, context->r6));
/*800F5F5C 000F2D5C*/ PPC::Runtime::ASM::lwzx(context->r0, context->r4, context->r7);
/*800F5F60 000F2D60*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb8, context->r3));
/*800F5F64 000F2D64*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x104, context->r6));
/*800F5F68 000F2D68*/ PPC::Runtime::ASM::add(context->r4, context->r3, context->r7);
/*800F5F6C 000F2D6C*/ PPC::Runtime::ASM::lwzx(context->r3, context->r3, context->r7);
/*800F5F70 000F2D70*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*800F5F74 000F2D74*/ PPC::Runtime::ASM::bl(fn_800DB7D0);
/*800F5F78 000F2D78*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800F5F7C 000F2D7C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800F5F80 000F2D80*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800F5F84 000F2D84*/ PPC::Runtime::ASM::blr();
}