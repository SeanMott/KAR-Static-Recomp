//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "OSDisableInterrupts.hpp"
#include "__OSMaskInterrupts.hpp"
#include "MEMIntrruptHandler.hpp"
#include "MEMIntrruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "OSRegisterResetFunction.hpp"
#include "DCInvalidateRange.hpp"
#include "Config24MB.hpp"
#include "Config24MB.hpp"
#include "RealMode_Config24MB.hpp"
#include "Config48MB.hpp"
#include "Config48MB.hpp"
#include "RealMode_Config24MB.hpp"
#include "__OSUnmaskInterrupts.hpp"
#include "OSRestoreInterrupts.hpp"



void __OSInitMemoryProtection(PPC::Runtime::GCContext* context)
{
/*803D7D08 003D4B08*/ PPC::Runtime::ASM::mflr(context->r0);
/*803D7D0C 003D4B0C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803D7D10 003D4B10*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x50, context->r1));
/*803D7D14 003D4B14*/ PPC::Runtime::ASM::stmw(context->r27, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3c, context->r1));
/*803D7D18 003D4B18*/ PPC::Runtime::ASM::lis(context->r27, 0x8000);
/*803D7D1C 003D4B1C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xf0, context->r27));
/*803D7D20 003D4B20*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*803D7D24 003D4B24*/ PPC::Runtime::ASM::lis(context->r4, 0xcc00);
/*803D7D28 003D4B28*/ PPC::Runtime::ASM::addi(context->r28, context->r4, 0x4000);
/*803D7D2C 003D4B2C*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*803D7D30 003D4B30*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r28));
/*803D7D34 003D4B34*/ PPC::Runtime::ASM::li(context->r0, 0xff);
/*803D7D38 003D4B38*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*803D7D3C 003D4B3C*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r28));
/*803D7D40 003D4B40*/ PPC::Runtime::ASM::lis(context->r3, 0xf000);
/*803D7D44 003D4B44*/ PPC::Runtime::ASM::bl(__OSMaskInterrupts);
/*803D7D48 003D4B48*/ PPC::Runtime::ASM::lis(context->r3, MEMIntrruptHandler @ Get_MemoryOffset_HighBit);
/*803D7D4C 003D4B4C*/ PPC::Runtime::ASM::addi(context->r29, context->r3, MEMIntrruptHandler @ Get_MemoryOffset_LowBit);
/*803D7D50 003D4B50*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*803D7D54 003D4B54*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*803D7D58 003D4B58*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803D7D5C 003D4B5C*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*803D7D60 003D4B60*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*803D7D64 003D4B64*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803D7D68 003D4B68*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*803D7D6C 003D4B6C*/ PPC::Runtime::ASM::li(context->r3, 0x2);
/*803D7D70 003D4B70*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803D7D74 003D4B74*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*803D7D78 003D4B78*/ PPC::Runtime::ASM::li(context->r3, 0x3);
/*803D7D7C 003D4B7C*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803D7D80 003D4B80*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*803D7D84 003D4B84*/ PPC::Runtime::ASM::li(context->r3, 0x4);
/*803D7D88 003D4B88*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803D7D8C 003D4B8C*/ PPC::Runtime::ASM::lis(context->r3, ResetFunctionInfo_804FBC68 @ Get_MemoryOffset_HighBit);
/*803D7D90 003D4B90*/ PPC::Runtime::ASM::addi(context->r3, context->r3, ResetFunctionInfo_804FBC68 @ Get_MemoryOffset_LowBit);
/*803D7D94 003D4B94*/ PPC::Runtime::ASM::bl(OSRegisterResetFunction);
/*803D7D98 003D4B98*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xf0, context->r27));
/*803D7D9C 003D4B9C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r27));
/*803D7DA0 003D4BA0*/ PPC::Runtime::ASM::cmplw(context->r3, context->r0);
/*803D7DA4 003D4BA4*/ PPC::Runtime::ASM::bge(.L_803D7DC8);
/*803D7DA8 003D4BA8*/ PPC::Runtime::ASM::subis(context->r0, context->r3, 0x180);
/*803D7DAC 003D4BAC*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*803D7DB0 003D4BB0*/ PPC::Runtime::ASM::bne(.L_803D7DC8);
/*803D7DB4 003D4BB4*/ PPC::Runtime::ASM::lis(context->r3, 0x8180);
/*803D7DB8 003D4BB8*/ PPC::Runtime::ASM::lis(context->r4, 0x180);
/*803D7DBC 003D4BBC*/ PPC::Runtime::ASM::bl(DCInvalidateRange);
/*803D7DC0 003D4BC0*/ PPC::Runtime::ASM::li(context->r0, 0x2);
/*803D7DC4 003D4BC4*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r28));
RUNTIME_PPC_JUMP_LABEL(.L_803D7DC8, 0x803D7DC8) //this is a jump label
/*803D7DC8 003D4BC8*/ PPC::Runtime::ASM::lis(context->r0, 0x180);
/*803D7DCC 003D4BCC*/ PPC::Runtime::ASM::cmplw(context->r31, context->r0);
/*803D7DD0 003D4BD0*/ PPC::Runtime::ASM::bgt(.L_803D7DE4);
/*803D7DD4 003D4BD4*/ PPC::Runtime::ASM::lis(context->r3, Config24MB @ Get_MemoryOffset_HighBit);
/*803D7DD8 003D4BD8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, Config24MB @ Get_MemoryOffset_LowBit);
/*803D7DDC 003D4BDC*/ PPC::Runtime::ASM::bl(RealMode_Config24MB);
/*803D7DE0 003D4BE0*/ PPC::Runtime::ASM::b(.L_803D7DFC);
RUNTIME_PPC_JUMP_LABEL(.L_803D7DE4, 0x803D7DE4) //this is a jump label
/*803D7DE4 003D4BE4*/ PPC::Runtime::ASM::lis(context->r0, 0x300);
/*803D7DE8 003D4BE8*/ PPC::Runtime::ASM::cmplw(context->r31, context->r0);
/*803D7DEC 003D4BEC*/ PPC::Runtime::ASM::bgt(.L_803D7DFC);
/*803D7DF0 003D4BF0*/ PPC::Runtime::ASM::lis(context->r3, Config48MB @ Get_MemoryOffset_HighBit);
/*803D7DF4 003D4BF4*/ PPC::Runtime::ASM::addi(context->r3, context->r3, Config48MB @ Get_MemoryOffset_LowBit);
/*803D7DF8 003D4BF8*/ PPC::Runtime::ASM::bl(RealMode_Config24MB);
RUNTIME_PPC_JUMP_LABEL(.L_803D7DFC, 0x803D7DFC) //this is a jump label
/*803D7DFC 003D4BFC*/ PPC::Runtime::ASM::lis(context->r3, 0x800);
/*803D7E00 003D4C00*/ PPC::Runtime::ASM::bl(__OSUnmaskInterrupts);
/*803D7E04 003D4C04*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*803D7E08 003D4C08*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*803D7E0C 003D4C0C*/ PPC::Runtime::ASM::lmw(context->r27, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3c, context->r1));
/*803D7E10 003D4C10*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x54, context->r1));
/*803D7E14 003D4C14*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x50);
/*803D7E18 003D4C18*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803D7E1C 003D4C1C*/ PPC::Runtime::ASM::blr();
}