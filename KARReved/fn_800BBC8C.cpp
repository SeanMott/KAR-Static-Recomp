//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800BBC8C(PPC::Runtime::GCContext* context)
{
/*800BBC8C 000B8A8C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x17c, context->r3));
/*800BBC90 000B8A90*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x71, context->r3));
/*800BBC94 000B8A94*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x2);
/*800BBC98 000B8A98*/ PPC::Runtime::ASM::beq(.L_800BBCC4);
/*800BBC9C 000B8A9C*/ PPC::Runtime::ASM::bge(.L_800BBCA4);
/*800BBCA0 000B8AA0*/ PPC::Runtime::ASM::b(.L_800BBCB0);
RUNTIME_PPC_JUMP_LABEL(.L_800BBCA4, 0x800BBCA4) //this is a jump label
/*800BBCA4 000B8AA4*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x5);
/*800BBCA8 000B8AA8*/ PPC::Runtime::ASM::bge(.L_800BBCB0);
/*800BBCAC 000B8AAC*/ PPC::Runtime::ASM::b(.L_800BBCD8);
RUNTIME_PPC_JUMP_LABEL(.L_800BBCB0, 0x800BBCB0) //this is a jump label
/*800BBCB0 000B8AB0*/ PPC::Runtime::ASM::lis(context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_HighBit);
/*800BBCB4 000B8AB4*/ PPC::Runtime::ASM::addi(context->r3, context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_LowBit);
/*800BBCB8 000B8AB8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x234, context->r3));
/*800BBCBC 000B8ABC*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r3));
/*800BBCC0 000B8AC0*/ PPC::Runtime::ASM::blr();
RUNTIME_PPC_JUMP_LABEL(.L_800BBCC4, 0x800BBCC4) //this is a jump label
/*800BBCC4 000B8AC4*/ PPC::Runtime::ASM::lis(context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_HighBit);
/*800BBCC8 000B8AC8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_LowBit);
/*800BBCCC 000B8ACC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x234, context->r3));
/*800BBCD0 000B8AD0*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r3));
/*800BBCD4 000B8AD4*/ PPC::Runtime::ASM::blr();
RUNTIME_PPC_JUMP_LABEL(.L_800BBCD8, 0x800BBCD8) //this is a jump label
/*800BBCD8 000B8AD8*/ PPC::Runtime::ASM::lis(context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_HighBit);
/*800BBCDC 000B8ADC*/ PPC::Runtime::ASM::addi(context->r3, context->r3, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_LowBit);
/*800BBCE0 000B8AE0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x234, context->r3));
/*800BBCE4 000B8AE4*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r3));
/*800BBCE8 000B8AE8*/ PPC::Runtime::ASM::blr();
}