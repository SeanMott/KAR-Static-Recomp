//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801DD220.hpp"
#include "fn_801DD17C.hpp"



void fn_801D5824(PPC::Runtime::GCContext* context)
{
/*801D5824 001D2624*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x30, context->r1));
/*801D5828 001D2628*/ PPC::Runtime::ASM::mflr(context->r0);
/*801D582C 001D262C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*801D5830 001D2630*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*801D5834 001D2634*/ PPC::Runtime::ASM::psq_st(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1)0, context->qr0);
/*801D5838 001D2638*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801D583C 001D263C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801D5840 001D2640*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801D5844 001D2644*/ PPC::Runtime::ASM::lwz(context->r7, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*801D5848 001D2648*/ PPC::Runtime::ASM::lis(context->r0, 0x4330);
/*801D584C 001D264C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801D5850 001D2650*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*801D5854 001D2654*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r7));
/*801D5858 001D2658*/ PPC::Runtime::ASM::addi(context->r0, context->r7, 0x4);
/*801D585C 001D265C*/ PPC::Runtime::ASM::lbz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3, context->r7));
/*801D5860 001D2660*/ PPC::Runtime::ASM::extrwi(context->r6, context->r5, 16, 6);
/*801D5864 001D2664*/ PPC::Runtime::ASM::lbz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2, context->r7));
/*801D5868 001D2668*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/* 801D586C 001D266C  54 66 CF FF */ extrwi. context->r6 , context->r3 , 1 , 24
/*801D5870 001D2670*/ PPC::Runtime::ASM::lfd(context->f1, STRUCT_DOUBLE_COUNT_1805E1B68 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801D5874 001D2674*/ PPC::Runtime::ASM::clrlwi(context->r30, context->r5, 31);
/*801D5878 001D2678*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*801D587C 001D267C*/ PPC::Runtime::ASM::clrlwi(context->r3, context->r3, 25);
/*801D5880 001D2680*/ PPC::Runtime::ASM::lfd(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801D5884 001D2684*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*801D5888 001D2688*/ PPC::Runtime::ASM::fsubs(context->f0, context->f0, context->f1);
/*801D588C 001D268C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E1B58 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801D5890 001D2690*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r5));
/*801D5894 001D2694*/ PPC::Runtime::ASM::addi(context->r0, context->r5, 0x4);
/*801D5898 001D2698*/ PPC::Runtime::ASM::fmuls(context->f31, context->f1, context->f0);
/*801D589C 001D269C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*801D58A0 001D26A0*/ PPC::Runtime::ASM::beq(.L_801D58B4);
/*801D58A4 001D26A4*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801D58A8 001D26A8*/ PPC::Runtime::ASM::ble(.L_801D58B4);
/*801D58AC 001D26AC*/ PPC::Runtime::ASM::bl(fn_HSD_Randi);
/*801D58B0 001D26B0*/ PPC::Runtime::ASM::add(context->r31, context->r31, context->r3);
RUNTIME_PPC_JUMP_LABEL(.L_801D58B4, 0x801D58B4) //this is a jump label
/*801D58B4 001D26B4*/ PPC::Runtime::ASM::cmpwi(context->r30, 0x0);
/*801D58B8 001D26B8*/ PPC::Runtime::ASM::beq(.L_801D58D0);
/*801D58BC 001D26BC*/ PPC::Runtime::ASM::fmr(context->f1, context->f31);
/*801D58C0 001D26C0*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*801D58C4 001D26C4*/ PPC::Runtime::ASM::mr(context->r4, context->r31);
/*801D58C8 001D26C8*/ PPC::Runtime::ASM::bl(fn_801DD220);
/*801D58CC 001D26CC*/ PPC::Runtime::ASM::b(.L_801D58E0);
RUNTIME_PPC_JUMP_LABEL(.L_801D58D0, 0x801D58D0) //this is a jump label
/*801D58D0 001D26D0*/ PPC::Runtime::ASM::fmr(context->f1, context->f31);
/*801D58D4 001D26D4*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*801D58D8 001D26D8*/ PPC::Runtime::ASM::mr(context->r4, context->r31);
/*801D58DC 001D26DC*/ PPC::Runtime::ASM::bl(fn_801DD17C);
RUNTIME_PPC_JUMP_LABEL(.L_801D58E0, 0x801D58E0) //this is a jump label
/*801D58E0 001D26E0*/ PPC::Runtime::ASM::psq_l(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1)0, context->qr0);
/*801D58E4 001D26E4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*801D58E8 001D26E8*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*801D58EC 001D26EC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*801D58F0 001D26F0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*801D58F4 001D26F4*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801D58F8 001D26F8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801D58FC 001D26FC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x30);
/*801D5900 001D2700*/ PPC::Runtime::ASM::blr();
}