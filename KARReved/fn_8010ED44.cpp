//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800E85A8.hpp"



void fn_8010ED44(PPC::Runtime::GCContext* context)
{
/*8010ED44 0010BB44*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*8010ED48 0010BB48*/ PPC::Runtime::ASM::mflr(context->r0);
/*8010ED4C 0010BB4C*/ PPC::Runtime::ASM::li(context->r5, 0x3);
/*8010ED50 0010BB50*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8010ED54 0010BB54*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8010ED58 0010BB58*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8010ED5C 0010BB5C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8010ED60 0010BB60*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*8010ED64 0010BB64*/ PPC::Runtime::ASM::lis(context->r3, StructWithFuncPtrs_148 @ Get_MemoryOffset_HighBit);
/*8010ED68 0010BB68*/ PPC::Runtime::ASM::addi(context->r31, context->r3, StructWithFuncPtrs_148 @ Get_MemoryOffset_LowBit);
/*8010ED6C 0010BB6C*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*8010ED70 0010BB70*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*8010ED74 0010BB74*/ PPC::Runtime::ASM::addi(context->r4, context->r31, 0xc);
/*8010ED78 0010BB78*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r6));
/*8010ED7C 0010BB7C*/ PPC::Runtime::ASM::bl(fn_800E85A8);
/*8010ED80 0010BB80*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*8010ED84 0010BB84*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*8010ED88 0010BB88*/ PPC::Runtime::ASM::cmpwi(context->r0, 0xa);
/*8010ED8C 0010BB8C*/ PPC::Runtime::ASM::ble(.L_8010EDA0);
/*8010ED90 0010BB90*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x18);
/*8010ED94 0010BB94*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x24);
/*8010ED98 0010BB98*/ PPC::Runtime::ASM::li(context->r4, 0x3c);
/*8010ED9C 0010BB9C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_8010EDA0, 0x8010EDA0) //this is a jump label
/*8010EDA0 0010BBA0*/ PPC::Runtime::ASM::mr(context->r5, context->r30);
/*8010EDA4 0010BBA4*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*8010EDA8 0010BBA8*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*8010EDAC 0010BBAC*/ PPC::Runtime::ASM::b(.L_8010EDCC);
RUNTIME_PPC_JUMP_LABEL(.L_8010EDB0, 0x8010EDB0) //this is a jump label
/*8010EDB0 0010BBB0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*8010EDB4 0010BBB4*/ PPC::Runtime::ASM::addi(context->r0, context->r4, 0x8);
/*8010EDB8 0010BBB8*/ PPC::Runtime::ASM::addi(context->r4, context->r4, 0x10);
/*8010EDBC 0010BBBC*/ PPC::Runtime::ASM::addi(context->r6, context->r6, 0x1);
/*8010EDC0 0010BBC0*/ PPC::Runtime::ASM::lwzx(context->r0, context->r3, context->r0);
/*8010EDC4 0010BBC4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x728, context->r5));
/*8010EDC8 0010BBC8*/ PPC::Runtime::ASM::addi(context->r5, context->r5, 0x4);
RUNTIME_PPC_JUMP_LABEL(.L_8010EDCC, 0x8010EDCC) //this is a jump label
/*8010EDCC 0010BBCC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*8010EDD0 0010BBD0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*8010EDD4 0010BBD4*/ PPC::Runtime::ASM::cmpw(context->r6, context->r0);
/*8010EDD8 0010BBD8*/ PPC::Runtime::ASM::blt(.L_8010EDB0);
/*8010EDDC 0010BBDC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8010EDE0 0010BBE0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8010EDE4 0010BBE4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8010EDE8 0010BBE8*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8010EDEC 0010BBEC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8010EDF0 0010BBF0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*8010EDF4 0010BBF4*/ PPC::Runtime::ASM::blr();
}