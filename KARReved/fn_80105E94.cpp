//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800D7B50.hpp"
#include "fn_killWhispy.hpp"



void fn_80105E94(PPC::Runtime::GCContext* context)
{
/*80105E94 00102C94*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80105E98 00102C98*/ PPC::Runtime::ASM::mflr(context->r0);
/*80105E9C 00102C9C*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*80105EA0 00102CA0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80105EA4 00102CA4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80105EA8 00102CA8*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80105EAC 00102CAC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*80105EB0 00102CB0*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80105EB4 00102CB4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x130, context->r31));
/*80105EB8 00102CB8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r5));
/*80105EBC 00102CBC*/ PPC::Runtime::ASM::bl(fn_800D7B50);
/*80105EC0 00102CC0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*80105EC4 00102CC4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r31));
/*80105EC8 00102CC8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*80105ECC 00102CCC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*80105ED0 00102CD0*/ PPC::Runtime::ASM::subf.(context->r3, context->r3, context->r0);
/*80105ED4 00102CD4*/ PPC::Runtime::ASM::ble(.L_80105EE8);
/*80105ED8 00102CD8*/ PPC::Runtime::ASM::bl(fn_HSD_Randi);
/*80105EDC 00102CDC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r31));
/*80105EE0 00102CE0*/ PPC::Runtime::ASM::add(context->r0, context->r0, context->r3);
/*80105EE4 00102CE4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_80105EE8, 0x80105EE8) //this is a jump label
/*80105EE8 00102CE8*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DFA30 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80105EEC 00102CEC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80105EF0 00102CF0*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*80105EF4 00102CF4*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*80105EF8 00102CF8*/ PPC::Runtime::ASM::fmr(context->f2, context->f1);
/*80105EFC 00102CFC*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*80105F00 00102D00*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*80105F04 00102D04*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*80105F08 00102D08*/ PPC::Runtime::ASM::bl(fn_killWhispy);
/*80105F0C 00102D0C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80105F10 00102D10*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80105F14 00102D14*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80105F18 00102D18*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80105F1C 00102D1C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80105F20 00102D20*/ PPC::Runtime::ASM::blr();
}