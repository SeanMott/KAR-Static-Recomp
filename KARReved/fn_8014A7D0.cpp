//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_FuncDoesShit_5.hpp"
#include "fn_80138934.hpp"
#include "fn_8014A750.hpp"
#include "fn_8014A750.hpp"
#include "fn_801389D8.hpp"
#include "fn_80138A00.hpp"



void fn_8014A7D0(PPC::Runtime::GCContext* context)
{
/*8014A7D0 001475D0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*8014A7D4 001475D4*/ PPC::Runtime::ASM::mflr(context->r0);
/*8014A7D8 001475D8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8014A7DC 001475DC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8014A7E0 001475E0*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8014A7E4 001475E4*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8014A7E8 001475E8*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*8014A7EC 001475EC*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*8014A7F0 001475F0*/ PPC::Runtime::ASM::bl(fn_FuncDoesShit_5);
/*8014A7F4 001475F4*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8014A7F8 001475F8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x380, context->r3));
/*8014A7FC 001475FC*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*8014A800 00147600*/ PPC::Runtime::ASM::beq(.L_8014A810);
/*8014A804 00147604*/ PPC::Runtime::ASM::bl(fn_80428F64);
/*8014A808 00147608*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*8014A80C 0014760C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x380, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_8014A810, 0x8014A810) //this is a jump label
/*8014A810 00147610*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x37c, context->r31));
/*8014A814 00147614*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*8014A818 00147618*/ PPC::Runtime::ASM::li(context->r5, 0x50);
/*8014A81C 0014761C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*8014A820 00147620*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*8014A824 00147624*/ PPC::Runtime::ASM::bl(fn_80138934);
/*8014A828 00147628*/ PPC::Runtime::ASM::lis(context->r4, fn_8014A750 @ Get_MemoryOffset_HighBit);
/*8014A82C 0014762C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r3));
/*8014A830 00147630*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*8014A834 00147634*/ PPC::Runtime::ASM::li(context->r5, 0x1);
/*8014A838 00147638*/ PPC::Runtime::ASM::addi(context->r4, context->r4, fn_8014A750 @ Get_MemoryOffset_LowBit);
/*8014A83C 0014763C*/ PPC::Runtime::ASM::bl(fn_804288A4);
/*8014A840 00147640*/ PPC::Runtime::ASM::extsb(context->r3, context->r28);
/*8014A844 00147644*/ PPC::Runtime::ASM::lis(context->r0, 0x4330);
/*8014A848 00147648*/ PPC::Runtime::ASM::xoris(context->r3, context->r3, 0x8000);
/*8014A84C 0014764C*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x37c, context->r31));
/*8014A850 00147650*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8014A854 00147654*/ PPC::Runtime::ASM::mr(context->r3, context->r29);
/*8014A858 00147658*/ PPC::Runtime::ASM::lfd(context->f1, STRUCT_DOUBLE_COUNT_1805E0578 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8014A85C 0014765C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8014A860 00147660*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*8014A864 00147664*/ PPC::Runtime::ASM::lfd(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8014A868 00147668*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E0570 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8014A86C 0014766C*/ PPC::Runtime::ASM::fsubs(context->f1, context->f0, context->f1);
/*8014A870 00147670*/ PPC::Runtime::ASM::bl(fn_801389D8);
/*8014A874 00147674*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*8014A878 00147678*/ PPC::Runtime::ASM::li(context->r4, 0xb);
/*8014A87C 0014767C*/ PPC::Runtime::ASM::bl(fn_80138A00);
/*8014A880 00147680*/ PPC::Runtime::ASM::stb(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r3));
/*8014A884 00147684*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x380, context->r31));
/*8014A888 00147688*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8014A88C 0014768C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8014A890 00147690*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8014A894 00147694*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8014A898 00147698*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*8014A89C 0014769C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8014A8A0 001476A0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*8014A8A4 001476A4*/ PPC::Runtime::ASM::blr();
}