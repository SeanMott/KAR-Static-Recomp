//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800ADF84.hpp"
#include "fn_8005F6E8.hpp"
#include "fn_800ABA6C.hpp"
#include "fn_playSoundFX_menuSound.hpp"
#include "fn_debug_openSubMenu.hpp"
#include "fn_800ABA6C.hpp"
#include "fn_800AD410.hpp"
#include "fn_800AD410.hpp"
#include "fn_800ABA74.hpp"



void fn_800ADE4C(PPC::Runtime::GCContext* context)
{
/*800ADE4C 000AAC4C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800ADE50 000AAC50*/ PPC::Runtime::ASM::mflr(context->r0);
/*800ADE54 000AAC54*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800ADE58 000AAC58*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800ADE5C 000AAC5C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*800ADE60 000AAC60*/ PPC::Runtime::ASM::bl(fn_800ADF84);
/*800ADE64 000AAC64*/ PPC::Runtime::ASM::bl(fn_8005F6E8);
/*800ADE68 000AAC68*/ PPC::Runtime::ASM::cmpwi(context->r31, 0x1);
/*800ADE6C 000AAC6C*/ PPC::Runtime::ASM::bne(.L_800ADEA4);
/*800ADE70 000AAC70*/ PPC::Runtime::ASM::bl(fn_800ABA6C);
/*800ADE74 000AAC74*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*800ADE78 000AAC78*/ PPC::Runtime::ASM::bl(fn_playSoundFX_menuSound);
/*800ADE7C 000AAC7C*/ PPC::Runtime::ASM::lis(context->r4, StructWithFuncPtrs_28_HasTheMassiveMaybeCTFunctionalityStructArrayInside @ Get_MemoryOffset_HighBit);
/*800ADE80 000AAC80*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800ADE84 000AAC84*/ PPC::Runtime::ASM::addi(context->r4, context->r4, StructWithFuncPtrs_28_HasTheMassiveMaybeCTFunctionalityStructArrayInside @ Get_MemoryOffset_LowBit);
/*800ADE88 000AAC88*/ PPC::Runtime::ASM::li(context->r5, -0x3c);
/*800ADE8C 000AAC8C*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*800ADE90 000AAC90*/ PPC::Runtime::ASM::bl(fn_debug_openSubMenu);
/*800ADE94 000AAC94*/ PPC::Runtime::ASM::bl(fn_800ABA6C);
/*800ADE98 000AAC98*/ PPC::Runtime::ASM::lis(context->r4, fn_800AD410 @ Get_MemoryOffset_HighBit);
/*800ADE9C 000AAC9C*/ PPC::Runtime::ASM::addi(context->r4, context->r4, fn_800AD410 @ Get_MemoryOffset_LowBit);
/*800ADEA0 000AACA0*/ PPC::Runtime::ASM::bl(fn_800ABA74);
RUNTIME_PPC_JUMP_LABEL(.L_800ADEA4, 0x800ADEA4) //this is a jump label
/*800ADEA4 000AACA4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800ADEA8 000AACA8*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800ADEAC 000AACAC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800ADEB0 000AACB0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800ADEB4 000AACB4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800ADEB8 000AACB8*/ PPC::Runtime::ASM::blr();
}