//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E9628(PPC::Runtime::GCContext* context)
{
/*800E9628 000E6428*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E962C 000E642C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E9630 000E6430*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E9634 000E6434*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E9638 000E6438*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E963C 000E643C*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*800E9640 000E6440*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E9644 000E6444*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*800E9648 000E6448*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_960 @ Get_MemoryOffset_HighBit);
/*800E964C 000E644C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E9650 000E6450*/ PPC::Runtime::ASM::addi(context->r31, context->r3, MemoryOffset_960 @ Get_MemoryOffset_LowBit);
/*800E9654 000E6454*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*800E9658 000E6458*/ PPC::Runtime::ASM::bne(.L_800E966C);
/*800E965C 000E645C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E9660 000E6460*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x38);
/*800E9664 000E6464*/ PPC::Runtime::ASM::li(context->r4, 0x113);
/*800E9668 000E6468*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E966C, 0x800E966C) //this is a jump label
/*800E966C 000E646C*/ PPC::Runtime::ASM::li(context->r0, -0x1);
/*800E9670 000E6470*/ PPC::Runtime::ASM::xor(context->r0, context->r30, context->r0);
/*800E9674 000E6474*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*800E9678 000E6478*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r30);
/*800E967C 000E647C*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/* 800E9680 000E6480  54 00 0F FF */ srwi. context->r0 , context->r0 , 31
/*800E9684 000E6484*/ PPC::Runtime::ASM::beq(.L_800E96B4);
/*800E9688 000E6488*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E968C 000E648C*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800E9690 000E6490*/ PPC::Runtime::ASM::beq(.L_800E969C);
/*800E9694 000E6494*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*800E9698 000E6498*/ PPC::Runtime::ASM::b(.L_800E96A0);
RUNTIME_PPC_JUMP_LABEL(.L_800E969C, 0x800E969C) //this is a jump label
/*800E969C 000E649C*/ PPC::Runtime::ASM::li(context->r4, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800E96A0, 0x800E96A0) //this is a jump label
/*800E96A0 000E64A0*/ PPC::Runtime::ASM::xor(context->r0, context->r4, context->r30);
/*800E96A4 000E64A4*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*800E96A8 000E64A8*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r4);
/*800E96AC 000E64AC*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/*800E96B0 000E64B0*/ PPC::Runtime::ASM::srwi(context->r0, context->r0, 31);
RUNTIME_PPC_JUMP_LABEL(.L_800E96B4, 0x800E96B4) //this is a jump label
/*800E96B4 000E64B4*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800E96B8 000E64B8*/ PPC::Runtime::ASM::bne(.L_800E96DC);
/*800E96BC 000E64BC*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800E96C0 000E64C0*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x48);
/*800E96C4 000E64C4*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800E96C8 000E64C8*/ PPC::Runtime::ASM::bl(OSReport);
/*800E96CC 000E64CC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E96D0 000E64D0*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E96D4 000E64D4*/ PPC::Runtime::ASM::li(context->r4, 0x114);
/*800E96D8 000E64D8*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E96DC, 0x800E96DC) //this is a jump label
/*800E96DC 000E64DC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800E96E0 000E64E0*/ PPC::Runtime::ASM::slwi(context->r0, context->r30, 2);
/*800E96E4 000E64E4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800E96E8 000E64E8*/ PPC::Runtime::ASM::lwzx(context->r3, context->r3, context->r0);
/*800E96EC 000E64EC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800E96F0 000E64F0*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800E96F4 000E64F4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800E96F8 000E64F8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E96FC 000E64FC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E9700 000E6500*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E9704 000E6504*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E9708 000E6508*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E970C 000E650C*/ PPC::Runtime::ASM::blr();
}