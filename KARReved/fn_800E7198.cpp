//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E7198(PPC::Runtime::GCContext* context)
{
/*800E7198 000E3F98*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800E719C 000E3F9C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E71A0 000E3FA0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E71A4 000E3FA4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E71A8 000E3FA8*/ PPC::Runtime::ASM::mr(context->r31, context->r4);
/*800E71AC 000E3FAC*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E71B0 000E3FB0*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E71B4 000E3FB4*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800E71B8 000E3FB8*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E71BC 000E3FBC*/ PPC::Runtime::ASM::beq(.L_800E71D8);
/*800E71C0 000E3FC0*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E71C4 000E3FC4*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_955 @ Get_MemoryOffset_HighBit);
/*800E71C8 000E3FC8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E71CC 000E3FCC*/ PPC::Runtime::ASM::li(context->r4, 0x116);
/*800E71D0 000E3FD0*/ PPC::Runtime::ASM::addi(context->r5, context->r5, MemoryOffset_955 @ Get_MemoryOffset_LowBit);
/*800E71D4 000E3FD4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E71D8, 0x800E71D8) //this is a jump label
/*800E71D8 000E3FD8*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E71DC 000E3FDC*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*800E71E0 000E3FE0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*800E71E4 000E3FE4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*800E71E8 000E3FE8*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r5));
/*800E71EC 000E3FEC*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r5));
/*800E71F0 000E3FF0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*800E71F4 000E3FF4*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r5));
/*800E71F8 000E3FF8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r5));
/*800E71FC 000E3FFC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E7200 000E4000*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E7204 000E4004*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E7208 000E4008*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E720C 000E400C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800E7210 000E4010*/ PPC::Runtime::ASM::blr();
}