//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_GXCPInterruptHandler.hpp"
#include "fn_GXCPInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "__OSUnmaskInterrupts.hpp"
#include "fn_OSGetCurrentContext.hpp"



void __GXFifoInit(PPC::Runtime::GCContext* context)
{
/*803C9DD8 003C6BD8*/ PPC::Runtime::ASM::mflr(context->r0);
/*803C9DDC 003C6BDC*/ PPC::Runtime::ASM::lis(context->r3, fn_GXCPInterruptHandler @ Get_MemoryOffset_HighBit);
/*803C9DE0 003C6BE0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803C9DE4 003C6BE4*/ PPC::Runtime::ASM::addi(context->r4, context->r3, fn_GXCPInterruptHandler @ Get_MemoryOffset_LowBit);
/*803C9DE8 003C6BE8*/ PPC::Runtime::ASM::li(context->r3, 0x11);
/*803C9DEC 003C6BEC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x8, context->r1));
/*803C9DF0 003C6BF0*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803C9DF4 003C6BF4*/ PPC::Runtime::ASM::li(context->r3, 0x4000);
/*803C9DF8 003C6BF8*/ PPC::Runtime::ASM::bl(__OSUnmaskInterrupts);
/*803C9DFC 003C6BFC*/ PPC::Runtime::ASM::bl(fn_OSGetCurrentContext);
/*803C9E00 003C6C00*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*803C9E04 003C6C04*/ PPC::Runtime::ASM::stw(context->r3, STRUCT_BYTE4_COUNT_1805DDE38 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803C9E08 003C6C08*/ PPC::Runtime::ASM::stw(context->r0, STRUCT_BYTE4_COUNT_1805DDE40 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803C9E0C 003C6C0C*/ PPC::Runtime::ASM::stw(context->r0, STRUCT_BYTE4_COUNT_1805DDE30 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803C9E10 003C6C10*/ PPC::Runtime::ASM::stw(context->r0, STRUCT_BYTE4_COUNT_1805DDE34 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803C9E14 003C6C14*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803C9E18 003C6C18*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x8);
/*803C9E1C 003C6C1C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803C9E20 003C6C20*/ PPC::Runtime::ASM::blr();
}