//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800FA594(PPC::Runtime::GCContext* context)
{
/*800FA594 000F7394*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800FA598 000F7398*/ PPC::Runtime::ASM::mflr(context->r0);
/*800FA59C 000F739C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FA5A0 000F73A0*/ PPC::Runtime::ASM::mulli(context->r0, context->r3, 0x140);
/*800FA5A4 000F73A4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800FA5A8 000F73A8*/ PPC::Runtime::ASM::lwz(context->r4, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FA5AC 000F73AC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x74, context->r4));
/*800FA5B0 000F73B0*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*800FA5B4 000F73B4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r3));
/*800FA5B8 000F73B8*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800FA5BC 000F73BC*/ PPC::Runtime::ASM::beq(.L_800FA5F8);
/*800FA5C0 000F73C0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800FA5C4 000F73C4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*800FA5C8 000F73C8*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x11);
/*800FA5CC 000F73CC*/ PPC::Runtime::ASM::beq(.L_800FA5E8);
/*800FA5D0 000F73D0*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_999 @ Get_MemoryOffset_HighBit);
/*800FA5D4 000F73D4*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_1000 @ Get_MemoryOffset_HighBit);
/*800FA5D8 000F73D8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_999 @ Get_MemoryOffset_LowBit);
/*800FA5DC 000F73DC*/ PPC::Runtime::ASM::li(context->r4, 0x107);
/*800FA5E0 000F73E0*/ PPC::Runtime::ASM::addi(context->r5, context->r5, MemoryOffset_1000 @ Get_MemoryOffset_LowBit);
/*800FA5E4 000F73E4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800FA5E8, 0x800FA5E8) //this is a jump label
/*800FA5E8 000F73E8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*800FA5EC 000F73EC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800FA5F0 000F73F0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r3));
/*800FA5F4 000F73F4*/ PPC::Runtime::ASM::b(.L_800FA5FC);
RUNTIME_PPC_JUMP_LABEL(.L_800FA5F8, 0x800FA5F8) //this is a jump label
/*800FA5F8 000F73F8*/ PPC::Runtime::ASM::li(context->r3, -0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800FA5FC, 0x800FA5FC) //this is a jump label
/*800FA5FC 000F73FC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FA600 000F7400*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800FA604 000F7404*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800FA608 000F7408*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800FA60C 000F740C*/ PPC::Runtime::ASM::blr();
}