//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801A6428.hpp"
#include "fn_80196DF4.hpp"
#include "fn_800550F4.hpp"
#include "fn_ability_Spike_changeNeedle.hpp"



void fn_ability_Spike_giveHat(PPC::Runtime::GCContext* context)
{
/*801A727C 001A407C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801A7280 001A4080*/ PPC::Runtime::ASM::mflr(context->r0);
/*801A7284 001A4084*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801A7288 001A4088*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801A728C 001A408C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801A7290 001A4090*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*801A7294 001A4094*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r3));
/*801A7298 001A4098*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*801A729C 001A409C*/ PPC::Runtime::ASM::bne(.L_801A7344);
/*801A72A0 001A40A0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r30));
/*801A72A4 001A40A4*/ PPC::Runtime::ASM::lis(context->r3, lbl_80559EE8 @ Get_MemoryOffset_HighBit);
/*801A72A8 001A40A8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_80559EE8 @ Get_MemoryOffset_LowBit);
/*801A72AC 001A40AC*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r4));
/*801A72B0 001A40B0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r4));
/*801A72B4 001A40B4*/ PPC::Runtime::ASM::bl(fn_HSD_ObjAlloc);
/*801A72B8 001A40B8*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x904, context->r30));
/*801A72BC 001A40BC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*801A72C0 001A40C0*/ PPC::Runtime::ASM::bl(fn_JObj_LoadJoint);
/*801A72C4 001A40C4*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r30));
/*801A72C8 001A40C8*/ PPC::Runtime::ASM::li(context->r4, 0x1);
/*801A72CC 001A40CC*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*801A72D0 001A40D0*/ PPC::Runtime::ASM::addi(context->r5, context->r30, 0x900);
/*801A72D4 001A40D4*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa30, context->r30));
/*801A72D8 001A40D8*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r4, 7, 24, 24);
/*801A72DC 001A40DC*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa30, context->r30));
/*801A72E0 001A40E0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r30));
/*801A72E4 001A40E4*/ PPC::Runtime::ASM::bl(fn_801A6428);
/*801A72E8 001A40E8*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x8);
/*801A72EC 001A40EC*/ PPC::Runtime::ASM::addi(context->r4, context->r30, 0x910);
/*801A72F0 001A40F0*/ PPC::Runtime::ASM::addi(context->r5, context->r30, 0x900);
/*801A72F4 001A40F4*/ PPC::Runtime::ASM::bl(fn_80196DF4);
/*801A72F8 001A40F8*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*801A72FC 001A40FC*/ PPC::Runtime::ASM::cmplwi(context->r5, 0x0);
/*801A7300 001A4100*/ PPC::Runtime::ASM::beq(.L_801A7338);
/*801A7304 001A4104*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r30));
/*801A7308 001A4108*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*801A730C 001A410C*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801A7310 001A4110*/ PPC::Runtime::ASM::bl(fn_HSD_JObjAddAnimAll);
/*801A7314 001A4114*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r30));
/*801A7318 001A4118*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E1328 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801A731C 001A411C*/ PPC::Runtime::ASM::bl(fn_HSD_JObjReqAnim);
/*801A7320 001A4120*/ PPC::Runtime::ASM::lis(context->r4, 0x1);
/*801A7324 001A4124*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r30));
/*801A7328 001A4128*/ PPC::Runtime::ASM::subi(context->r4, context->r4, 0x1);
/*801A732C 001A412C*/ PPC::Runtime::ASM::bl(fn_800550F4);
/*801A7330 001A4130*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8fc, context->r30));
/*801A7334 001A4134*/ PPC::Runtime::ASM::bl(fn_HSD_JObjAnimAll?);
RUNTIME_PPC_JUMP_LABEL(.L_801A7338, 0x801A7338) //this is a jump label
/*801A7338 001A4138*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*801A733C 001A413C*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*801A7340 001A4140*/ PPC::Runtime::ASM::bl(fn_ability_Spike_changeNeedle);
RUNTIME_PPC_JUMP_LABEL(.L_801A7344, 0x801A7344) //this is a jump label
/*801A7344 001A4144*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801A7348 001A4148*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801A734C 001A414C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801A7350 001A4150*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801A7354 001A4154*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801A7358 001A4158*/ PPC::Runtime::ASM::blr();
}