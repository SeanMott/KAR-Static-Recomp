//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8022D230.hpp"
#include "fn_801C8410.hpp"



void fn_80040AB8(PPC::Runtime::GCContext* context)
{
/*80040AB8 0003D8B8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80040ABC 0003D8BC*/ PPC::Runtime::ASM::mflr(context->r0);
/*80040AC0 0003D8C0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80040AC4 0003D8C4*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*80040AC8 0003D8C8*/ PPC::Runtime::ASM::psq_st(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1)0, context->qr0);
/*80040ACC 0003D8CC*/ PPC::Runtime::ASM::lfs(context->f31, STRUCT_FLOAT_COUNT_1805DE888 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80040AD0 0003D8D0*/ PPC::Runtime::ASM::li(context->r3, 0x4);
/*80040AD4 0003D8D4*/ PPC::Runtime::ASM::bl(fn_8022D230);
/*80040AD8 0003D8D8*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*80040ADC 0003D8DC*/ PPC::Runtime::ASM::beq(.L_80040AE8);
/*80040AE0 0003D8E0*/ PPC::Runtime::ASM::bl(fn_801C8410);
/*80040AE4 0003D8E4*/ PPC::Runtime::ASM::fmr(context->f31, context->f1);
RUNTIME_PPC_JUMP_LABEL(.L_80040AE8, 0x80040AE8) //this is a jump label
/*80040AE8 0003D8E8*/ PPC::Runtime::ASM::fmr(context->f1, context->f31);
/*80040AEC 0003D8EC*/ PPC::Runtime::ASM::psq_l(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1)0, context->qr0);
/*80040AF0 0003D8F0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80040AF4 0003D8F4*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*80040AF8 0003D8F8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80040AFC 0003D8FC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80040B00 0003D900*/ PPC::Runtime::ASM::blr();
}