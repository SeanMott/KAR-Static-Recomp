//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800DA424.hpp"
#include "fn_800DA424.hpp"



void fn_grGetEnemyposNum(PPC::Runtime::GCContext* context)
{
/*800D0C88 000CDA88*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800D0C8C 000CDA8C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D0C90 000CDA90*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D0C94 000CDA94*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D0C98 000CDA98*/ PPC::Runtime::ASM::lwz(context->r31, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800D0C9C 000CDA9C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800D0CA0 000CDAA0*/ PPC::Runtime::ASM::bl(fn_800DA424);
/*800D0CA4 000CDAA4*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800D0CA8 000CDAA8*/ PPC::Runtime::ASM::beq(.L_800D0CBC);
/*800D0CAC 000CDAAC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800D0CB0 000CDAB0*/ PPC::Runtime::ASM::bl(fn_800DA424);
/*800D0CB4 000CDAB4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800D0CB8 000CDAB8*/ PPC::Runtime::ASM::b(.L_800D0CC0);
RUNTIME_PPC_JUMP_LABEL(.L_800D0CBC, 0x800D0CBC) //this is a jump label
/*800D0CBC 000CDABC*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800D0CC0, 0x800D0CC0) //this is a jump label
/*800D0CC0 000CDAC0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D0CC4 000CDAC4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D0CC8 000CDAC8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D0CCC 000CDACC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800D0CD0 000CDAD0*/ PPC::Runtime::ASM::blr();
}