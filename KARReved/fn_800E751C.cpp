//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E751C(PPC::Runtime::GCContext* context)
{
/*800E751C 000E431C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E7520 000E4320*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E7524 000E4324*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7528 000E4328*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E752C 000E432C*/ PPC::Runtime::ASM::fmr(context->f31, context->f2);
/*800E7530 000E4330*/ PPC::Runtime::ASM::stfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7534 000E4334*/ PPC::Runtime::ASM::fmr(context->f30, context->f1);
/*800E7538 000E4338*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E753C 000E433C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E7540 000E4340*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E7544 000E4344*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E7548 000E4348*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E754C 000E434C*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E7550 000E4350*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E7554 000E4354*/ PPC::Runtime::ASM::beq(.L_800E7568);
/*800E7558 000E4358*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E755C 000E435C*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E7560 000E4360*/ PPC::Runtime::ASM::li(context->r4, 0x18b);
/*800E7564 000E4364*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7568, 0x800E7568) //this is a jump label
/*800E7568 000E4368*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E756C 000E436C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E7570 000E4370*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x2);
/*800E7574 000E4374*/ PPC::Runtime::ASM::beq(.L_800E7588);
/*800E7578 000E4378*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E757C 000E437C*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0xe0);
/*800E7580 000E4380*/ PPC::Runtime::ASM::li(context->r4, 0x18f);
/*800E7584 000E4384*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7588, 0x800E7588) //this is a jump label
/*800E7588 000E4388*/ PPC::Runtime::ASM::stfs(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*800E758C 000E438C*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*800E7590 000E4390*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7594 000E4394*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7598 000E4398*/ PPC::Runtime::ASM::lfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E759C 000E439C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E75A0 000E43A0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E75A4 000E43A4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E75A8 000E43A8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E75AC 000E43AC*/ PPC::Runtime::ASM::blr();
}