//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "OSDisableInterrupts.hpp"
#include "OSRestoreInterrupts.hpp"



void fn_80475AC0(PPC::Runtime::GCContext* context)
{
/*80475AC0 004728C0*/ PPC::Runtime::ASM::mflr(context->r0);
/*80475AC4 004728C4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*80475AC8 004728C8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x28, context->r1));
/*80475ACC 004728CC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80475AD0 004728D0*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*80475AD4 004728D4*/ PPC::Runtime::ASM::addi(context->r30, context->r5, 0x0);
/*80475AD8 004728D8*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80475ADC 004728DC*/ PPC::Runtime::ASM::addi(context->r29, context->r4, 0x0);
/*80475AE0 004728E0*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80475AE4 004728E4*/ PPC::Runtime::ASM::addi(context->r28, context->r3, 0x0);
/*80475AE8 004728E8*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*80475AEC 004728EC*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r28));
/*80475AF0 004728F0*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x6);
/*80475AF4 004728F4*/ PPC::Runtime::ASM::beq(.L_80475B00);
/*80475AF8 004728F8*/ PPC::Runtime::ASM::li(context->r31, -0xc);
/*80475AFC 004728FC*/ PPC::Runtime::ASM::b(.L_80475B24);
RUNTIME_PPC_JUMP_LABEL(.L_80475B00, 0x80475B00) //this is a jump label
/*80475B00 00472900*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*80475B04 00472904*/ PPC::Runtime::ASM::li(context->r31, 0x0);
/*80475B08 00472908*/ PPC::Runtime::ASM::beq(.L_80475B14);
/*80475B0C 0047290C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x120, context->r28));
/*80475B10 00472910*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_80475B14, 0x80475B14) //this is a jump label
/*80475B14 00472914*/ PPC::Runtime::ASM::cmplwi(context->r29, 0x0);
/*80475B18 00472918*/ PPC::Runtime::ASM::beq(.L_80475B24);
/*80475B1C 0047291C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x11c, context->r28));
/*80475B20 00472920*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
RUNTIME_PPC_JUMP_LABEL(.L_80475B24, 0x80475B24) //this is a jump label
/*80475B24 00472924*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*80475B28 00472928*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80475B2C 0047292C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*80475B30 00472930*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80475B34 00472934*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*80475B38 00472938*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80475B3C 0047293C*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80475B40 00472940*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x28);
/*80475B44 00472944*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80475B48 00472948*/ PPC::Runtime::ASM::blr();
}