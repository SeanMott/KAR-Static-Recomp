//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8020438C.hpp"
#include "fn_8007E128.hpp"



void fn_80083BCC(PPC::Runtime::GCContext* context)
{
/*80083BCC 000809CC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80083BD0 000809D0*/ PPC::Runtime::ASM::mflr(context->r0);
/*80083BD4 000809D4*/ PPC::Runtime::ASM::lis(context->r3, lbl_80552E40 @ Get_MemoryOffset_HighBit);
/*80083BD8 000809D8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80083BDC 000809DC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80083BE0 000809E0*/ PPC::Runtime::ASM::addi(context->r31, context->r3, lbl_80552E40 @ Get_MemoryOffset_LowBit);
/*80083BE4 000809E4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80083BE8 000809E8*/ PPC::Runtime::ASM::addi(context->r30, context->r31, 0xbc);
/*80083BEC 000809EC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r31));
/*80083BF0 000809F0*/ PPC::Runtime::ASM::bl(fn_8020438C);
/*80083BF4 000809F4*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*80083BF8 000809F8*/ PPC::Runtime::ASM::bne(.L_80083C24);
/*80083BFC 000809FC*/ PPC::Runtime::ASM::lfs(context->f0, STRUCT_FLOAT_COUNT_1805DEE98 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80083C00 00080A00*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*80083C04 00080A04*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r31));
/*80083C08 00080A08*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*80083C0C 00080A0C*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*80083C10 00080A10*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*80083C14 00080A14*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r30));
/*80083C18 00080A18*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*80083C1C 00080A1C*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*80083C20 00080A20*/ PPC::Runtime::ASM::b(.L_80083CA4);
RUNTIME_PPC_JUMP_LABEL(.L_80083C24, 0x80083C24) //this is a jump label
/*80083C24 00080A24*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*80083C28 00080A28*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*80083C2C 00080A2C*/ PPC::Runtime::ASM::fcmpu(cr0, context->f1, context->f0);
/*80083C30 00080A30*/ PPC::Runtime::ASM::bne(.L_80083C54);
/*80083C34 00080A34*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*80083C38 00080A38*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*80083C3C 00080A3C*/ PPC::Runtime::ASM::fcmpu(cr0, context->f1, context->f0);
/*80083C40 00080A40*/ PPC::Runtime::ASM::bne(.L_80083C54);
/*80083C44 00080A44*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*80083C48 00080A48*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r30));
/*80083C4C 00080A4C*/ PPC::Runtime::ASM::fcmpu(cr0, context->f1, context->f0);
/*80083C50 00080A50*/ PPC::Runtime::ASM::beq(.L_80083CA4);
RUNTIME_PPC_JUMP_LABEL(.L_80083C54, 0x80083C54) //this is a jump label
/*80083C54 00080A54*/ PPC::Runtime::ASM::li(context->r3, -0x1);
/*80083C58 00080A58*/ PPC::Runtime::ASM::bl(fn_HSD_StateInvalidate);
/*80083C5C 00080A5C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*80083C60 00080A60*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*80083C64 00080A64*/ PPC::Runtime::ASM::bl(fn_HSD_StateInitDirect);
/*80083C68 00080A68*/ PPC::Runtime::ASM::bl(fn_COBJ_GetCurrent);
/*80083C6C 00080A6C*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*80083C70 00080A70*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x54);
/*80083C74 00080A74*/ PPC::Runtime::ASM::bl(fn_GXLoadPosMtxImm);
/*80083C78 00080A78*/ PPC::Runtime::ASM::li(context->r3, 0xc);
/*80083C7C 00080A7C*/ PPC::Runtime::ASM::li(context->r4, 0x5);
/*80083C80 00080A80*/ PPC::Runtime::ASM::bl(fn_GXSetLineWidth);
/*80083C84 00080A84*/ PPC::Runtime::ASM::li(context->r3, 0xa8);
/*80083C88 00080A88*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*80083C8C 00080A8C*/ PPC::Runtime::ASM::li(context->r5, 0x2);
/*80083C90 00080A90*/ PPC::Runtime::ASM::bl(fn_GXBegin);
/*80083C94 00080A94*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*80083C98 00080A98*/ PPC::Runtime::ASM::addi(context->r4, context->r30, 0xc);
/*80083C9C 00080A9C*/ PPC::Runtime::ASM::li(context->r5, lbl_805D5430 @ Get_MemoryOffset_SDA21);
/*80083CA0 00080AA0*/ PPC::Runtime::ASM::bl(fn_8007E128);
RUNTIME_PPC_JUMP_LABEL(.L_80083CA4, 0x80083CA4) //this is a jump label
/*80083CA4 00080AA4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80083CA8 00080AA8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80083CAC 00080AAC*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80083CB0 00080AB0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80083CB4 00080AB4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80083CB8 00080AB8*/ PPC::Runtime::ASM::blr();
}