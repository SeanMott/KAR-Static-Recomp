//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_gmGetGlobalP.hpp"



void fn_8003F77C(PPC::Runtime::GCContext* context)
{
/*8003F77C 0003C57C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8003F780 0003C580*/ PPC::Runtime::ASM::mflr(context->r0);
/*8003F784 0003C584*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8003F788 0003C588*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8003F78C 0003C58C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8003F790 0003C590*/ PPC::Runtime::ASM::bl(fn_gmGetGlobalP);
/*8003F794 0003C594*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x394);
/*8003F798 0003C598*/ PPC::Runtime::ASM::extsb(context->r0, context->r31);
/*8003F79C 0003C59C*/ PPC::Runtime::ASM::add(context->r4, context->r3, context->r0);
/*8003F7A0 0003C5A0*/ PPC::Runtime::ASM::lbz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xd3, context->r4));
/*8003F7A4 0003C5A4*/ PPC::Runtime::ASM::extsb(context->r0, context->r3);
/*8003F7A8 0003C5A8*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x63);
/*8003F7AC 0003C5AC*/ PPC::Runtime::ASM::bge(.L_8003F7B8);
/*8003F7B0 0003C5B0*/ PPC::Runtime::ASM::addi(context->r0, context->r3, 0x1);
/*8003F7B4 0003C5B4*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xd3, context->r4));
RUNTIME_PPC_JUMP_LABEL(.L_8003F7B8, 0x8003F7B8) //this is a jump label
/*8003F7B8 0003C5B8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8003F7BC 0003C5BC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8003F7C0 0003C5C0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8003F7C4 0003C5C4*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8003F7C8 0003C5C8*/ PPC::Runtime::ASM::blr();
}