//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_GXTokenInterruptHandler.hpp"
#include "fn_GXTokenInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "fn_GXFinishInterruptHandler.hpp"
#include "fn_GXFinishInterruptHandler.hpp"
#include "__OSSetInterruptHandler.hpp"
#include "OSInitThreadQueue.hpp"
#include "__OSUnmaskInterrupts.hpp"
#include "__OSUnmaskInterrupts.hpp"



void __GXPEInit(PPC::Runtime::GCContext* context)
{
/*803CC194 003C8F94*/ PPC::Runtime::ASM::mflr(context->r0);
/*803CC198 003C8F98*/ PPC::Runtime::ASM::lis(context->r3, fn_GXTokenInterruptHandler @ Get_MemoryOffset_HighBit);
/*803CC19C 003C8F9C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*803CC1A0 003C8FA0*/ PPC::Runtime::ASM::addi(context->r4, context->r3, fn_GXTokenInterruptHandler @ Get_MemoryOffset_LowBit);
/*803CC1A4 003C8FA4*/ PPC::Runtime::ASM::li(context->r3, 0x12);
/*803CC1A8 003C8FA8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x8, context->r1));
/*803CC1AC 003C8FAC*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803CC1B0 003C8FB0*/ PPC::Runtime::ASM::lis(context->r3, fn_GXFinishInterruptHandler @ Get_MemoryOffset_HighBit);
/*803CC1B4 003C8FB4*/ PPC::Runtime::ASM::addi(context->r4, context->r3, fn_GXFinishInterruptHandler @ Get_MemoryOffset_LowBit);
/*803CC1B8 003C8FB8*/ PPC::Runtime::ASM::li(context->r3, 0x13);
/*803CC1BC 003C8FBC*/ PPC::Runtime::ASM::bl(__OSSetInterruptHandler);
/*803CC1C0 003C8FC0*/ PPC::Runtime::ASM::li(context->r3, SkipAddress_51 @ Get_MemoryOffset_SDA21);
/*803CC1C4 003C8FC4*/ PPC::Runtime::ASM::bl(OSInitThreadQueue);
/*803CC1C8 003C8FC8*/ PPC::Runtime::ASM::li(context->r3, 0x2000);
/*803CC1CC 003C8FCC*/ PPC::Runtime::ASM::bl(__OSUnmaskInterrupts);
/*803CC1D0 003C8FD0*/ PPC::Runtime::ASM::li(context->r3, 0x1000);
/*803CC1D4 003C8FD4*/ PPC::Runtime::ASM::bl(__OSUnmaskInterrupts);
/*803CC1D8 003C8FD8*/ PPC::Runtime::ASM::lwz(context->r3, __peReg @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803CC1DC 003C8FDC*/ PPC::Runtime::ASM::lhzu(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r3));
/*803CC1E0 003C8FE0*/ PPC::Runtime::ASM::rlwinm(context->r0, context->r0, 0, 30, 28);
/*803CC1E4 003C8FE4*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x4);
/*803CC1E8 003C8FE8*/ PPC::Runtime::ASM::rlwinm(context->r0, context->r0, 0, 29, 27);
/*803CC1EC 003C8FEC*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x8);
/*803CC1F0 003C8FF0*/ PPC::Runtime::ASM::clrrwi(context->r0, context->r0, 1);
/*803CC1F4 003C8FF4*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x1);
/*803CC1F8 003C8FF8*/ PPC::Runtime::ASM::rlwinm(context->r0, context->r0, 0, 31, 29);
/*803CC1FC 003C8FFC*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x2);
/*803CC200 003C9000*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*803CC204 003C9004*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*803CC208 003C9008*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x8);
/*803CC20C 003C900C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803CC210 003C9010*/ PPC::Runtime::ASM::blr();
}