//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800DFF44.hpp"
#include "fn_800DE8A8.hpp"



void fn_800CEE24(PPC::Runtime::GCContext* context)
{
/*800CEE24 000CBC24*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800CEE28 000CBC28*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CEE2C 000CBC2C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CEE30 000CBC30*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800CEE34 000CBC34*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800CEE38 000CBC38*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CEE3C 000CBC3C*/ PPC::Runtime::ASM::mr(context->r29, context->r4);
/*800CEE40 000CBC40*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800CEE44 000CBC44*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*800CEE48 000CBC48*/ PPC::Runtime::ASM::lwz(context->r31, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CEE4C 000CBC4C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x110, context->r31));
/*800CEE50 000CBC50*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*800CEE54 000CBC54*/ PPC::Runtime::ASM::bne(.L_800CEE6C);
/*800CEE58 000CBC58*/ PPC::Runtime::ASM::lis(context->r4, MemoryOffset_899 @ Get_MemoryOffset_HighBit);
/*800CEE5C 000CBC5C*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800CEE60 000CBC60*/ PPC::Runtime::ASM::addi(context->r5, context->r4, MemoryOffset_899 @ Get_MemoryOffset_LowBit);
/*800CEE64 000CBC64*/ PPC::Runtime::ASM::li(context->r4, 0x13b);
/*800CEE68 000CBC68*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CEE6C, 0x800CEE6C) //this is a jump label
/*800CEE6C 000CBC6C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800CEE70 000CBC70*/ PPC::Runtime::ASM::mr(context->r4, context->r28);
/*800CEE74 000CBC74*/ PPC::Runtime::ASM::addi(context->r6, context->r29, 0x8);
/*800CEE78 000CBC78*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*800CEE7C 000CBC7C*/ PPC::Runtime::ASM::bl(fn_800DFF44);
/*800CEE80 000CBC80*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800CEE84 000CBC84*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*800CEE88 000CBC88*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800CEE8C 000CBC8C*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r29));
/*800CEE90 000CBC90*/ PPC::Runtime::ASM::bl(fn_800DE8A8);
/*800CEE94 000CBC94*/ PPC::Runtime::ASM::stfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r29));
/*800CEE98 000CBC98*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800CEE9C 000CBC9C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800CEEA0 000CBCA0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800CEEA4 000CBCA4*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CEEA8 000CBCA8*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800CEEAC 000CBCAC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CEEB0 000CBCB0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800CEEB4 000CBCB4*/ PPC::Runtime::ASM::blr();
}