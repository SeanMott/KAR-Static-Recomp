//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "OSDisableInterrupts.hpp"
#include "fn_IPGetAnonPort.hpp"
#include "fn_8047558C.hpp"
#include "fn_8047558C.hpp"
#include "OSRestoreInterrupts.hpp"



void fn_TCPListen(PPC::Runtime::GCContext* context)
{
/*80475E14 00472C14*/ PPC::Runtime::ASM::mflr(context->r0);
/*80475E18 00472C18*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r1));
/*80475E1C 00472C1C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x40, context->r1));
/*80475E20 00472C20*/ PPC::Runtime::ASM::stmw(context->r25, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80475E24 00472C24*/ PPC::Runtime::ASM::addi(context->r25, context->r3, 0x0);
/*80475E28 00472C28*/ PPC::Runtime::ASM::addi(context->r26, context->r4, 0x0);
/*80475E2C 00472C2C*/ PPC::Runtime::ASM::addi(context->r27, context->r5, 0x0);
/*80475E30 00472C30*/ PPC::Runtime::ASM::addi(context->r28, context->r6, 0x0);
/*80475E34 00472C34*/ PPC::Runtime::ASM::addi(context->r29, context->r7, 0x0);
/*80475E38 00472C38*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*80475E3C 00472C3C*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r25));
/*80475E40 00472C40*/ PPC::Runtime::ASM::addi(context->r31, context->r3, 0x0);
/*80475E44 00472C44*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x6);
/*80475E48 00472C48*/ PPC::Runtime::ASM::beq(.L_80475E54);
/*80475E4C 00472C4C*/ PPC::Runtime::ASM::li(context->r30, -0xc);
/*80475E50 00472C50*/ PPC::Runtime::ASM::b(.L_80475ECC);
RUNTIME_PPC_JUMP_LABEL(.L_80475E54, 0x80475E54) //this is a jump label
/*80475E54 00472C54*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8c, context->r25));
/*80475E58 00472C58*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*80475E5C 00472C5C*/ PPC::Runtime::ASM::beq(.L_80475E68);
/*80475E60 00472C60*/ PPC::Runtime::ASM::li(context->r30, -0x5);
/*80475E64 00472C64*/ PPC::Runtime::ASM::b(.L_80475ECC);
RUNTIME_PPC_JUMP_LABEL(.L_80475E68, 0x80475E68) //this is a jump label
/*80475E68 00472C68*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r25));
/*80475E6C 00472C6C*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*80475E70 00472C70*/ PPC::Runtime::ASM::bne(.L_80475E84);
/*80475E74 00472C74*/ PPC::Runtime::ASM::li(context->r3, STRUCT_BYTE4_COUNT_1805DE650 @ Get_MemoryOffset_SDA21);
/*80475E78 00472C78*/ PPC::Runtime::ASM::li(context->r4, MemoryOffset_337 @ Get_MemoryOffset_SDA21);
/*80475E7C 00472C7C*/ PPC::Runtime::ASM::bl(fn_IPGetAnonPort);
/*80475E80 00472C80*/ PPC::Runtime::ASM::sth(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r25));
RUNTIME_PPC_JUMP_LABEL(.L_80475E84, 0x80475E84) //this is a jump label
/*80475E84 00472C84*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r25));
/*80475E88 00472C88*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*80475E8C 00472C8C*/ PPC::Runtime::ASM::bne(.L_80475E98);
/*80475E90 00472C90*/ PPC::Runtime::ASM::li(context->r30, -0x7);
/*80475E94 00472C94*/ PPC::Runtime::ASM::b(.L_80475ECC);
RUNTIME_PPC_JUMP_LABEL(.L_80475E98, 0x80475E98) //this is a jump label
/*80475E98 00472C98*/ PPC::Runtime::ASM::li(context->r0, 0x1);
/*80475E9C 00472C9C*/ PPC::Runtime::ASM::cmplwi(context->r28, 0x0);
/*80475EA0 00472CA0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8c, context->r25));
/*80475EA4 00472CA4*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*80475EA8 00472CA8*/ PPC::Runtime::ASM::beq(.L_80475EB4);
/*80475EAC 00472CAC*/ PPC::Runtime::ASM::mr(context->r0, context->r28);
/*80475EB0 00472CB0*/ PPC::Runtime::ASM::b(.L_80475EBC);
RUNTIME_PPC_JUMP_LABEL(.L_80475EB4, 0x80475EB4) //this is a jump label
/*80475EB4 00472CB4*/ PPC::Runtime::ASM::lis(context->r3, fn_8047558C @ Get_MemoryOffset_HighBit);
/*80475EB8 00472CB8*/ PPC::Runtime::ASM::addi(context->r0, context->r3, fn_8047558C @ Get_MemoryOffset_LowBit);
RUNTIME_PPC_JUMP_LABEL(.L_80475EBC, 0x80475EBC) //this is a jump label
/*80475EBC 00472CBC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x274, context->r25));
/*80475EC0 00472CC0*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x278, context->r25));
/*80475EC4 00472CC4*/ PPC::Runtime::ASM::stw(context->r26, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x25c, context->r25));
/*80475EC8 00472CC8*/ PPC::Runtime::ASM::stw(context->r27, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x260, context->r25));
RUNTIME_PPC_JUMP_LABEL(.L_80475ECC, 0x80475ECC) //this is a jump label
/*80475ECC 00472CCC*/ PPC::Runtime::ASM::cmplwi(context->r29, 0x0);
/*80475ED0 00472CD0*/ PPC::Runtime::ASM::beq(.L_80475ED8);
/*80475ED4 00472CD4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
RUNTIME_PPC_JUMP_LABEL(.L_80475ED8, 0x80475ED8) //this is a jump label
/*80475ED8 00472CD8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80475EDC 00472CDC*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*80475EE0 00472CE0*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*80475EE4 00472CE4*/ PPC::Runtime::ASM::lmw(context->r25, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80475EE8 00472CE8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r1));
/*80475EEC 00472CEC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x40);
/*80475EF0 00472CF0*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80475EF4 00472CF4*/ PPC::Runtime::ASM::blr();
}