//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_gmGetClearcheckerP.hpp"



void fn_80041E0C(PPC::Runtime::GCContext* context)
{
/*80041E0C 0003EC0C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80041E10 0003EC10*/ PPC::Runtime::ASM::mflr(context->r0);
/*80041E14 0003EC14*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80041E18 0003EC18*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80041E1C 0003EC1C*/ PPC::Runtime::ASM::mr(context->r31, context->r5);
/*80041E20 0003EC20*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80041E24 0003EC24*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*80041E28 0003EC28*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80041E2C 0003EC2C*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*80041E30 0003EC30*/ PPC::Runtime::ASM::bl(fn_gmGetClearcheckerP);
/*80041E34 0003EC34*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x4);
/*80041E38 0003EC38*/ PPC::Runtime::ASM::addi(context->r3, context->r3, 0x4bc);
/*80041E3C 0003EC3C*/ PPC::Runtime::ASM::bne(.L_80041E84);
/*80041E40 0003EC40*/ PPC::Runtime::ASM::slwi(context->r0, context->r30, 4);
/*80041E44 0003EC44*/ PPC::Runtime::ASM::add(context->r4, context->r3, context->r0);
/*80041E48 0003EC48*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*80041E4C 0003EC4C*/ PPC::Runtime::ASM::extsb(context->r0, context->r0);
/*80041E50 0003EC50*/ PPC::Runtime::ASM::cmpwi(context->r0, -0x1);
/*80041E54 0003EC54*/ PPC::Runtime::ASM::bne(.L_80041E60);
/*80041E58 0003EC58*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*80041E5C 0003EC5C*/ PPC::Runtime::ASM::b(.L_80041EC8);
RUNTIME_PPC_JUMP_LABEL(.L_80041E60, 0x80041E60) //this is a jump label
/*80041E60 0003EC60*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*80041E64 0003EC64*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*80041E68 0003EC68*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*80041E6C 0003EC6C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*80041E70 0003EC70*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*80041E74 0003EC74*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r4));
/*80041E78 0003EC78*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80041E7C 0003EC7C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r31));
/*80041E80 0003EC80*/ PPC::Runtime::ASM::b(.L_80041EC4);
RUNTIME_PPC_JUMP_LABEL(.L_80041E84, 0x80041E84) //this is a jump label
/*80041E84 0003EC84*/ PPC::Runtime::ASM::slwi(context->r0, context->r30, 4);
/*80041E88 0003EC88*/ PPC::Runtime::ASM::add(context->r4, context->r3, context->r0);
/*80041E8C 0003EC8C*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x80, context->r4));
/*80041E90 0003EC90*/ PPC::Runtime::ASM::extsb(context->r0, context->r0);
/*80041E94 0003EC94*/ PPC::Runtime::ASM::cmpwi(context->r0, -0x1);
/*80041E98 0003EC98*/ PPC::Runtime::ASM::bne(.L_80041EA4);
/*80041E9C 0003EC9C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*80041EA0 0003ECA0*/ PPC::Runtime::ASM::b(.L_80041EC8);
RUNTIME_PPC_JUMP_LABEL(.L_80041EA4, 0x80041EA4) //this is a jump label
/*80041EA4 0003ECA4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x80, context->r4));
/*80041EA8 0003ECA8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x84, context->r4));
/*80041EAC 0003ECAC*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*80041EB0 0003ECB0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*80041EB4 0003ECB4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x88, context->r4));
/*80041EB8 0003ECB8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8c, context->r4));
/*80041EBC 0003ECBC*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r31));
/*80041EC0 0003ECC0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_80041EC4, 0x80041EC4) //this is a jump label
/*80041EC4 0003ECC4*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_80041EC8, 0x80041EC8) //this is a jump label
/*80041EC8 0003ECC8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80041ECC 0003ECCC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80041ED0 0003ECD0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80041ED4 0003ECD4*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80041ED8 0003ECD8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80041EDC 0003ECDC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80041EE0 0003ECE0*/ PPC::Runtime::ASM::blr();
}