//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80112044.hpp"
#include "fn_8011582C.hpp"



void fn_8012FE48(PPC::Runtime::GCContext* context)
{
/*8012FE48 0012CC48*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*8012FE4C 0012CC4C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8012FE50 0012CC50*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8012FE54 0012CC54*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8012FE58 0012CC58*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8012FE5C 0012CC5C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8012FE60 0012CC60*/ PPC::Runtime::ASM::bl(fn_80112044);
/*8012FE64 0012CC64*/ PPC::Runtime::ASM::addi(context->r30, context->r3, 0xd34);
/*8012FE68 0012CC68*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*8012FE6C 0012CC6C*/ PPC::Runtime::ASM::li(context->r31, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_8012FE70, 0x8012FE70) //this is a jump label
/*8012FE70 0012CC70*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*8012FE74 0012CC74*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*8012FE78 0012CC78*/ PPC::Runtime::ASM::beq(.L_8012FE84);
/*8012FE7C 0012CC7C*/ PPC::Runtime::ASM::bl(fn_8011582C);
/*8012FE80 0012CC80*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_8012FE84, 0x8012FE84) //this is a jump label
/*8012FE84 0012CC84*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
/*8012FE88 0012CC88*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x4);
/*8012FE8C 0012CC8C*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x4);
/*8012FE90 0012CC90*/ PPC::Runtime::ASM::blt(.L_8012FE70);
/*8012FE94 0012CC94*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8012FE98 0012CC98*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8012FE9C 0012CC9C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8012FEA0 0012CCA0*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8012FEA4 0012CCA4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8012FEA8 0012CCA8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*8012FEAC 0012CCAC*/ PPC::Runtime::ASM::blr();
}