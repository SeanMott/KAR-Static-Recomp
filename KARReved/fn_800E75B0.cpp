//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E75B0(PPC::Runtime::GCContext* context)
{
/*800E75B0 000E43B0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E75B4 000E43B4*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E75B8 000E43B8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E75BC 000E43BC*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E75C0 000E43C0*/ PPC::Runtime::ASM::fmr(context->f31, context->f2);
/*800E75C4 000E43C4*/ PPC::Runtime::ASM::stfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E75C8 000E43C8*/ PPC::Runtime::ASM::fmr(context->f30, context->f1);
/*800E75CC 000E43CC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E75D0 000E43D0*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E75D4 000E43D4*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E75D8 000E43D8*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E75DC 000E43DC*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E75E0 000E43E0*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E75E4 000E43E4*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E75E8 000E43E8*/ PPC::Runtime::ASM::beq(.L_800E75FC);
/*800E75EC 000E43EC*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E75F0 000E43F0*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E75F4 000E43F4*/ PPC::Runtime::ASM::li(context->r4, 0x19d);
/*800E75F8 000E43F8*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E75FC, 0x800E75FC) //this is a jump label
/*800E75FC 000E43FC*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E7600 000E4400*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E7604 000E4404*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x3);
/*800E7608 000E4408*/ PPC::Runtime::ASM::beq(.L_800E761C);
/*800E760C 000E440C*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E7610 000E4410*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x110);
/*800E7614 000E4414*/ PPC::Runtime::ASM::li(context->r4, 0x1a1);
/*800E7618 000E4418*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E761C, 0x800E761C) //this is a jump label
/*800E761C 000E441C*/ PPC::Runtime::ASM::stfs(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r30));
/*800E7620 000E4420*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r30));
/*800E7624 000E4424*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E7628 000E4428*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E762C 000E442C*/ PPC::Runtime::ASM::lfd(context->f30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7630 000E4430*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800E7634 000E4434*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800E7638 000E4438*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E763C 000E443C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E7640 000E4440*/ PPC::Runtime::ASM::blr();
}