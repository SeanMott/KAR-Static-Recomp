//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800EE73C.hpp"
#include "fn_801DFC64.hpp"
#include "fn_801DFDF8.hpp"
#include "fn_80114010.hpp"



void fn_event_formation_start(PPC::Runtime::GCContext* context)
{
/*80111CC0 0010EAC0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80111CC4 0010EAC4*/ PPC::Runtime::ASM::mflr(context->r0);
/*80111CC8 0010EAC8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80111CCC 0010EACC*/ PPC::Runtime::ASM::bl(fn_800EE73C);
/*80111CD0 0010EAD0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*80111CD4 0010EAD4*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*80111CD8 0010EAD8*/ PPC::Runtime::ASM::lfs(context->f2, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*80111CDC 0010EADC*/ PPC::Runtime::ASM::lfs(context->f3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*80111CE0 0010EAE0*/ PPC::Runtime::ASM::bl(fn_801DFC64);
/*80111CE4 0010EAE4*/ PPC::Runtime::ASM::addi(context->r3, context->r1, 0x8);
/*80111CE8 0010EAE8*/ PPC::Runtime::ASM::bl(fn_801DFDF8);
/*80111CEC 0010EAEC*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*80111CF0 0010EAF0*/ PPC::Runtime::ASM::beq(.L_80111CFC);
/*80111CF4 0010EAF4*/ PPC::Runtime::ASM::addi(context->r3, context->r1, 0x8);
/*80111CF8 0010EAF8*/ PPC::Runtime::ASM::bl(fn_80114010);
RUNTIME_PPC_JUMP_LABEL(.L_80111CFC, 0x80111CFC) //this is a jump label
/*80111CFC 0010EAFC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80111D00 0010EB00*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80111D04 0010EB04*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80111D08 0010EB08*/ PPC::Runtime::ASM::blr();
}