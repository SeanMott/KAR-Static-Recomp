//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80066F5C.hpp"



void fn_800BAC5C(PPC::Runtime::GCContext* context)
{
/*800BAC5C 000B7A5C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800BAC60 000B7A60*/ PPC::Runtime::ASM::mflr(context->r0);
/*800BAC64 000B7A64*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800BAC68 000B7A68*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800BAC6C 000B7A6C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800BAC70 000B7A70*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800BAC74 000B7A74*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*800BAC78 000B7A78*/ PPC::Runtime::ASM::blt(.L_800BAC84);
/*800BAC7C 000B7A7C*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x20);
/*800BAC80 000B7A80*/ PPC::Runtime::ASM::blt(.L_800BAC8C);
RUNTIME_PPC_JUMP_LABEL(.L_800BAC84, 0x800BAC84) //this is a jump label
/*800BAC84 000B7A84*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800BAC88 000B7A88*/ PPC::Runtime::ASM::b(.L_800BACA0);
RUNTIME_PPC_JUMP_LABEL(.L_800BAC8C, 0x800BAC8C) //this is a jump label
/*800BAC8C 000B7A8C*/ PPC::Runtime::ASM::lis(context->r4, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_HighBit);
/*800BAC90 000B7A90*/ PPC::Runtime::ASM::slwi(context->r0, context->r3, 2);
/*800BAC94 000B7A94*/ PPC::Runtime::ASM::addi(context->r3, context->r4, Struct_PlayerDataStruct_MayebASkipAddress @ Get_MemoryOffset_LowBit);
/*800BAC98 000B7A98*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*800BAC9C 000B7A9C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb0, context->r3));
RUNTIME_PPC_JUMP_LABEL(.L_800BACA0, 0x800BACA0) //this is a jump label
/*800BACA0 000B7AA0*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800BACA4 000B7AA4*/ PPC::Runtime::ASM::beq(.L_800BACB0);
/*800BACA8 000B7AA8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800BACAC 000B7AAC*/ PPC::Runtime::ASM::b(.L_800BACB4);
RUNTIME_PPC_JUMP_LABEL(.L_800BACB0, 0x800BACB0) //this is a jump label
/*800BACB0 000B7AB0*/ PPC::Runtime::ASM::li(context->r31, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800BACB4, 0x800BACB4) //this is a jump label
/*800BACB4 000B7AB4*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*800BACB8 000B7AB8*/ PPC::Runtime::ASM::beq(.L_800BACDC);
/*800BACBC 000B7ABC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*800BACC0 000B7AC0*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800BACC4 000B7AC4*/ PPC::Runtime::ASM::beq(.L_800BACDC);
/*800BACC8 000B7AC8*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800BACCC 000B7ACC*/ PPC::Runtime::ASM::bl(fn_80066F5C);
/*800BACD0 000B7AD0*/ PPC::Runtime::ASM::li(context->r0, 0x2);
/*800BACD4 000B7AD4*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x71, context->r31));
/*800BACD8 000B7AD8*/ PPC::Runtime::ASM::stb(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x72, context->r31));
RUNTIME_PPC_JUMP_LABEL(.L_800BACDC, 0x800BACDC) //this is a jump label
/*800BACDC 000B7ADC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800BACE0 000B7AE0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800BACE4 000B7AE4*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800BACE8 000B7AE8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800BACEC 000B7AEC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800BACF0 000B7AF0*/ PPC::Runtime::ASM::blr();
}