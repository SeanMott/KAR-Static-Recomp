//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800BC31C.hpp"
#include "fn_8019203C.hpp"
#include "fn_800BBC0C.hpp"



void fn_801D2584(PPC::Runtime::GCContext* context)
{
/*801D2584 001CF384*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801D2588 001CF388*/ PPC::Runtime::ASM::mflr(context->r0);
/*801D258C 001CF38C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801D2590 001CF390*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801D2594 001CF394*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801D2598 001CF398*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801D259C 001CF39C*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*801D25A0 001CF3A0*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r3));
/* 801D25A4 001CF3A4  54 00 CF FF */ extrwi. context->r0 , context->r0 , 1 , 24
/*801D25A8 001CF3A8*/ PPC::Runtime::ASM::bne(.L_801D2608);
/*801D25AC 001CF3AC*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc3c, context->r31));
/* 801D25B0 001CF3B0  54 00 FF FF */ extrwi. context->r0 , context->r0 , 1 , 30
/*801D25B4 001CF3B4*/ PPC::Runtime::ASM::bne(.L_801D2608);
/*801D25B8 001CF3B8*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*801D25BC 001CF3BC*/ PPC::Runtime::ASM::bl(fn_800BC31C);
/*801D25C0 001CF3C0*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x1);
/*801D25C4 001CF3C4*/ PPC::Runtime::ASM::bne(.L_801D2610);
/*801D25C8 001CF3C8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*801D25CC 001CF3CC*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*801D25D0 001CF3D0*/ PPC::Runtime::ASM::beq(.L_801D25FC);
/*801D25D4 001CF3D4*/ PPC::Runtime::ASM::bl(fn_8019203C);
/*801D25D8 001CF3D8*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801D25DC 001CF3DC*/ PPC::Runtime::ASM::cmpwi(context->r31, 0x5);
/*801D25E0 001CF3E0*/ PPC::Runtime::ASM::beq(.L_801D25FC);
/*801D25E4 001CF3E4*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*801D25E8 001CF3E8*/ PPC::Runtime::ASM::bl(fn_800BBC0C);
/*801D25EC 001CF3EC*/ PPC::Runtime::ASM::cmpw(context->r31, context->r3);
/*801D25F0 001CF3F0*/ PPC::Runtime::ASM::bne(.L_801D25FC);
/*801D25F4 001CF3F4*/ PPC::Runtime::ASM::li(context->r0, 0x1);
/*801D25F8 001CF3F8*/ PPC::Runtime::ASM::b(.L_801D2600);
RUNTIME_PPC_JUMP_LABEL(.L_801D25FC, 0x801D25FC) //this is a jump label
/*801D25FC 001CF3FC*/ PPC::Runtime::ASM::li(context->r0, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_801D2600, 0x801D2600) //this is a jump label
/*801D2600 001CF400*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*801D2604 001CF404*/ PPC::Runtime::ASM::beq(.L_801D2610);
RUNTIME_PPC_JUMP_LABEL(.L_801D2608, 0x801D2608) //this is a jump label
/*801D2608 001CF408*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*801D260C 001CF40C*/ PPC::Runtime::ASM::b(.L_801D2614);
RUNTIME_PPC_JUMP_LABEL(.L_801D2610, 0x801D2610) //this is a jump label
/*801D2610 001CF410*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_801D2614, 0x801D2614) //this is a jump label
/*801D2614 001CF414*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801D2618 001CF418*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801D261C 001CF41C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*801D2620 001CF420*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801D2624 001CF424*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801D2628 001CF428*/ PPC::Runtime::ASM::blr();
}