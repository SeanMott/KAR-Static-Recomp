//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80063610.hpp"
#include "fn_80063610.hpp"
#include "fn_801FD714.hpp"
#include "fn_800D2FB4.hpp"
#include "fn_801FD7BC.hpp"



void fn_8020DE90(PPC::Runtime::GCContext* context)
{
/*8020DE90 0020AC90*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x80, context->r1));
/*8020DE94 0020AC94*/ PPC::Runtime::ASM::mflr(context->r0);
/*8020DE98 0020AC98*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x84, context->r1));
/*8020DE9C 0020AC9C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7c, context->r1));
/*8020DEA0 0020ACA0*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x78, context->r1));
/*8020DEA4 0020ACA4*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*8020DEA8 0020ACA8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x950, context->r3));
/*8020DEAC 0020ACAC*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*8020DEB0 0020ACB0*/ PPC::Runtime::ASM::beq(.L_8020DFB4);
/*8020DEB4 0020ACB4*/ PPC::Runtime::ASM::bne(.L_8020DEC8);
/*8020DEB8 0020ACB8*/ PPC::Runtime::ASM::li(context->r3, lbl_805D7170 @ Get_MemoryOffset_SDA21);
/*8020DEBC 0020ACBC*/ PPC::Runtime::ASM::li(context->r4, 0x2dd);
/*8020DEC0 0020ACC0*/ PPC::Runtime::ASM::li(context->r5, lbl_805D7178 @ Get_MemoryOffset_SDA21);
/*8020DEC4 0020ACC4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_8020DEC8, 0x8020DEC8) //this is a jump label
/*8020DEC8 0020ACC8*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r31));
/*8020DECC 0020ACCC*/ PPC::Runtime::ASM::addi(context->r3, context->r1, 0x3c);
/*8020DED0 0020ACD0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r31));
/*8020DED4 0020ACD4*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x20);
/*8020DED8 0020ACD8*/ PPC::Runtime::ASM::stw(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x20, context->r1));
/*8020DEDC 0020ACDC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8020DEE0 0020ACE0*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r31));
/*8020DEE4 0020ACE4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r31));
/*8020DEE8 0020ACE8*/ PPC::Runtime::ASM::stw(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r1));
/*8020DEEC 0020ACEC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r1));
/*8020DEF0 0020ACF0*/ PPC::Runtime::ASM::bl(fn_HSD_MkRotationMtx);
/*8020DEF4 0020ACF4*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x44, context->r1));
/*8020DEF8 0020ACF8*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x14);
/*8020DEFC 0020ACFC*/ PPC::Runtime::ASM::lfs(context->f5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x54, context->r1));
/*8020DF00 0020AD00*/ PPC::Runtime::ASM::mr(context->r5, context->r4);
/*8020DF04 0020AD04*/ PPC::Runtime::ASM::lfs(context->f4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x64, context->r1));
/*8020DF08 0020AD08*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x334);
/*8020DF0C 0020AD0C*/ PPC::Runtime::ASM::lfs(context->f3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x40, context->r1));
/*8020DF10 0020AD10*/ PPC::Runtime::ASM::lfs(context->f2, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x50, context->r1));
/*8020DF14 0020AD14*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x60, context->r1));
/*8020DF18 0020AD18*/ PPC::Runtime::ASM::stfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020DF1C 0020AD1C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E24C4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020DF20 0020AD20*/ PPC::Runtime::ASM::stfs(context->f5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8020DF24 0020AD24*/ PPC::Runtime::ASM::stfs(context->f4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8020DF28 0020AD28*/ PPC::Runtime::ASM::stfs(context->f3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8020DF2C 0020AD2C*/ PPC::Runtime::ASM::stfs(context->f2, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8020DF30 0020AD30*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*8020DF34 0020AD34*/ PPC::Runtime::ASM::bl(fn_80063610);
/*8020DF38 0020AD38*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x8);
/*8020DF3C 0020AD3C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E24C4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020DF40 0020AD40*/ PPC::Runtime::ASM::mr(context->r5, context->r4);
/*8020DF44 0020AD44*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x340);
/*8020DF48 0020AD48*/ PPC::Runtime::ASM::bl(fn_80063610);
/*8020DF4C 0020AD4C*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*8020DF50 0020AD50*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x14);
/*8020DF54 0020AD54*/ PPC::Runtime::ASM::addi(context->r5, context->r1, 0x8);
/*8020DF58 0020AD58*/ PPC::Runtime::ASM::bl(fn_801FD714);
/*8020DF5C 0020AD5C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x950, context->r30));
/*8020DF60 0020AD60*/ PPC::Runtime::ASM::addi(context->r4, context->r1, 0x30);
/*8020DF64 0020AD64*/ PPC::Runtime::ASM::bl(fn_800D2FB4);
/*8020DF68 0020AD68*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r1));
/*8020DF6C 0020AD6C*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x55c, context->r30));
/*8020DF70 0020AD70*/ PPC::Runtime::ASM::fsubs(context->f0, context->f1, context->f0);
/*8020DF74 0020AD74*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2ec, context->r30));
/*8020DF78 0020AD78*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*8020DF7C 0020AD7C*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x560, context->r30));
/*8020DF80 0020AD80*/ PPC::Runtime::ASM::fsubs(context->f0, context->f1, context->f0);
/*8020DF84 0020AD84*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2f0, context->r30));
/*8020DF88 0020AD88*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r1));
/*8020DF8C 0020AD8C*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x564, context->r30));
/*8020DF90 0020AD90*/ PPC::Runtime::ASM::fsubs(context->f0, context->f1, context->f0);
/*8020DF94 0020AD94*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2f4, context->r30));
/*8020DF98 0020AD98*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x30, context->r1));
/*8020DF9C 0020AD9C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r1));
/*8020DFA0 0020ADA0*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x55c, context->r30));
/*8020DFA4 0020ADA4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x560, context->r30));
/*8020DFA8 0020ADA8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r1));
/*8020DFAC 0020ADAC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x564, context->r30));
/*8020DFB0 0020ADB0*/ PPC::Runtime::ASM::b(.L_8020DFD0);
RUNTIME_PPC_JUMP_LABEL(.L_8020DFB4, 0x8020DFB4) //this is a jump label
/*8020DFB4 0020ADB4*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb0a, context->r30));
/*8020DFB8 0020ADB8*/ PPC::Runtime::ASM::extrwi(context->r0, context->r0, 2, 25);
/*8020DFBC 0020ADBC*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x1);
/*8020DFC0 0020ADC0*/ PPC::Runtime::ASM::beq(.L_8020DFD0);
/*8020DFC4 0020ADC4*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3a8, context->r30));
/*8020DFC8 0020ADC8*/ PPC::Runtime::ASM::addi(context->r4, context->r30, 0x2e0);
/*8020DFCC 0020ADCC*/ PPC::Runtime::ASM::bl(fn_801FD7BC);
RUNTIME_PPC_JUMP_LABEL(.L_8020DFD0, 0x8020DFD0) //this is a jump label
/*8020DFD0 0020ADD0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x84, context->r1));
/*8020DFD4 0020ADD4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x7c, context->r1));
/*8020DFD8 0020ADD8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x78, context->r1));
/*8020DFDC 0020ADDC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8020DFE0 0020ADE0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x80);
/*8020DFE4 0020ADE4*/ PPC::Runtime::ASM::blr();
}