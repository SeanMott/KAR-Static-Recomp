//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80057D14.hpp"



void fn_800589E4(PPC::Runtime::GCContext* context)
{
/*800589E4 000557E4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800589E8 000557E8*/ PPC::Runtime::ASM::mflr(context->r0);
/*800589EC 000557EC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800589F0 000557F0*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800589F4 000557F4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800589F8 000557F8*/ PPC::Runtime::ASM::mr(context->r30, context->r5);
/*800589FC 000557FC*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80058A00 00055800*/ PPC::Runtime::ASM::mr(context->r29, context->r4);
/*80058A04 00055804*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*80058A08 00055808*/ PPC::Runtime::ASM::mr(context->r28, context->r3);
/*80058A0C 0005580C*/ PPC::Runtime::ASM::bl(OSDisableInterrupts);
/*80058A10 00055810*/ PPC::Runtime::ASM::mulli(context->r5, context->r28, 0x1c);
/*80058A14 00055814*/ PPC::Runtime::ASM::lis(context->r4, STRUCT_BYTE4_COUNT_180537F40 @ Get_MemoryOffset_HighBit);
/*80058A18 00055818*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x0);
/*80058A1C 0005581C*/ PPC::Runtime::ASM::addi(context->r0, context->r4, STRUCT_BYTE4_COUNT_180537F40 @ Get_MemoryOffset_LowBit);
/*80058A20 00055820*/ PPC::Runtime::ASM::add(context->r4, context->r0, context->r5);
/*80058A24 00055824*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*80058A28 00055828*/ PPC::Runtime::ASM::addi(context->r3, context->r4, 0x10);
/*80058A2C 0005582C*/ PPC::Runtime::ASM::beq(.L_80058A38);
/*80058A30 00055830*/ PPC::Runtime::ASM::cmpwi(context->r28, 0x1);
/*80058A34 00055834*/ PPC::Runtime::ASM::bne(.L_80058A40);
RUNTIME_PPC_JUMP_LABEL(.L_80058A38, 0x80058A38) //this is a jump label
/*80058A38 00055838*/ PPC::Runtime::ASM::li(context->r30, 0x0);
/*80058A3C 0005583C*/ PPC::Runtime::ASM::b(.L_80058A54);
RUNTIME_PPC_JUMP_LABEL(.L_80058A40, 0x80058A40) //this is a jump label
/*80058A40 00055840*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*80058A44 00055844*/ PPC::Runtime::ASM::mr(context->r4, context->r29);
/*80058A48 00055848*/ PPC::Runtime::ASM::mr(context->r5, context->r30);
/*80058A4C 0005584C*/ PPC::Runtime::ASM::bl(fn_80057D14);
/*80058A50 00055850*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
RUNTIME_PPC_JUMP_LABEL(.L_80058A54, 0x80058A54) //this is a jump label
/*80058A54 00055854*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80058A58 00055858*/ PPC::Runtime::ASM::bl(OSRestoreInterrupts);
/*80058A5C 0005585C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80058A60 00055860*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*80058A64 00055864*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80058A68 00055868*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80058A6C 0005586C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80058A70 00055870*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*80058A74 00055874*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80058A78 00055878*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80058A7C 0005587C*/ PPC::Runtime::ASM::blr();
}