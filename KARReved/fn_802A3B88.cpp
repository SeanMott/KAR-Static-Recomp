//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_802854CC.hpp"
#include "fn_80285960.hpp"
#include "fn_802854CC.hpp"
#include "fn_802854CC.hpp"
#include "fn_80285960.hpp"
#include "fn_802854CC.hpp"
#include "fn_80285960.hpp"
#include "fn_802854CC.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_802854CC.hpp"
#include "fn_802854CC.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_80285960.hpp"
#include "fn_802854CC.hpp"
#include "fn_80286188.hpp"
#include "fn_80285130.hpp"



void fn_802A3B88(PPC::Runtime::GCContext* context)
{
/*802A3B88 002A0988*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*802A3B8C 002A098C*/ PPC::Runtime::ASM::mflr(context->r0);
/*802A3B90 002A0990*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*802A3B94 002A0994*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*802A3B98 002A0998*/ PPC::Runtime::ASM::mr(context->r31, context->r4);
/*802A3B9C 002A099C*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/* 802A3BA0 002A09A0  7C 7E 1B 79 */ mr. context->r30 , context->r3
/*802A3BA4 002A09A4*/ PPC::Runtime::ASM::beq(.L_802A3D3C);
/*802A3BA8 002A09A8*/ PPC::Runtime::ASM::lis(context->r4, lbl_804CB250 @ Get_MemoryOffset_HighBit);
/*802A3BAC 002A09AC*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x18d0);
/*802A3BB0 002A09B0*/ PPC::Runtime::ASM::addi(context->r6, context->r4, lbl_804CB250 @ Get_MemoryOffset_LowBit);
/*802A3BB4 002A09B4*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3BB8 002A09B8*/ PPC::Runtime::ASM::stw(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*802A3BBC 002A09BC*/ PPC::Runtime::ASM::addi(context->r5, context->r6, 0x10);
/*802A3BC0 002A09C0*/ PPC::Runtime::ASM::addi(context->r0, context->r6, 0x58);
/*802A3BC4 002A09C4*/ PPC::Runtime::ASM::stw(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*802A3BC8 002A09C8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r30));
/*802A3BCC 002A09CC*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3BD0 002A09D0*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1810);
/*802A3BD4 002A09D4*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3BD8 002A09D8*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3BDC 002A09DC*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1750);
/*802A3BE0 002A09E0*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3BE4 002A09E4*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3BE8 002A09E8*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1690);
/*802A3BEC 002A09EC*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3BF0 002A09F0*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3BF4 002A09F4*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x158c);
/*802A3BF8 002A09F8*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3BFC 002A09FC*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C00 002A0A00*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x14cc);
/*802A3C04 002A0A04*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C08 002A0A08*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C0C 002A0A0C*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x13c8);
/*802A3C10 002A0A10*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C14 002A0A14*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C18 002A0A18*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x12c4);
/*802A3C1C 002A0A1C*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C20 002A0A20*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C24 002A0A24*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1204);
/*802A3C28 002A0A28*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C2C 002A0A2C*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C30 002A0A30*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1100);
/*802A3C34 002A0A34*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C38 002A0A38*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C3C 002A0A3C*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1040);
/*802A3C40 002A0A40*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C44 002A0A44*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C48 002A0A48*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xf3c);
/*802A3C4C 002A0A4C*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C50 002A0A50*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C54 002A0A54*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xe7c);
/*802A3C58 002A0A58*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C5C 002A0A5C*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C60 002A0A60*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xdbc);
/*802A3C64 002A0A64*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C68 002A0A68*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C6C 002A0A6C*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xcfc);
/*802A3C70 002A0A70*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C74 002A0A74*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C78 002A0A78*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xbf8);
/*802A3C7C 002A0A7C*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C80 002A0A80*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C84 002A0A84*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xaf4);
/*802A3C88 002A0A88*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C8C 002A0A8C*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3C90 002A0A90*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0xa34);
/*802A3C94 002A0A94*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3C98 002A0A98*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3C9C 002A0A9C*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x974);
/*802A3CA0 002A0AA0*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CA4 002A0AA4*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CA8 002A0AA8*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x8b4);
/*802A3CAC 002A0AAC*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CB0 002A0AB0*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CB4 002A0AB4*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x7f4);
/*802A3CB8 002A0AB8*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CBC 002A0ABC*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CC0 002A0AC0*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x734);
/*802A3CC4 002A0AC4*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CC8 002A0AC8*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CCC 002A0ACC*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x674);
/*802A3CD0 002A0AD0*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CD4 002A0AD4*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CD8 002A0AD8*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x5b4);
/*802A3CDC 002A0ADC*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CE0 002A0AE0*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CE4 002A0AE4*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x4f4);
/*802A3CE8 002A0AE8*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CEC 002A0AEC*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CF0 002A0AF0*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x434);
/*802A3CF4 002A0AF4*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3CF8 002A0AF8*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3CFC 002A0AFC*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x374);
/*802A3D00 002A0B00*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3D04 002A0B04*/ PPC::Runtime::ASM::bl(fn_80285960);
/*802A3D08 002A0B08*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x270);
/*802A3D0C 002A0B0C*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3D10 002A0B10*/ PPC::Runtime::ASM::bl(fn_802854CC);
/*802A3D14 002A0B14*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x1b0);
/*802A3D18 002A0B18*/ PPC::Runtime::ASM::li(context->r4, -0x1);
/*802A3D1C 002A0B1C*/ PPC::Runtime::ASM::bl(fn_80286188);
/*802A3D20 002A0B20*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*802A3D24 002A0B24*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*802A3D28 002A0B28*/ PPC::Runtime::ASM::bl(fn_80285130);
/*802A3D2C 002A0B2C*/ PPC::Runtime::ASM::extsh.(context->r0, context->r31);
/*802A3D30 002A0B30*/ PPC::Runtime::ASM::ble(.L_802A3D3C);
/*802A3D34 002A0B34*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*802A3D38 002A0B38*/ PPC::Runtime::ASM::bl(fn_8038CB78);
RUNTIME_PPC_JUMP_LABEL(.L_802A3D3C, 0x802A3D3C) //this is a jump label
/*802A3D3C 002A0B3C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*802A3D40 002A0B40*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*802A3D44 002A0B44*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*802A3D48 002A0B48*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*802A3D4C 002A0B4C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*802A3D50 002A0B50*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*802A3D54 002A0B54*/ PPC::Runtime::ASM::blr();
}