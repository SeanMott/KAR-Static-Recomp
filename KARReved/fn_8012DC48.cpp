//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80112044.hpp"
#include "fn_8011582C.hpp"



void fn_8012DC48(PPC::Runtime::GCContext* context)
{
/*8012DC48 0012AA48*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*8012DC4C 0012AA4C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8012DC50 0012AA50*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8012DC54 0012AA54*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8012DC58 0012AA58*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8012DC5C 0012AA5C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8012DC60 0012AA60*/ PPC::Runtime::ASM::bl(fn_80112044);
/*8012DC64 0012AA64*/ PPC::Runtime::ASM::addi(context->r30, context->r3, 0x700);
/*8012DC68 0012AA68*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*8012DC6C 0012AA6C*/ PPC::Runtime::ASM::li(context->r31, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_8012DC70, 0x8012DC70) //this is a jump label
/*8012DC70 0012AA70*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*8012DC74 0012AA74*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*8012DC78 0012AA78*/ PPC::Runtime::ASM::beq(.L_8012DC84);
/*8012DC7C 0012AA7C*/ PPC::Runtime::ASM::bl(fn_8011582C);
/*8012DC80 0012AA80*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_8012DC84, 0x8012DC84) //this is a jump label
/*8012DC84 0012AA84*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
/*8012DC88 0012AA88*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x4);
/*8012DC8C 0012AA8C*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x4);
/*8012DC90 0012AA90*/ PPC::Runtime::ASM::blt(.L_8012DC70);
/*8012DC94 0012AA94*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*8012DC98 0012AA98*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*8012DC9C 0012AA9C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*8012DCA0 0012AAA0*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8012DCA4 0012AAA4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8012DCA8 0012AAA8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*8012DCAC 0012AAAC*/ PPC::Runtime::ASM::blr();
}