//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_debug_memCard_reqDelete.hpp"
#include "fn_8007863C.hpp"



void fn_800AFAB4(PPC::Runtime::GCContext* context)
{
/*800AFAB4 000AC8B4*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800AFAB8 000AC8B8*/ PPC::Runtime::ASM::mflr(context->r0);
/*800AFABC 000AC8BC*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x1);
/*800AFAC0 000AC8C0*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_750 @ Get_MemoryOffset_HighBit);
/*800AFAC4 000AC8C4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800AFAC8 000AC8C8*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800AFACC 000AC8CC*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800AFAD0 000AC8D0*/ PPC::Runtime::ASM::addi(context->r30, context->r3, MemoryOffset_750 @ Get_MemoryOffset_LowBit);
/*800AFAD4 000AC8D4*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800AFAD8 000AC8D8*/ PPC::Runtime::ASM::bne(.L_800AFB48);
/*800AFADC 000AC8DC*/ PPC::Runtime::ASM::bl(fn_debug_memCard_reqDelete);
/*800AFAE0 000AC8E0*/ PPC::Runtime::ASM::li(context->r29, 0x708);
RUNTIME_PPC_JUMP_LABEL(.L_800AFAE4, 0x800AFAE4) //this is a jump label
/*800AFAE4 000AC8E4*/ PPC::Runtime::ASM::bl(fn_8007863C);
/*800AFAE8 000AC8E8*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*800AFAEC 000AC8EC*/ PPC::Runtime::ASM::cmpwi(context->r31, 0xb);
/*800AFAF0 000AC8F0*/ PPC::Runtime::ASM::bne(.L_800AFAFC);
/*800AFAF4 000AC8F4*/ PPC::Runtime::ASM::bl(fn_8045BB60);
/*800AFAF8 000AC8F8*/ PPC::Runtime::ASM::b(.L_800AFB24);
RUNTIME_PPC_JUMP_LABEL(.L_800AFAFC, 0x800AFAFC) //this is a jump label
/*800AFAFC 000AC8FC*/ PPC::Runtime::ASM::li(context->r3, lbl_805D5FC8 @ Get_MemoryOffset_SDA21);
/*800AFB00 000AC900*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800AFB04 000AC904*/ PPC::Runtime::ASM::bl(OSReport);
/*800AFB08 000AC908*/ PPC::Runtime::ASM::slwi(context->r0, context->r31, 2);
/*800AFB0C 000AC90C*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x2e8);
/*800AFB10 000AC910*/ PPC::Runtime::ASM::lwzx(context->r4, context->r3, context->r0);
/*800AFB14 000AC914*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x354);
/*800AFB18 000AC918*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800AFB1C 000AC91C*/ PPC::Runtime::ASM::bl(OSReport);
/*800AFB20 000AC920*/ PPC::Runtime::ASM::b(.L_800AFB48);
RUNTIME_PPC_JUMP_LABEL(.L_800AFB24, 0x800AFB24) //this is a jump label
/*800AFB24 000AC924*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x0);
/*800AFB28 000AC928*/ PPC::Runtime::ASM::subi(context->r29, context->r29, 0x1);
/*800AFB2C 000AC92C*/ PPC::Runtime::ASM::bge(.L_800AFB40);
/*800AFB30 000AC930*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x370);
/*800AFB34 000AC934*/ PPC::Runtime::ASM::crclr(context->cr1eq);
/*800AFB38 000AC938*/ PPC::Runtime::ASM::bl(OSReport);
/*800AFB3C 000AC93C*/ PPC::Runtime::ASM::b(.L_800AFB48);
RUNTIME_PPC_JUMP_LABEL(.L_800AFB40, 0x800AFB40) //this is a jump label
/*800AFB40 000AC940*/ PPC::Runtime::ASM::bl(fn_VIWaitForRetrace);
/*800AFB44 000AC944*/ PPC::Runtime::ASM::b(.L_800AFAE4);
RUNTIME_PPC_JUMP_LABEL(.L_800AFB48, 0x800AFB48) //this is a jump label
/*800AFB48 000AC948*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800AFB4C 000AC94C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800AFB50 000AC950*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800AFB54 000AC954*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800AFB58 000AC958*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800AFB5C 000AC95C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800AFB60 000AC960*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800AFB64 000AC964*/ PPC::Runtime::ASM::blr();
}