//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80205310.hpp"
#include "fn_80204FAC.hpp"
#include "fn_801FC398.hpp"
#include "fn_80206E1C.hpp"
#include "fn_80209CE4.hpp"
#include "fn_8021A0E0.hpp"



void fn_80211444(PPC::Runtime::GCContext* context)
{
/*80211444 0020E244*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80211448 0020E248*/ PPC::Runtime::ASM::mflr(context->r0);
/*8021144C 0020E24C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80211450 0020E250*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80211454 0020E254*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*80211458 0020E258*/ PPC::Runtime::ASM::lfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3c0, context->r3));
/*8021145C 0020E25C*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r3));
/*80211460 0020E260*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x908, context->r3));
/*80211464 0020E264*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*80211468 0020E268*/ PPC::Runtime::ASM::bne(.L_8021148C);
/*8021146C 0020E26C*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*80211470 0020E270*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E2558 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*80211474 0020E274*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x908, context->r31));
/*80211478 0020E278*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E2554 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8021147C 0020E27C*/ PPC::Runtime::ASM::bl(fn_80205310);
/*80211480 0020E280*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r31));
/*80211484 0020E284*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*80211488 0020E288*/ PPC::Runtime::ASM::bl(fn_80204FAC);
RUNTIME_PPC_JUMP_LABEL(.L_8021148C, 0x8021148C) //this is a jump label
/*8021148C 0020E28C*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb0a, context->r31));
/*80211490 0020E290*/ PPC::Runtime::ASM::li(context->r4, 0x1);
/*80211494 0020E294*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r4, 7, 24, 24);
/*80211498 0020E298*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E2550 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8021149C 0020E29C*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb0a, context->r31));
/*802114A0 0020E2A0*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*802114A4 0020E2A4*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*802114A8 0020E2A8*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E2554 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*802114AC 0020E2AC*/ PPC::Runtime::ASM::stw(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x87c, context->r31));
/*802114B0 0020E2B0*/ PPC::Runtime::ASM::li(context->r4, 0xf);
/*802114B4 0020E2B4*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*802114B8 0020E2B8*/ PPC::Runtime::ASM::bl(fn_801FC398);
/*802114BC 0020E2BC*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*802114C0 0020E2C0*/ PPC::Runtime::ASM::li(context->r4, 0x1);
/*802114C4 0020E2C4*/ PPC::Runtime::ASM::bl(fn_80206E1C);
/*802114C8 0020E2C8*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*802114CC 0020E2CC*/ PPC::Runtime::ASM::li(context->r4, 0x0);
/*802114D0 0020E2D0*/ PPC::Runtime::ASM::bl(fn_80209CE4);
/*802114D4 0020E2D4*/ PPC::Runtime::ASM::li(context->r3, -0x1);
/*802114D8 0020E2D8*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*802114DC 0020E2DC*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb4c, context->r31));
/*802114E0 0020E2E0*/ PPC::Runtime::ASM::sth(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb50, context->r31));
/*802114E4 0020E2E4*/ PPC::Runtime::ASM::sth(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb52, context->r31));
/*802114E8 0020E2E8*/ PPC::Runtime::ASM::sth(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb54, context->r31));
/*802114EC 0020E2EC*/ PPC::Runtime::ASM::sth(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb56, context->r31));
/*802114F0 0020E2F0*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb48, context->r31));
/*802114F4 0020E2F4*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb4a, context->r31));
/*802114F8 0020E2F8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*802114FC 0020E2FC*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*80211500 0020E300*/ PPC::Runtime::ASM::beq(.L_8021150C);
/*80211504 0020E304*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*80211508 0020E308*/ PPC::Runtime::ASM::bl(fn_8021A0E0);
RUNTIME_PPC_JUMP_LABEL(.L_8021150C, 0x8021150C) //this is a jump label
/*8021150C 0020E30C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80211510 0020E310*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80211514 0020E314*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80211518 0020E318*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8021151C 0020E31C*/ PPC::Runtime::ASM::blr();
}