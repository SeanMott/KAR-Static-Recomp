//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801DD17C.hpp"
#include "fn_801E3AFC.hpp"



void fn_801E3A20(PPC::Runtime::GCContext* context)
{
/*801E3A20 001E0820*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801E3A24 001E0824*/ PPC::Runtime::ASM::mflr(context->r0);
/*801E3A28 001E0828*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801E3A2C 001E082C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801E3A30 001E0830*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801E3A34 001E0834*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc4, context->r3));
/* 801E3A38 001E0838  54 00 DF FF */ extrwi. context->r0 , context->r0 , 1 , 26
/*801E3A3C 001E083C*/ PPC::Runtime::ASM::beq(.L_801E3A68);
/*801E3A40 001E0840*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r31));
/*801E3A44 001E0844*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r31));
/*801E3A48 001E0848*/ PPC::Runtime::ASM::lwz(context->r5, STRUCT_BYTE4_COUNT_1805DD844 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801E3A4C 001E084C*/ PPC::Runtime::ASM::slwi(context->r4, context->r4, 2);
/*801E3A50 001E0850*/ PPC::Runtime::ASM::mulli(context->r0, context->r0, 0x94);
/*801E3A54 001E0854*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E1D8C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801E3A58 001E0858*/ PPC::Runtime::ASM::lwzx(context->r4, context->r5, context->r4);
/*801E3A5C 001E085C*/ PPC::Runtime::ASM::add(context->r4, context->r4, context->r0);
/*801E3A60 001E0860*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r4));
/*801E3A64 001E0864*/ PPC::Runtime::ASM::bl(fn_801DD17C);
RUNTIME_PPC_JUMP_LABEL(.L_801E3A68, 0x801E3A68) //this is a jump label
/*801E3A68 001E0868*/ PPC::Runtime::ASM::lfs(context->f2, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1ba0, context->r31));
/*801E3A6C 001E086C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E1D8C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801E3A70 001E0870*/ PPC::Runtime::ASM::lfs(context->f0, STRUCT_FLOAT_COUNT_1805E1D88 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801E3A74 001E0874*/ PPC::Runtime::ASM::fsubs(context->f1, context->f2, context->f1);
/*801E3A78 001E0878*/ PPC::Runtime::ASM::stfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1ba0, context->r31));
/*801E3A7C 001E087C*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1ba0, context->r31));
/*801E3A80 001E0880*/ PPC::Runtime::ASM::fcmpo(cr0, context->f1, context->f0);
/*801E3A84 001E0884*/ PPC::Runtime::ASM::bge(.L_801E3A9C);
/*801E3A88 001E0888*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc4, context->r31));
/* 801E3A8C 001E088C  54 00 DF FF */ extrwi. context->r0 , context->r0 , 1 , 26
/*801E3A90 001E0890*/ PPC::Runtime::ASM::beq(.L_801E3A9C);
/*801E3A94 001E0894*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801E3A98 001E0898*/ PPC::Runtime::ASM::bl(fn_801E3AFC);
RUNTIME_PPC_JUMP_LABEL(.L_801E3A9C, 0x801E3A9C) //this is a jump label
/*801E3A9C 001E089C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801E3AA0 001E08A0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801E3AA4 001E08A4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801E3AA8 001E08A8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801E3AAC 001E08AC*/ PPC::Runtime::ASM::blr();
}