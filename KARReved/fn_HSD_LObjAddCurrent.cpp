//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_HSD_LObjDeleteCurrent.hpp"
#include "fn___assert.hpp"
#include "fn___assert.hpp"
#include "fn___assert.hpp"
#include "fn_HSD_SListPrepend.hpp"



void fn_HSD_LObjAddCurrent(PPC::Runtime::GCContext* context)
{
/*803FF080 003FBE80*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*803FF084 003FBE84*/ PPC::Runtime::ASM::mflr(context->r0);
/*803FF088 003FBE88*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*803FF08C 003FBE8C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*803FF090 003FBE90*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*803FF094 003FBE94*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803FF098 003FBE98*/ PPC::Runtime::ASM::stw(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/* 803FF09C 003FBE9C  7C 7C 1B 79 */ mr. context->r28 , context->r3
/*803FF0A0 003FBEA0*/ PPC::Runtime::ASM::beq(.L_803FF180);
/*803FF0A4 003FBEA4*/ PPC::Runtime::ASM::lwz(context->r3, STRUCT_BYTE4_COUNT_1805DE20C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*803FF0A8 003FBEA8*/ PPC::Runtime::ASM::b(.L_803FF0C8);
RUNTIME_PPC_JUMP_LABEL(.L_803FF0AC, 0x803FF0AC) //this is a jump label
/*803FF0AC 003FBEAC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*803FF0B0 003FBEB0*/ PPC::Runtime::ASM::cmplw(context->r0, context->r28);
/*803FF0B4 003FBEB4*/ PPC::Runtime::ASM::bne(.L_803FF0C4);
/*803FF0B8 003FBEB8*/ PPC::Runtime::ASM::mr(context->r3, context->r28);
/*803FF0BC 003FBEBC*/ PPC::Runtime::ASM::bl(fn_HSD_LObjDeleteCurrent);
/*803FF0C0 003FBEC0*/ PPC::Runtime::ASM::b(.L_803FF0D0);
RUNTIME_PPC_JUMP_LABEL(.L_803FF0C4, 0x803FF0C4) //this is a jump label
/*803FF0C4 003FBEC4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
RUNTIME_PPC_JUMP_LABEL(.L_803FF0C8, 0x803FF0C8) //this is a jump label
/*803FF0C8 003FBEC8*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*803FF0CC 003FBECC*/ PPC::Runtime::ASM::bne(.L_803FF0AC);
RUNTIME_PPC_JUMP_LABEL(.L_803FF0D0, 0x803FF0D0) //this is a jump label
/*803FF0D0 003FBED0*/ PPC::Runtime::ASM::cmplwi(context->r28, 0x0);
/*803FF0D4 003FBED4*/ PPC::Runtime::ASM::beq(.L_803FF108);
/*803FF0D8 003FBED8*/ PPC::Runtime::ASM::lhz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r28));
/*803FF0DC 003FBEDC*/ PPC::Runtime::ASM::addi(context->r0, context->r3, 0x1);
/*803FF0E0 003FBEE0*/ PPC::Runtime::ASM::sth(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r28));
/*803FF0E4 003FBEE4*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r28));
/*803FF0E8 003FBEE8*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xffff);
/*803FF0EC 003FBEEC*/ PPC::Runtime::ASM::bne(.L_803FF108);
/*803FF0F0 003FBEF0*/ PPC::Runtime::ASM::lis(context->r3, lbl_80503204 @ Get_MemoryOffset_HighBit);
/*803FF0F4 003FBEF4*/ PPC::Runtime::ASM::lis(context->r5, lbl_80503210 @ Get_MemoryOffset_HighBit);
/*803FF0F8 003FBEF8*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_80503204 @ Get_MemoryOffset_LowBit);
/*803FF0FC 003FBEFC*/ PPC::Runtime::ASM::li(context->r4, 0x5d);
/*803FF100 003FBF00*/ PPC::Runtime::ASM::addi(context->r5, context->r5, lbl_80503210 @ Get_MemoryOffset_LowBit);
/*803FF104 003FBF04*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_803FF108, 0x803FF108) //this is a jump label
/*803FF108 003FBF08*/ PPC::Runtime::ASM::li(context->r29, STRUCT_BYTE4_COUNT_1805DE20C @ Get_MemoryOffset_SDA21);
/*803FF10C 003FBF0C*/ PPC::Runtime::ASM::b(.L_803FF164);
RUNTIME_PPC_JUMP_LABEL(.L_803FF110, 0x803FF110) //this is a jump label
/*803FF110 003FBF10*/ PPC::Runtime::ASM::cmplwi(context->r28, 0x0);
/*803FF114 003FBF14*/ PPC::Runtime::ASM::bne(.L_803FF128);
/*803FF118 003FBF18*/ PPC::Runtime::ASM::li(context->r3, MemoryOffset_592 @ Get_MemoryOffset_SDA21);
/*803FF11C 003FBF1C*/ PPC::Runtime::ASM::li(context->r4, 0x163);
/*803FF120 003FBF20*/ PPC::Runtime::ASM::li(context->r5, MemoryOffset_591 @ Get_MemoryOffset_SDA21);
/*803FF124 003FBF24*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_803FF128, 0x803FF128) //this is a jump label
/*803FF128 003FBF28*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*803FF12C 003FBF2C*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r28));
/*803FF130 003FBF30*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*803FF134 003FBF34*/ PPC::Runtime::ASM::clrlwi(context->r30, context->r0, 24);
/*803FF138 003FBF38*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*803FF13C 003FBF3C*/ PPC::Runtime::ASM::bne(.L_803FF150);
/*803FF140 003FBF40*/ PPC::Runtime::ASM::li(context->r3, MemoryOffset_592 @ Get_MemoryOffset_SDA21);
/*803FF144 003FBF44*/ PPC::Runtime::ASM::li(context->r4, 0x163);
/*803FF148 003FBF48*/ PPC::Runtime::ASM::li(context->r5, MemoryOffset_591 @ Get_MemoryOffset_SDA21);
/*803FF14C 003FBF4C*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_803FF150, 0x803FF150) //this is a jump label
/*803FF150 003FBF50*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r31));
/*803FF154 003FBF54*/ PPC::Runtime::ASM::clrlwi(context->r0, context->r0, 24);
/*803FF158 003FBF58*/ PPC::Runtime::ASM::cmplw(context->r0, context->r30);
/*803FF15C 003FBF5C*/ PPC::Runtime::ASM::bgt(.L_803FF170);
/*803FF160 003FBF60*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
RUNTIME_PPC_JUMP_LABEL(.L_803FF164, 0x803FF164) //this is a jump label
/*803FF164 003FBF64*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*803FF168 003FBF68*/ PPC::Runtime::ASM::cmplwi(context->r0, 0x0);
/*803FF16C 003FBF6C*/ PPC::Runtime::ASM::bne(.L_803FF110);
RUNTIME_PPC_JUMP_LABEL(.L_803FF170, 0x803FF170) //this is a jump label
/*803FF170 003FBF70*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*803FF174 003FBF74*/ PPC::Runtime::ASM::mr(context->r4, context->r28);
/*803FF178 003FBF78*/ PPC::Runtime::ASM::bl(fn_HSD_SListPrepend);
/*803FF17C 003FBF7C*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
RUNTIME_PPC_JUMP_LABEL(.L_803FF180, 0x803FF180) //this is a jump label
/*803FF180 003FBF80*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*803FF184 003FBF84*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*803FF188 003FBF88*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*803FF18C 003FBF8C*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*803FF190 003FBF90*/ PPC::Runtime::ASM::lwz(context->r28, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*803FF194 003FBF94*/ PPC::Runtime::ASM::mtlr(context->r0);
/*803FF198 003FBF98*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*803FF19C 003FBF9C*/ PPC::Runtime::ASM::blr();
}