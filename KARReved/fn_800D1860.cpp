//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800D1860(PPC::Runtime::GCContext* context)
{
/*800D1860 000CE660*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800D1864 000CE664*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D1868 000CE668*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800D186C 000CE66C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800D1870 000CE670*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800D1874 000CE674*/ PPC::Runtime::ASM::slwi(context->r30, context->r3, 6);
/*800D1878 000CE678*/ PPC::Runtime::ASM::addi(context->r0, context->r30, 0x3c);
/*800D187C 000CE67C*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D1880 000CE680*/ PPC::Runtime::ASM::mr(context->r29, context->r4);
/*800D1884 000CE684*/ PPC::Runtime::ASM::lwz(context->r31, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800D1888 000CE688*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x5c, context->r31));
/*800D188C 000CE68C*/ PPC::Runtime::ASM::lbzx(context->r0, context->r3, context->r0);
/* 800D1890 000CE690  54 00 CF FF */ extrwi. context->r0 , context->r0 , 1 , 24
/*800D1894 000CE694*/ PPC::Runtime::ASM::beq(.L_800D18B0);
/*800D1898 000CE698*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_911 @ Get_MemoryOffset_HighBit);
/*800D189C 000CE69C*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_912 @ Get_MemoryOffset_HighBit);
/*800D18A0 000CE6A0*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_911 @ Get_MemoryOffset_LowBit);
/*800D18A4 000CE6A4*/ PPC::Runtime::ASM::li(context->r4, 0xdd);
/*800D18A8 000CE6A8*/ PPC::Runtime::ASM::addi(context->r5, context->r5, MemoryOffset_912 @ Get_MemoryOffset_LowBit);
/*800D18AC 000CE6AC*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800D18B0, 0x800D18B0) //this is a jump label
/*800D18B0 000CE6B0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x5c, context->r31));
/*800D18B4 000CE6B4*/ PPC::Runtime::ASM::addi(context->r0, context->r30, 0xc);
/*800D18B8 000CE6B8*/ PPC::Runtime::ASM::add(context->r4, context->r3, context->r0);
/*800D18BC 000CE6BC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r4));
/*800D18C0 000CE6C0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*800D18C4 000CE6C4*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800D18C8 000CE6C8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r29));
/*800D18CC 000CE6CC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r4));
/*800D18D0 000CE6D0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r29));
/*800D18D4 000CE6D4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800D18D8 000CE6D8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800D18DC 000CE6DC*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D18E0 000CE6E0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800D18E4 000CE6E4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D18E8 000CE6E8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800D18EC 000CE6EC*/ PPC::Runtime::ASM::blr();
}