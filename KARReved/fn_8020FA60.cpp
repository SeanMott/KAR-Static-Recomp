//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_801FED40.hpp"
#include "fn_801FC398.hpp"



void fn_8020FA60(PPC::Runtime::GCContext* context)
{
/*8020FA60 0020C860*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8020FA64 0020C864*/ PPC::Runtime::ASM::mflr(context->r0);
/*8020FA68 0020C868*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020FA6C 0020C86C*/ PPC::Runtime::ASM::li(context->r0, 0x1);
/*8020FA70 0020C870*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8020FA74 0020C874*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8020FA78 0020C878*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x908, context->r3));
/*8020FA7C 0020C87C*/ PPC::Runtime::ASM::bl(fn_801FED40);
/*8020FA80 0020C880*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E251C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020FA84 0020C884*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*8020FA88 0020C888*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E2520 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020FA8C 0020C88C*/ PPC::Runtime::ASM::li(context->r4, 0xe);
/*8020FA90 0020C890*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*8020FA94 0020C894*/ PPC::Runtime::ASM::li(context->r5, 0x0);
/*8020FA98 0020C898*/ PPC::Runtime::ASM::bl(fn_801FC398);
/*8020FA9C 0020C89C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020FAA0 0020C8A0*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8020FAA4 0020C8A4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8020FAA8 0020C8A8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8020FAAC 0020C8AC*/ PPC::Runtime::ASM::blr();
}