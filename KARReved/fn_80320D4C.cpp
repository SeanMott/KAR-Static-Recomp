//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_80320D4C(PPC::Runtime::GCContext* context)
{
/*80320D4C 0031DB4C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*80320D50 0031DB50*/ PPC::Runtime::ASM::mflr(context->r0);
/*80320D54 0031DB54*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80320D58 0031DB58*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80320D5C 0031DB5C*/ PPC::Runtime::ASM::mr(context->r31, context->r4);
/*80320D60 0031DB60*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/* 80320D64 0031DB64  7C 7E 1B 79 */ mr. context->r30 , context->r3
/*80320D68 0031DB68*/ PPC::Runtime::ASM::beq(.L_80320DCC);
/*80320D6C 0031DB6C*/ PPC::Runtime::ASM::lis(context->r3, lbl_804E21EC @ Get_MemoryOffset_HighBit);
/*80320D70 0031DB70*/ PPC::Runtime::ASM::addic.(context->r0, context->r30, 0x14);
/*80320D74 0031DB74*/ PPC::Runtime::ASM::addi(context->r3, context->r3, lbl_804E21EC @ Get_MemoryOffset_LowBit);
/*80320D78 0031DB78*/ PPC::Runtime::ASM::stw(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*80320D7C 0031DB7C*/ PPC::Runtime::ASM::addi(context->r0, context->r3, 0x28);
/*80320D80 0031DB80*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r30));
/*80320D84 0031DB84*/ PPC::Runtime::ASM::beq(.L_80320DA8);
/*80320D88 0031DB88*/ PPC::Runtime::ASM::lis(context->r4, lbl_804E2260 @ Get_MemoryOffset_HighBit);
/*80320D8C 0031DB8C*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x14);
/*80320D90 0031DB90*/ PPC::Runtime::ASM::addi(context->r0, context->r4, lbl_804E2260 @ Get_MemoryOffset_LowBit);
/*80320D94 0031DB94*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r30));
/*80320D98 0031DB98*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r30));
/*80320D9C 0031DB9C*/ PPC::Runtime::ASM::lwz(context->r12, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r12));
/*80320DA0 0031DBA0*/ PPC::Runtime::ASM::mtctr(context->r12);
/*80320DA4 0031DBA4*/ PPC::Runtime::ASM::bctrl();
RUNTIME_PPC_JUMP_LABEL(.L_80320DA8, 0x80320DA8) //this is a jump label
/*80320DA8 0031DBA8*/ PPC::Runtime::ASM::cmplwi(context->r30, 0x0);
/*80320DAC 0031DBAC*/ PPC::Runtime::ASM::beq(.L_80320DBC);
/*80320DB0 0031DBB0*/ PPC::Runtime::ASM::lis(context->r3, lbl_804BDB74 @ Get_MemoryOffset_HighBit);
/*80320DB4 0031DBB4*/ PPC::Runtime::ASM::addi(context->r0, context->r3, lbl_804BDB74 @ Get_MemoryOffset_LowBit);
/*80320DB8 0031DBB8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_80320DBC, 0x80320DBC) //this is a jump label
/*80320DBC 0031DBBC*/ PPC::Runtime::ASM::extsh.(context->r0, context->r31);
/*80320DC0 0031DBC0*/ PPC::Runtime::ASM::ble(.L_80320DCC);
/*80320DC4 0031DBC4*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*80320DC8 0031DBC8*/ PPC::Runtime::ASM::bl(fn_8038CB78);
RUNTIME_PPC_JUMP_LABEL(.L_80320DCC, 0x80320DCC) //this is a jump label
/*80320DCC 0031DBCC*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80320DD0 0031DBD0*/ PPC::Runtime::ASM::mr(context->r3, context->r30);
/*80320DD4 0031DBD4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*80320DD8 0031DBD8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*80320DDC 0031DBDC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80320DE0 0031DBE0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*80320DE4 0031DBE4*/ PPC::Runtime::ASM::blr();
}