//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800D2654(PPC::Runtime::GCContext* context)
{
/*800D2654 000CF454*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800D2658 000CF458*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D265C 000CF45C*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D2660 000CF460*/ PPC::Runtime::ASM::mulli(context->r0, context->r3, 0x140);
/*800D2664 000CF464*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D2668 000CF468*/ PPC::Runtime::ASM::lwz(context->r4, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800D266C 000CF46C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x74, context->r4));
/*800D2670 000CF470*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*800D2674 000CF474*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r3));
/*800D2678 000CF478*/ PPC::Runtime::ASM::clrlwi(context->r0, context->r3, 7);
/*800D267C 000CF47C*/ PPC::Runtime::ASM::srwi(context->r31, context->r3, 28);
/*800D2680 000CF480*/ PPC::Runtime::ASM::cmpwi(context->r0, 0xa);
/*800D2684 000CF484*/ PPC::Runtime::ASM::beq(.L_800D269C);
/*800D2688 000CF488*/ PPC::Runtime::ASM::lis(context->r4, MemoryOffset_915 @ Get_MemoryOffset_HighBit);
/*800D268C 000CF48C*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800D2690 000CF490*/ PPC::Runtime::ASM::addi(context->r5, context->r4, MemoryOffset_915 @ Get_MemoryOffset_LowBit);
/*800D2694 000CF494*/ PPC::Runtime::ASM::li(context->r4, 0x90c);
/*800D2698 000CF498*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800D269C, 0x800D269C) //this is a jump label
/*800D269C 000CF49C*/ PPC::Runtime::ASM::cmpwi(context->r31, 0x2);
/*800D26A0 000CF4A0*/ PPC::Runtime::ASM::blt(.L_800D26B8);
/*800D26A4 000CF4A4*/ PPC::Runtime::ASM::lis(context->r4, MemoryOffset_916 @ Get_MemoryOffset_HighBit);
/*800D26A8 000CF4A8*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800D26AC 000CF4AC*/ PPC::Runtime::ASM::addi(context->r5, context->r4, MemoryOffset_916 @ Get_MemoryOffset_LowBit);
/*800D26B0 000CF4B0*/ PPC::Runtime::ASM::li(context->r4, 0x90d);
/*800D26B4 000CF4B4*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800D26B8, 0x800D26B8) //this is a jump label
/*800D26B8 000CF4B8*/ PPC::Runtime::ASM::neg(context->r0, context->r31);
/*800D26BC 000CF4BC*/ PPC::Runtime::ASM::or(context->r0, context->r0, context->r31);
/*800D26C0 000CF4C0*/ PPC::Runtime::ASM::srwi(context->r3, context->r0, 31);
/*800D26C4 000CF4C4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D26C8 000CF4C8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D26CC 000CF4CC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D26D0 000CF4D0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800D26D4 000CF4D4*/ PPC::Runtime::ASM::blr();
}