//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8020EEC8.hpp"
#include "fn_8020EEC8.hpp"



void fn_8020EDE0(PPC::Runtime::GCContext* context)
{
/*8020EDE0 0020BBE0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8020EDE4 0020BBE4*/ PPC::Runtime::ASM::mflr(context->r0);
/*8020EDE8 0020BBE8*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E2510 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020EDEC 0020BBEC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020EDF0 0020BBF0*/ PPC::Runtime::ASM::lfs(context->f0, STRUCT_FLOAT_COUNT_1805E250C @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020EDF4 0020BBF4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8020EDF8 0020BBF8*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8020EDFC 0020BBFC*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x3c0, context->r3));
/*8020EE00 0020BC00*/ PPC::Runtime::ASM::lfs(context->f3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r3));
/*8020EE04 0020BC04*/ PPC::Runtime::ASM::fmadds(context->f1, context->f2, context->f1, context->f0);
/*8020EE08 0020BC08*/ PPC::Runtime::ASM::lfs(context->f0, STRUCT_FLOAT_COUNT_1805E2514 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020EE0C 0020BC0C*/ PPC::Runtime::ASM::fsubs(context->f1, context->f3, context->f1);
/*8020EE10 0020BC10*/ PPC::Runtime::ASM::stfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r3));
/*8020EE14 0020BC14*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r3));
/*8020EE18 0020BC18*/ PPC::Runtime::ASM::fcmpo(cr0, context->f1, context->f0);
/*8020EE1C 0020BC1C*/ PPC::Runtime::ASM::cror(eq, lt, eq);
/*8020EE20 0020BC20*/ PPC::Runtime::ASM::bne(.L_8020EE2C);
/*8020EE24 0020BC24*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r31));
/*8020EE28 0020BC28*/ PPC::Runtime::ASM::bl(fn_8020EEC8);
RUNTIME_PPC_JUMP_LABEL(.L_8020EE2C, 0x8020EE2C) //this is a jump label
/*8020EE2C 0020BC2C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb48, context->r31));
/*8020EE30 0020BC30*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x12c);
/*8020EE34 0020BC34*/ PPC::Runtime::ASM::ble(.L_8020EE48);
/*8020EE38 0020BC38*/ PPC::Runtime::ASM::lfs(context->f0, STRUCT_FLOAT_COUNT_1805E2514 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*8020EE3C 0020BC3C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*8020EE40 0020BC40*/ PPC::Runtime::ASM::stfs(context->f0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x95c, context->r31));
/*8020EE44 0020BC44*/ PPC::Runtime::ASM::bl(fn_8020EEC8);
RUNTIME_PPC_JUMP_LABEL(.L_8020EE48, 0x8020EE48) //this is a jump label
/*8020EE48 0020BC48*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb48, context->r31));
/*8020EE4C 0020BC4C*/ PPC::Runtime::ASM::addi(context->r0, context->r3, 0x1);
/*8020EE50 0020BC50*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xb48, context->r31));
/*8020EE54 0020BC54*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8020EE58 0020BC58*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8020EE5C 0020BC5C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8020EE60 0020BC60*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8020EE64 0020BC64*/ PPC::Runtime::ASM::blr();
}