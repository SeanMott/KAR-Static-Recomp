//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_Rider_CheckAnimationEnd.hpp"
#include "fn_801B5E34.hpp"



void fn_801B66A0(PPC::Runtime::GCContext* context)
{
/*801B66A0 001B34A0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801B66A4 001B34A4*/ PPC::Runtime::ASM::mflr(context->r0);
/*801B66A8 001B34A8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801B66AC 001B34AC*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801B66B0 001B34B0*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801B66B4 001B34B4*/ PPC::Runtime::ASM::bl(fn_Rider_CheckAnimationEnd);
/*801B66B8 001B34B8*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*801B66BC 001B34BC*/ PPC::Runtime::ASM::beq(.L_801B66D4);
/*801B66C0 001B34C0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38c, context->r31));
/*801B66C4 001B34C4*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*801B66C8 001B34C8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x38, context->r4));
/*801B66CC 001B34CC*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4c0, context->r31));
/*801B66D0 001B34D0*/ PPC::Runtime::ASM::bl(fn_801B5E34);
RUNTIME_PPC_JUMP_LABEL(.L_801B66D4, 0x801B66D4) //this is a jump label
/*801B66D4 001B34D4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801B66D8 001B34D8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801B66DC 001B34DC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801B66E0 001B34E0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801B66E4 001B34E4*/ PPC::Runtime::ASM::blr();
}