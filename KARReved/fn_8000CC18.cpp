//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_gmGetGlobalP.hpp"
#include "fn_gmGet_80536EDC_Ptr.hpp"
#include "fn_SomehowRelatedToTheCSSColorChangingButIsCalledOtherPlaces.hpp"
#include "fn_menu_cityTrial_checkMode.hpp"



void fn_8000CC18(PPC::Runtime::GCContext* context)
{
/*8000CC18 00009A18*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*8000CC1C 00009A1C*/ PPC::Runtime::ASM::mflr(context->r0);
/*8000CC20 00009A20*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8000CC24 00009A24*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8000CC28 00009A28*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8000CC2C 00009A2C*/ PPC::Runtime::ASM::bl(fn_gmGetGlobalP);
/*8000CC30 00009A30*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*8000CC34 00009A34*/ PPC::Runtime::ASM::bl(fn_gmGet_80536EDC_Ptr);
/*8000CC38 00009A38*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*8000CC3C 00009A3C*/ PPC::Runtime::ASM::bl(fn_SomehowRelatedToTheCSSColorChangingButIsCalledOtherPlaces);
/*8000CC40 00009A40*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*8000CC44 00009A44*/ PPC::Runtime::ASM::beq(.L_8000CC50);
/*8000CC48 00009A48*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*8000CC4C 00009A4C*/ PPC::Runtime::ASM::b(.L_8000CCA0);
RUNTIME_PPC_JUMP_LABEL(.L_8000CC50, 0x8000CC50) //this is a jump label
/*8000CC50 00009A50*/ PPC::Runtime::ASM::bl(fn_menu_cityTrial_checkMode);
/*8000CC54 00009A54*/ PPC::Runtime::ASM::extsb.(context->r0, context->r3);
/*8000CC58 00009A58*/ PPC::Runtime::ASM::beq(.L_8000CC64);
/*8000CC5C 00009A5C*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*8000CC60 00009A60*/ PPC::Runtime::ASM::b(.L_8000CCA0);
RUNTIME_PPC_JUMP_LABEL(.L_8000CC64, 0x8000CC64) //this is a jump label
/*8000CC64 00009A64*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2a, context->r30));
/* 8000CC68 00009A68  54 00 D0 02 */ extlwi context->r0 , context->r0 , 2 , 26
/*8000CC6C 00009A6C*/ PPC::Runtime::ASM::srawi(context->r0, context->r0, 31);
/*8000CC70 00009A70*/ PPC::Runtime::ASM::extsb.(context->r0, context->r0);
/*8000CC74 00009A74*/ PPC::Runtime::ASM::beq(.L_8000CC80);
/*8000CC78 00009A78*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*8000CC7C 00009A7C*/ PPC::Runtime::ASM::b(.L_8000CCA0);
RUNTIME_PPC_JUMP_LABEL(.L_8000CC80, 0x8000CC80) //this is a jump label
/*8000CC80 00009A80*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xa, context->r31));
/*8000CC84 00009A84*/ PPC::Runtime::ASM::li(context->r4, 0x5);
/*8000CC88 00009A88*/ PPC::Runtime::ASM::extsb(context->r0, context->r0);
/*8000CC8C 00009A8C*/ PPC::Runtime::ASM::xor(context->r0, context->r4, context->r0);
/*8000CC90 00009A90*/ PPC::Runtime::ASM::srawi(context->r3, context->r0, 1);
/*8000CC94 00009A94*/ PPC::Runtime::ASM::and(context->r0, context->r0, context->r4);
/*8000CC98 00009A98*/ PPC::Runtime::ASM::subf(context->r0, context->r0, context->r3);
/*8000CC9C 00009A9C*/ PPC::Runtime::ASM::srwi(context->r3, context->r0, 31);
RUNTIME_PPC_JUMP_LABEL(.L_8000CCA0, 0x8000CCA0) //this is a jump label
/*8000CCA0 00009AA0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*8000CCA4 00009AA4*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*8000CCA8 00009AA8*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*8000CCAC 00009AAC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*8000CCB0 00009AB0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*8000CCB4 00009AB4*/ PPC::Runtime::ASM::blr();
}