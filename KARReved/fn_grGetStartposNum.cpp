//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800DA3D4.hpp"
#include "fn_800DA3D4.hpp"



void fn_grGetStartposNum(PPC::Runtime::GCContext* context)
{
/*800D0B30 000CD930*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800D0B34 000CD934*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D0B38 000CD938*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D0B3C 000CD93C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D0B40 000CD940*/ PPC::Runtime::ASM::lwz(context->r31, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800D0B44 000CD944*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800D0B48 000CD948*/ PPC::Runtime::ASM::bl(fn_800DA3D4);
/*800D0B4C 000CD94C*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800D0B50 000CD950*/ PPC::Runtime::ASM::beq(.L_800D0B64);
/*800D0B54 000CD954*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800D0B58 000CD958*/ PPC::Runtime::ASM::bl(fn_800DA3D4);
/*800D0B5C 000CD95C*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800D0B60 000CD960*/ PPC::Runtime::ASM::b(.L_800D0B68);
RUNTIME_PPC_JUMP_LABEL(.L_800D0B64, 0x800D0B64) //this is a jump label
/*800D0B64 000CD964*/ PPC::Runtime::ASM::li(context->r3, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_800D0B68, 0x800D0B68) //this is a jump label
/*800D0B68 000CD968*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D0B6C 000CD96C*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D0B70 000CD970*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D0B74 000CD974*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800D0B78 000CD978*/ PPC::Runtime::ASM::blr();
}