//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800CED6C(PPC::Runtime::GCContext* context)
{
/*800CED6C 000CBB6C*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800CED70 000CBB70*/ PPC::Runtime::ASM::mflr(context->r0);
/*800CED74 000CBB74*/ PPC::Runtime::ASM::slwi(context->r5, context->r3, 6);
/*800CED78 000CBB78*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CED7C 000CBB7C*/ PPC::Runtime::ASM::addi(context->r0, context->r5, 0x3c);
/*800CED80 000CBB80*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800CED84 000CBB84*/ PPC::Runtime::ASM::lwz(context->r4, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CED88 000CBB88*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x5c, context->r4));
/*800CED8C 000CBB8C*/ PPC::Runtime::ASM::lbzx(context->r0, context->r3, context->r0);
/* 800CED90 000CBB90  54 00 DF FF */ extrwi. context->r0 , context->r0 , 1 , 26
/*800CED94 000CBB94*/ PPC::Runtime::ASM::beq(.L_800CEDF0);
/*800CED98 000CBB98*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r5);
/*800CED9C 000CBB9C*/ PPC::Runtime::ASM::li(context->r0, 0x0);
/*800CEDA0 000CBBA0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x34, context->r3));
/* 800CEDA4 000CBBA4  54 7F B7 7F */ extrwi. context->r31 , context->r3 , 3 , 19
/*800CEDA8 000CBBA8*/ PPC::Runtime::ASM::blt(.L_800CEDB8);
/*800CEDAC 000CBBAC*/ PPC::Runtime::ASM::cmpwi(context->r31, 0x8);
/*800CEDB0 000CBBB0*/ PPC::Runtime::ASM::bge(.L_800CEDB8);
/*800CEDB4 000CBBB4*/ PPC::Runtime::ASM::li(context->r0, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800CEDB8, 0x800CEDB8) //this is a jump label
/*800CEDB8 000CBBB8*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800CEDBC 000CBBBC*/ PPC::Runtime::ASM::bne(.L_800CEDD4);
/*800CEDC0 000CBBC0*/ PPC::Runtime::ASM::lis(context->r4, String_Debug_ "GrCFF_ForcedReflectNumMaxIndexStuf" Get_MemoryOffset_HighBit);
/*800CEDC4 000CBBC4*/ PPC::Runtime::ASM::li(context->r3, String_ "grlib." Get_MemoryOffset_SDA21);
/*800CEDC8 000CBBC8*/ PPC::Runtime::ASM::addi(context->r5, context->r4, String_Debug_ "GrCFF_ForcedReflectNumMaxIndexStuf" Get_MemoryOffset_LowBit);
/*800CEDCC 000CBBCC*/ PPC::Runtime::ASM::li(context->r4, 0x11d);
/*800CEDD0 000CBBD0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800CEDD4, 0x800CEDD4) //this is a jump label
/*800CEDD4 000CBBD4*/ PPC::Runtime::ASM::lwz(context->r3, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800CEDD8 000CBBD8*/ PPC::Runtime::ASM::slwi(context->r0, context->r31, 2);
/*800CEDDC 000CBBDC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800CEDE0 000CBBE0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r3));
/*800CEDE4 000CBBE4*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*800CEDE8 000CBBE8*/ PPC::Runtime::ASM::lfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x40, context->r3));
/*800CEDEC 000CBBEC*/ PPC::Runtime::ASM::b(.L_800CEDF4);
RUNTIME_PPC_JUMP_LABEL(.L_800CEDF0, 0x800CEDF0) //this is a jump label
/*800CEDF0 000CBBF0*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF5DC @ Get_MemoryOffset_SDA21 ( context->r0 ));
RUNTIME_PPC_JUMP_LABEL(.L_800CEDF4, 0x800CEDF4) //this is a jump label
/*800CEDF4 000CBBF4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800CEDF8 000CBBF8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800CEDFC 000CBBFC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800CEE00 000CBC00*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800CEE04 000CBC04*/ PPC::Runtime::ASM::blr();
}