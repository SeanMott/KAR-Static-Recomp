//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800F7A64.hpp"
#include "fn_800F7AB8.hpp"
#include "fn_800FAFD0.hpp"



void fn_800FB2BC(PPC::Runtime::GCContext* context)
{
/*800FB2BC 000F80BC*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800FB2C0 000F80C0*/ PPC::Runtime::ASM::mflr(context->r0);
/*800FB2C4 000F80C4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FB2C8 000F80C8*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800FB2CC 000F80CC*/ PPC::Runtime::ASM::psq_st(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1)0, context->qr0);
/*800FB2D0 000F80D0*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800FB2D4 000F80D4*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800FB2D8 000F80D8*/ PPC::Runtime::ASM::lwz(context->r5, STRUCT_BYTE4_COUNT_1grGlobalP @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FB2DC 000F80DC*/ PPC::Runtime::ASM::mulli(context->r0, context->r3, 0x140);
/*800FB2E0 000F80E0*/ PPC::Runtime::ASM::fmr(context->f31, context->f1);
/*800FB2E4 000F80E4*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*800FB2E8 000F80E8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x74, context->r5));
/*800FB2EC 000F80EC*/ PPC::Runtime::ASM::add(context->r3, context->r3, context->r0);
/*800FB2F0 000F80F0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x138, context->r3));
/*800FB2F4 000F80F4*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800FB2F8 000F80F8*/ PPC::Runtime::ASM::beq(.L_800FB354);
/*800FB2FC 000F80FC*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*800FB300 000F8100*/ PPC::Runtime::ASM::bl(fn_800F7A64);
/*800FB304 000F8104*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x14);
/*800FB308 000F8108*/ PPC::Runtime::ASM::beq(.L_800FB324);
/*800FB30C 000F810C*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_1001 @ Get_MemoryOffset_HighBit);
/*800FB310 000F8110*/ PPC::Runtime::ASM::lis(context->r5, String_Debug_ "grYakuGetKind(gobj)EqualToGr_YakuKind_RecoveryZon" Get_MemoryOffset_HighBit);
/*800FB314 000F8114*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_1001 @ Get_MemoryOffset_LowBit);
/*800FB318 000F8118*/ PPC::Runtime::ASM::li(context->r4, 0x19d);
/*800FB31C 000F811C*/ PPC::Runtime::ASM::addi(context->r5, context->r5, String_Debug_ "grYakuGetKind(gobj)EqualToGr_YakuKind_RecoveryZon" Get_MemoryOffset_LowBit);
/*800FB320 000F8120*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800FB324, 0x800FB324) //this is a jump label
/*800FB324 000F8124*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800FB328 000F8128*/ PPC::Runtime::ASM::bl(fn_800F7AB8);
/*800FB32C 000F812C*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x1);
/*800FB330 000F8130*/ PPC::Runtime::ASM::beq(.L_800FB338);
/*800FB334 000F8134*/ PPC::Runtime::ASM::b(.L_800FB34C);
RUNTIME_PPC_JUMP_LABEL(.L_800FB338, 0x800FB338) //this is a jump label
/*800FB338 000F8138*/ PPC::Runtime::ASM::fmr(context->f1, context->f31);
/*800FB33C 000F813C*/ PPC::Runtime::ASM::mr(context->r3, context->r31);
/*800FB340 000F8140*/ PPC::Runtime::ASM::mr(context->r4, context->r30);
/*800FB344 000F8144*/ PPC::Runtime::ASM::bl(fn_800FAFD0);
/*800FB348 000F8148*/ PPC::Runtime::ASM::b(.L_800FB358);
RUNTIME_PPC_JUMP_LABEL(.L_800FB34C, 0x800FB34C) //this is a jump label
/*800FB34C 000F814C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF8D4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FB350 000F8150*/ PPC::Runtime::ASM::b(.L_800FB358);
RUNTIME_PPC_JUMP_LABEL(.L_800FB354, 0x800FB354) //this is a jump label
/*800FB354 000F8154*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF8D4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
RUNTIME_PPC_JUMP_LABEL(.L_800FB358, 0x800FB358) //this is a jump label
/*800FB358 000F8158*/ PPC::Runtime::ASM::psq_l(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1)0, context->qr0);
/*800FB35C 000F815C*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800FB360 000F8160*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800FB364 000F8164*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800FB368 000F8168*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800FB36C 000F816C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800FB370 000F8170*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800FB374 000F8174*/ PPC::Runtime::ASM::blr();
}