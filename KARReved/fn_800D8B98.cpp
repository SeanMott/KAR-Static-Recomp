//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_800D8A60.hpp"
#include "fn_80055DA0.hpp"
#include "fn_800D8A60.hpp"



void fn_800D8B98(PPC::Runtime::GCContext* context)
{
/*800D8B98 000D5998*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800D8B9C 000D599C*/ PPC::Runtime::ASM::mflr(context->r0);
/*800D8BA0 000D59A0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D8BA4 000D59A4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D8BA8 000D59A8*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D8BAC 000D59AC*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800D8BB0 000D59B0*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800D8BB4 000D59B4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r3));
/*800D8BB8 000D59B8*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*800D8BBC 000D59BC*/ PPC::Runtime::ASM::beq(.L_800D8BE8);
/*800D8BC0 000D59C0*/ PPC::Runtime::ASM::lwz(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r3));
/*800D8BC4 000D59C4*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x104);
/*800D8BC8 000D59C8*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800D8BCC 000D59CC*/ PPC::Runtime::ASM::lwz(context->r5, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r8));
/*800D8BD0 000D59D0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r4));
/*800D8BD4 000D59D4*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r8));
/*800D8BD8 000D59D8*/ PPC::Runtime::ASM::lwz(context->r7, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r8));
/*800D8BDC 000D59DC*/ PPC::Runtime::ASM::lwz(context->r8, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r8));
/*800D8BE0 000D59E0*/ PPC::Runtime::ASM::bl(fn_800D8A60);
/*800D8BE4 000D59E4*/ PPC::Runtime::ASM::b(.L_800D8C10);
RUNTIME_PPC_JUMP_LABEL(.L_800D8BE8, 0x800D8BE8) //this is a jump label
/*800D8BE8 000D59E8*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800D8BEC 000D59EC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x28, context->r3));
/*800D8BF0 000D59F0*/ PPC::Runtime::ASM::bl(fn_80055DA0);
/*800D8BF4 000D59F4*/ PPC::Runtime::ASM::mr(context->r5, context->r3);
/*800D8BF8 000D59F8*/ PPC::Runtime::ASM::mr(context->r4, context->r31);
/*800D8BFC 000D59FC*/ PPC::Runtime::ASM::addi(context->r3, context->r30, 0x104);
/*800D8C00 000D5A00*/ PPC::Runtime::ASM::li(context->r6, 0x1);
/*800D8C04 000D5A04*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*800D8C08 000D5A08*/ PPC::Runtime::ASM::li(context->r8, 0x0);
/*800D8C0C 000D5A0C*/ PPC::Runtime::ASM::bl(fn_800D8A60);
RUNTIME_PPC_JUMP_LABEL(.L_800D8C10, 0x800D8C10) //this is a jump label
/*800D8C10 000D5A10*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800D8C14 000D5A14*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*800D8C18 000D5A18*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r1));
/*800D8C1C 000D5A1C*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800D8C20 000D5A20*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800D8C24 000D5A24*/ PPC::Runtime::ASM::blr();
}