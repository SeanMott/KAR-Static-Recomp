//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_chargeLogic?.hpp"



void fn_801FAC48(PPC::Runtime::GCContext* context)
{
/*801FAC48 001F7A48*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*801FAC4C 001F7A4C*/ PPC::Runtime::ASM::mflr(context->r0);
/*801FAC50 001F7A50*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805E21E0 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801FAC54 001F7A54*/ PPC::Runtime::ASM::li(context->r4, 0x16);
/*801FAC58 001F7A58*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801FAC5C 001F7A5C*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*801FAC60 001F7A60*/ PPC::Runtime::ASM::lfs(context->f2, STRUCT_FLOAT_COUNT_1805E21E4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*801FAC64 001F7A64*/ PPC::Runtime::ASM::li(context->r6, 0x0);
/*801FAC68 001F7A68*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801FAC6C 001F7A6C*/ PPC::Runtime::ASM::mr(context->r31, context->r3);
/*801FAC70 001F7A70*/ PPC::Runtime::ASM::bl(fn_chargeLogic?);
/*801FAC74 001F7A74*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r31));
/*801FAC78 001F7A78*/ PPC::Runtime::ASM::li(context->r3, 0x1);
/*801FAC7C 001F7A7C*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r3, 0, 31, 31);
/*801FAC80 001F7A80*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc32, context->r31));
/*801FAC84 001F7A84*/ PPC::Runtime::ASM::lbz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc33, context->r31));
/*801FAC88 001F7A88*/ PPC::Runtime::ASM::rlwimi(context->r0, context->r3, 0, 31, 31);
/*801FAC8C 001F7A8C*/ PPC::Runtime::ASM::stb(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc33, context->r31));
/*801FAC90 001F7A90*/ PPC::Runtime::ASM::lbz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc39, context->r31));
/*801FAC94 001F7A94*/ PPC::Runtime::ASM::extrwi(context->r0, context->r3, 2, 26);
/*801FAC98 001F7A98*/ PPC::Runtime::ASM::ori(context->r0, context->r0, 0x1);
/*801FAC9C 001F7A9C*/ PPC::Runtime::ASM::rlwimi(context->r3, context->r0, 4, 26, 27);
/*801FACA0 001F7AA0*/ PPC::Runtime::ASM::stb(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc39, context->r31));
/*801FACA4 001F7AA4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*801FACA8 001F7AA8*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0xc, context->r1));
/*801FACAC 001F7AAC*/ PPC::Runtime::ASM::mtlr(context->r0);
/*801FACB0 001F7AB0*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*801FACB4 001F7AB4*/ PPC::Runtime::ASM::blr();
}