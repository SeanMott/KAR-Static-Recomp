//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following



void fn_800E77D0(PPC::Runtime::GCContext* context)
{
/*800E77D0 000E45D0*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800E77D4 000E45D4*/ PPC::Runtime::ASM::mflr(context->r0);
/*800E77D8 000E45D8*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E77DC 000E45DC*/ PPC::Runtime::ASM::stfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E77E0 000E45E0*/ PPC::Runtime::ASM::fmr(context->f31, context->f1);
/*800E77E4 000E45E4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E77E8 000E45E8*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E77EC 000E45EC*/ PPC::Runtime::ASM::mr(context->r30, context->r3);
/*800E77F0 000E45F0*/ PPC::Runtime::ASM::lis(context->r3, String_Debug_ "grairflow." Get_MemoryOffset_HighBit);
/*800E77F4 000E45F4*/ PPC::Runtime::ASM::lhz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r30));
/*800E77F8 000E45F8*/ PPC::Runtime::ASM::addi(context->r31, context->r3, String_Debug_ "grairflow." Get_MemoryOffset_LowBit);
/*800E77FC 000E45FC*/ PPC::Runtime::ASM::cmplwi(context->r0, 0xd);
/*800E7800 000E4600*/ PPC::Runtime::ASM::beq(.L_800E7814);
/*800E7804 000E4604*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E7808 000E4608*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x58);
/*800E780C 000E460C*/ PPC::Runtime::ASM::li(context->r4, 0x1ef);
/*800E7810 000E4610*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7814, 0x800E7814) //this is a jump label
/*800E7814 000E4614*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r30));
/*800E7818 000E4618*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*800E781C 000E461C*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x3);
/*800E7820 000E4620*/ PPC::Runtime::ASM::beq(.L_800E7834);
/*800E7824 000E4624*/ PPC::Runtime::ASM::addi(context->r3, context->r31, 0x0);
/*800E7828 000E4628*/ PPC::Runtime::ASM::addi(context->r5, context->r31, 0x110);
/*800E782C 000E462C*/ PPC::Runtime::ASM::li(context->r4, 0x1f3);
/*800E7830 000E4630*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800E7834, 0x800E7834) //this is a jump label
/*800E7834 000E4634*/ PPC::Runtime::ASM::stfs(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r30));
/*800E7838 000E4638*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800E783C 000E463C*/ PPC::Runtime::ASM::lfd(context->f31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800E7840 000E4640*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800E7844 000E4644*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x10, context->r1));
/*800E7848 000E4648*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800E784C 000E464C*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800E7850 000E4650*/ PPC::Runtime::ASM::blr();
}