//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_80112044.hpp"
#include "fn_8011582C.hpp"



void fn_80130BE8(PPC::Runtime::GCContext* context)
{
/*80130BE8 0012D9E8*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*80130BEC 0012D9EC*/ PPC::Runtime::ASM::mflr(context->r0);
/*80130BF0 0012D9F0*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80130BF4 0012D9F4*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80130BF8 0012D9F8*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80130BFC 0012D9FC*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80130C00 0012DA00*/ PPC::Runtime::ASM::bl(fn_80112044);
/*80130C04 0012DA04*/ PPC::Runtime::ASM::addi(context->r30, context->r3, 0xc24);
/*80130C08 0012DA08*/ PPC::Runtime::ASM::li(context->r29, 0x0);
/*80130C0C 0012DA0C*/ PPC::Runtime::ASM::li(context->r31, 0x0);
RUNTIME_PPC_JUMP_LABEL(.L_80130C10, 0x80130C10) //this is a jump label
/*80130C10 0012DA10*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
/*80130C14 0012DA14*/ PPC::Runtime::ASM::cmplwi(context->r3, 0x0);
/*80130C18 0012DA18*/ PPC::Runtime::ASM::beq(.L_80130C24);
/*80130C1C 0012DA1C*/ PPC::Runtime::ASM::bl(fn_8011582C);
/*80130C20 0012DA20*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r30));
RUNTIME_PPC_JUMP_LABEL(.L_80130C24, 0x80130C24) //this is a jump label
/*80130C24 0012DA24*/ PPC::Runtime::ASM::addi(context->r29, context->r29, 0x1);
/*80130C28 0012DA28*/ PPC::Runtime::ASM::addi(context->r30, context->r30, 0x4);
/*80130C2C 0012DA2C*/ PPC::Runtime::ASM::cmpwi(context->r29, 0x4);
/*80130C30 0012DA30*/ PPC::Runtime::ASM::blt(.L_80130C10);
/*80130C34 0012DA34*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*80130C38 0012DA38*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*80130C3C 0012DA3C*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*80130C40 0012DA40*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*80130C44 0012DA44*/ PPC::Runtime::ASM::mtlr(context->r0);
/*80130C48 0012DA48*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*80130C4C 0012DA4C*/ PPC::Runtime::ASM::blr();
}