//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_8010A450.hpp"



void fn_800EEE70(PPC::Runtime::GCContext* context)
{
/*800EEE70 000EBC70*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x20, context->r1));
/*800EEE74 000EBC74*/ PPC::Runtime::ASM::mflr(context->r0);
/*800EEE78 000EBC78*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800EEE7C 000EBC7C*/ PPC::Runtime::ASM::stw(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800EEE80 000EBC80*/ PPC::Runtime::ASM::stw(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800EEE84 000EBC84*/ PPC::Runtime::ASM::mr(context->r30, context->r4);
/*800EEE88 000EBC88*/ PPC::Runtime::ASM::stw(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800EEE8C 000EBC8C*/ PPC::Runtime::ASM::mr(context->r29, context->r3);
/*800EEE90 000EBC90*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800EEE94 000EBC94*/ PPC::Runtime::ASM::li(context->r3, 0x0);
/*800EEE98 000EBC98*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x50, context->r4));
/*800EEE9C 000EBC9C*/ PPC::Runtime::ASM::cmplwi(context->r31, 0x0);
/*800EEEA0 000EBCA0*/ PPC::Runtime::ASM::beq(.L_800EEEB4);
/*800EEEA4 000EBCA4*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r31));
/*800EEEA8 000EBCA8*/ PPC::Runtime::ASM::cmpwi(context->r0, 0x0);
/*800EEEAC 000EBCAC*/ PPC::Runtime::ASM::bne(.L_800EEEB4);
/*800EEEB0 000EBCB0*/ PPC::Runtime::ASM::li(context->r3, 0x1);
RUNTIME_PPC_JUMP_LABEL(.L_800EEEB4, 0x800EEEB4) //this is a jump label
/*800EEEB4 000EBCB4*/ PPC::Runtime::ASM::cmpwi(context->r3, 0x0);
/*800EEEB8 000EBCB8*/ PPC::Runtime::ASM::bne(.L_800EEED4);
/*800EEEBC 000EBCBC*/ PPC::Runtime::ASM::lis(context->r3, MemoryOffset_973 @ Get_MemoryOffset_HighBit);
/*800EEEC0 000EBCC0*/ PPC::Runtime::ASM::lis(context->r5, MemoryOffset_974 @ Get_MemoryOffset_HighBit);
/*800EEEC4 000EBCC4*/ PPC::Runtime::ASM::addi(context->r3, context->r3, MemoryOffset_973 @ Get_MemoryOffset_LowBit);
/*800EEEC8 000EBCC8*/ PPC::Runtime::ASM::li(context->r4, 0x18);
/*800EEECC 000EBCCC*/ PPC::Runtime::ASM::addi(context->r5, context->r5, MemoryOffset_974 @ Get_MemoryOffset_LowBit);
/*800EEED0 000EBCD0*/ PPC::Runtime::ASM::bl(fn___assert);
RUNTIME_PPC_JUMP_LABEL(.L_800EEED4, 0x800EEED4) //this is a jump label
/*800EEED4 000EBCD4*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r31));
/*800EEED8 000EBCD8*/ PPC::Runtime::ASM::mr(context->r5, context->r30);
/*800EEEDC 000EBCDC*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r29));
/*800EEEE0 000EBCE0*/ PPC::Runtime::ASM::lwz(context->r4, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x4, context->r4));
/*800EEEE4 000EBCE4*/ PPC::Runtime::ASM::bl(fn_8010A450);
/*800EEEE8 000EBCE8*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x24, context->r1));
/*800EEEEC 000EBCEC*/ PPC::Runtime::ASM::lwz(context->r31, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x1c, context->r1));
/*800EEEF0 000EBCF0*/ PPC::Runtime::ASM::lwz(context->r30, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x18, context->r1));
/*800EEEF4 000EBCF4*/ PPC::Runtime::ASM::lwz(context->r29, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800EEEF8 000EBCF8*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800EEEFC 000EBCFC*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x20);
/*800EEF00 000EBD00*/ PPC::Runtime::ASM::blr();
}