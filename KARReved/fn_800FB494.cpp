//this code was generated by PPC || "https://github.com/SeanMott/PPC"


//auto-include
#include <PPCRuntime/GCContext.hpp>
#include <PPCRuntime/MacroJumps.hpp>


//this file depends on the following
#include "fn_killWhispy.hpp"



void fn_800FB494(PPC::Runtime::GCContext* context)
{
/*800FB494 000F8294*/ PPC::Runtime::ASM::stwu(context->r1, PPC_RUNTIME_GET_MEMORY_OFFSET_NEG_HEX_LITERAL_OF_SINGLE_REGISTER(-0x10, context->r1));
/*800FB498 000F8298*/ PPC::Runtime::ASM::mflr(context->r0);
/*800FB49C 000F829C*/ PPC::Runtime::ASM::lfs(context->f1, STRUCT_FLOAT_COUNT_1805DF8D4 @ Get_MemoryOffset_SDA21 ( context->r0 ));
/*800FB4A0 000F82A0*/ PPC::Runtime::ASM::li(context->r4, 0x2);
/*800FB4A4 000F82A4*/ PPC::Runtime::ASM::stw(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FB4A8 000F82A8*/ PPC::Runtime::ASM::li(context->r5, -0x1);
/*800FB4AC 000F82AC*/ PPC::Runtime::ASM::fmr(context->f2, context->f1);
/*800FB4B0 000F82B0*/ PPC::Runtime::ASM::li(context->r7, 0x0);
/*800FB4B4 000F82B4*/ PPC::Runtime::ASM::lwz(context->r3, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x2c, context->r3));
/*800FB4B8 000F82B8*/ PPC::Runtime::ASM::fmr(context->f3, context->f1);
/*800FB4BC 000F82BC*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x8, context->r3));
/*800FB4C0 000F82C0*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r6));
/*800FB4C4 000F82C4*/ PPC::Runtime::ASM::stfs(context->f1, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x134, context->r3));
/*800FB4C8 000F82C8*/ PPC::Runtime::ASM::lwz(context->r6, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x0, context->r6));
/*800FB4CC 000F82CC*/ PPC::Runtime::ASM::bl(fn_killWhispy);
/*800FB4D0 000F82D0*/ PPC::Runtime::ASM::lwz(context->r0, PPC_RUNTIME_GET_MEMORY_OFFSET_POS_HEX_LITERAL_OF_SINGLE_REGISTER(0x14, context->r1));
/*800FB4D4 000F82D4*/ PPC::Runtime::ASM::mtlr(context->r0);
/*800FB4D8 000F82D8*/ PPC::Runtime::ASM::addi(context->r1, context->r1, 0x10);
/*800FB4DC 000F82DC*/ PPC::Runtime::ASM::blr();
}